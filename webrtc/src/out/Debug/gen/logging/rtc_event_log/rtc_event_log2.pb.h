// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rtc_event_log2.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rtc_5fevent_5flog2_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rtc_5fevent_5flog2_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rtc_5fevent_5flog2_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rtc_5fevent_5flog2_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[30]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace webrtc {
namespace rtclog2 {
class AlrState;
class AlrStateDefaultTypeInternal;
extern AlrStateDefaultTypeInternal _AlrState_default_instance_;
class AudioNetworkAdaptations;
class AudioNetworkAdaptationsDefaultTypeInternal;
extern AudioNetworkAdaptationsDefaultTypeInternal _AudioNetworkAdaptations_default_instance_;
class AudioPlayoutEvents;
class AudioPlayoutEventsDefaultTypeInternal;
extern AudioPlayoutEventsDefaultTypeInternal _AudioPlayoutEvents_default_instance_;
class AudioRecvStreamConfig;
class AudioRecvStreamConfigDefaultTypeInternal;
extern AudioRecvStreamConfigDefaultTypeInternal _AudioRecvStreamConfig_default_instance_;
class AudioSendStreamConfig;
class AudioSendStreamConfigDefaultTypeInternal;
extern AudioSendStreamConfigDefaultTypeInternal _AudioSendStreamConfig_default_instance_;
class BeginLogEvent;
class BeginLogEventDefaultTypeInternal;
extern BeginLogEventDefaultTypeInternal _BeginLogEvent_default_instance_;
class BweProbeCluster;
class BweProbeClusterDefaultTypeInternal;
extern BweProbeClusterDefaultTypeInternal _BweProbeCluster_default_instance_;
class BweProbeResultFailure;
class BweProbeResultFailureDefaultTypeInternal;
extern BweProbeResultFailureDefaultTypeInternal _BweProbeResultFailure_default_instance_;
class BweProbeResultSuccess;
class BweProbeResultSuccessDefaultTypeInternal;
extern BweProbeResultSuccessDefaultTypeInternal _BweProbeResultSuccess_default_instance_;
class DelayBasedBweUpdates;
class DelayBasedBweUpdatesDefaultTypeInternal;
extern DelayBasedBweUpdatesDefaultTypeInternal _DelayBasedBweUpdates_default_instance_;
class DtlsTransportStateEvent;
class DtlsTransportStateEventDefaultTypeInternal;
extern DtlsTransportStateEventDefaultTypeInternal _DtlsTransportStateEvent_default_instance_;
class DtlsWritableState;
class DtlsWritableStateDefaultTypeInternal;
extern DtlsWritableStateDefaultTypeInternal _DtlsWritableState_default_instance_;
class EndLogEvent;
class EndLogEventDefaultTypeInternal;
extern EndLogEventDefaultTypeInternal _EndLogEvent_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class EventStream;
class EventStreamDefaultTypeInternal;
extern EventStreamDefaultTypeInternal _EventStream_default_instance_;
class GenericAckReceived;
class GenericAckReceivedDefaultTypeInternal;
extern GenericAckReceivedDefaultTypeInternal _GenericAckReceived_default_instance_;
class GenericPacketReceived;
class GenericPacketReceivedDefaultTypeInternal;
extern GenericPacketReceivedDefaultTypeInternal _GenericPacketReceived_default_instance_;
class GenericPacketSent;
class GenericPacketSentDefaultTypeInternal;
extern GenericPacketSentDefaultTypeInternal _GenericPacketSent_default_instance_;
class IceCandidatePairConfig;
class IceCandidatePairConfigDefaultTypeInternal;
extern IceCandidatePairConfigDefaultTypeInternal _IceCandidatePairConfig_default_instance_;
class IceCandidatePairEvent;
class IceCandidatePairEventDefaultTypeInternal;
extern IceCandidatePairEventDefaultTypeInternal _IceCandidatePairEvent_default_instance_;
class IncomingRtcpPackets;
class IncomingRtcpPacketsDefaultTypeInternal;
extern IncomingRtcpPacketsDefaultTypeInternal _IncomingRtcpPackets_default_instance_;
class IncomingRtpPackets;
class IncomingRtpPacketsDefaultTypeInternal;
extern IncomingRtpPacketsDefaultTypeInternal _IncomingRtpPackets_default_instance_;
class LossBasedBweUpdates;
class LossBasedBweUpdatesDefaultTypeInternal;
extern LossBasedBweUpdatesDefaultTypeInternal _LossBasedBweUpdates_default_instance_;
class OutgoingRtcpPackets;
class OutgoingRtcpPacketsDefaultTypeInternal;
extern OutgoingRtcpPacketsDefaultTypeInternal _OutgoingRtcpPackets_default_instance_;
class OutgoingRtpPackets;
class OutgoingRtpPacketsDefaultTypeInternal;
extern OutgoingRtpPacketsDefaultTypeInternal _OutgoingRtpPackets_default_instance_;
class RemoteEstimates;
class RemoteEstimatesDefaultTypeInternal;
extern RemoteEstimatesDefaultTypeInternal _RemoteEstimates_default_instance_;
class RouteChange;
class RouteChangeDefaultTypeInternal;
extern RouteChangeDefaultTypeInternal _RouteChange_default_instance_;
class RtpHeaderExtensionConfig;
class RtpHeaderExtensionConfigDefaultTypeInternal;
extern RtpHeaderExtensionConfigDefaultTypeInternal _RtpHeaderExtensionConfig_default_instance_;
class VideoRecvStreamConfig;
class VideoRecvStreamConfigDefaultTypeInternal;
extern VideoRecvStreamConfigDefaultTypeInternal _VideoRecvStreamConfig_default_instance_;
class VideoSendStreamConfig;
class VideoSendStreamConfigDefaultTypeInternal;
extern VideoSendStreamConfigDefaultTypeInternal _VideoSendStreamConfig_default_instance_;
}  // namespace rtclog2
}  // namespace webrtc
PROTOBUF_NAMESPACE_OPEN
template<> ::webrtc::rtclog2::AlrState* Arena::CreateMaybeMessage<::webrtc::rtclog2::AlrState>(Arena*);
template<> ::webrtc::rtclog2::AudioNetworkAdaptations* Arena::CreateMaybeMessage<::webrtc::rtclog2::AudioNetworkAdaptations>(Arena*);
template<> ::webrtc::rtclog2::AudioPlayoutEvents* Arena::CreateMaybeMessage<::webrtc::rtclog2::AudioPlayoutEvents>(Arena*);
template<> ::webrtc::rtclog2::AudioRecvStreamConfig* Arena::CreateMaybeMessage<::webrtc::rtclog2::AudioRecvStreamConfig>(Arena*);
template<> ::webrtc::rtclog2::AudioSendStreamConfig* Arena::CreateMaybeMessage<::webrtc::rtclog2::AudioSendStreamConfig>(Arena*);
template<> ::webrtc::rtclog2::BeginLogEvent* Arena::CreateMaybeMessage<::webrtc::rtclog2::BeginLogEvent>(Arena*);
template<> ::webrtc::rtclog2::BweProbeCluster* Arena::CreateMaybeMessage<::webrtc::rtclog2::BweProbeCluster>(Arena*);
template<> ::webrtc::rtclog2::BweProbeResultFailure* Arena::CreateMaybeMessage<::webrtc::rtclog2::BweProbeResultFailure>(Arena*);
template<> ::webrtc::rtclog2::BweProbeResultSuccess* Arena::CreateMaybeMessage<::webrtc::rtclog2::BweProbeResultSuccess>(Arena*);
template<> ::webrtc::rtclog2::DelayBasedBweUpdates* Arena::CreateMaybeMessage<::webrtc::rtclog2::DelayBasedBweUpdates>(Arena*);
template<> ::webrtc::rtclog2::DtlsTransportStateEvent* Arena::CreateMaybeMessage<::webrtc::rtclog2::DtlsTransportStateEvent>(Arena*);
template<> ::webrtc::rtclog2::DtlsWritableState* Arena::CreateMaybeMessage<::webrtc::rtclog2::DtlsWritableState>(Arena*);
template<> ::webrtc::rtclog2::EndLogEvent* Arena::CreateMaybeMessage<::webrtc::rtclog2::EndLogEvent>(Arena*);
template<> ::webrtc::rtclog2::Event* Arena::CreateMaybeMessage<::webrtc::rtclog2::Event>(Arena*);
template<> ::webrtc::rtclog2::EventStream* Arena::CreateMaybeMessage<::webrtc::rtclog2::EventStream>(Arena*);
template<> ::webrtc::rtclog2::GenericAckReceived* Arena::CreateMaybeMessage<::webrtc::rtclog2::GenericAckReceived>(Arena*);
template<> ::webrtc::rtclog2::GenericPacketReceived* Arena::CreateMaybeMessage<::webrtc::rtclog2::GenericPacketReceived>(Arena*);
template<> ::webrtc::rtclog2::GenericPacketSent* Arena::CreateMaybeMessage<::webrtc::rtclog2::GenericPacketSent>(Arena*);
template<> ::webrtc::rtclog2::IceCandidatePairConfig* Arena::CreateMaybeMessage<::webrtc::rtclog2::IceCandidatePairConfig>(Arena*);
template<> ::webrtc::rtclog2::IceCandidatePairEvent* Arena::CreateMaybeMessage<::webrtc::rtclog2::IceCandidatePairEvent>(Arena*);
template<> ::webrtc::rtclog2::IncomingRtcpPackets* Arena::CreateMaybeMessage<::webrtc::rtclog2::IncomingRtcpPackets>(Arena*);
template<> ::webrtc::rtclog2::IncomingRtpPackets* Arena::CreateMaybeMessage<::webrtc::rtclog2::IncomingRtpPackets>(Arena*);
template<> ::webrtc::rtclog2::LossBasedBweUpdates* Arena::CreateMaybeMessage<::webrtc::rtclog2::LossBasedBweUpdates>(Arena*);
template<> ::webrtc::rtclog2::OutgoingRtcpPackets* Arena::CreateMaybeMessage<::webrtc::rtclog2::OutgoingRtcpPackets>(Arena*);
template<> ::webrtc::rtclog2::OutgoingRtpPackets* Arena::CreateMaybeMessage<::webrtc::rtclog2::OutgoingRtpPackets>(Arena*);
template<> ::webrtc::rtclog2::RemoteEstimates* Arena::CreateMaybeMessage<::webrtc::rtclog2::RemoteEstimates>(Arena*);
template<> ::webrtc::rtclog2::RouteChange* Arena::CreateMaybeMessage<::webrtc::rtclog2::RouteChange>(Arena*);
template<> ::webrtc::rtclog2::RtpHeaderExtensionConfig* Arena::CreateMaybeMessage<::webrtc::rtclog2::RtpHeaderExtensionConfig>(Arena*);
template<> ::webrtc::rtclog2::VideoRecvStreamConfig* Arena::CreateMaybeMessage<::webrtc::rtclog2::VideoRecvStreamConfig>(Arena*);
template<> ::webrtc::rtclog2::VideoSendStreamConfig* Arena::CreateMaybeMessage<::webrtc::rtclog2::VideoSendStreamConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace webrtc {
namespace rtclog2 {

enum DelayBasedBweUpdates_DetectorState : int {
  DelayBasedBweUpdates_DetectorState_BWE_UNKNOWN_STATE = 0,
  DelayBasedBweUpdates_DetectorState_BWE_NORMAL = 1,
  DelayBasedBweUpdates_DetectorState_BWE_UNDERUSING = 2,
  DelayBasedBweUpdates_DetectorState_BWE_OVERUSING = 3
};
bool DelayBasedBweUpdates_DetectorState_IsValid(int value);
constexpr DelayBasedBweUpdates_DetectorState DelayBasedBweUpdates_DetectorState_DetectorState_MIN = DelayBasedBweUpdates_DetectorState_BWE_UNKNOWN_STATE;
constexpr DelayBasedBweUpdates_DetectorState DelayBasedBweUpdates_DetectorState_DetectorState_MAX = DelayBasedBweUpdates_DetectorState_BWE_OVERUSING;
constexpr int DelayBasedBweUpdates_DetectorState_DetectorState_ARRAYSIZE = DelayBasedBweUpdates_DetectorState_DetectorState_MAX + 1;

const std::string& DelayBasedBweUpdates_DetectorState_Name(DelayBasedBweUpdates_DetectorState value);
template<typename T>
inline const std::string& DelayBasedBweUpdates_DetectorState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DelayBasedBweUpdates_DetectorState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DelayBasedBweUpdates_DetectorState_Name.");
  return DelayBasedBweUpdates_DetectorState_Name(static_cast<DelayBasedBweUpdates_DetectorState>(enum_t_value));
}
bool DelayBasedBweUpdates_DetectorState_Parse(
    const std::string& name, DelayBasedBweUpdates_DetectorState* value);
enum BweProbeResultFailure_FailureReason : int {
  BweProbeResultFailure_FailureReason_UNKNOWN = 0,
  BweProbeResultFailure_FailureReason_INVALID_SEND_RECEIVE_INTERVAL = 1,
  BweProbeResultFailure_FailureReason_INVALID_SEND_RECEIVE_RATIO = 2,
  BweProbeResultFailure_FailureReason_TIMEOUT = 3
};
bool BweProbeResultFailure_FailureReason_IsValid(int value);
constexpr BweProbeResultFailure_FailureReason BweProbeResultFailure_FailureReason_FailureReason_MIN = BweProbeResultFailure_FailureReason_UNKNOWN;
constexpr BweProbeResultFailure_FailureReason BweProbeResultFailure_FailureReason_FailureReason_MAX = BweProbeResultFailure_FailureReason_TIMEOUT;
constexpr int BweProbeResultFailure_FailureReason_FailureReason_ARRAYSIZE = BweProbeResultFailure_FailureReason_FailureReason_MAX + 1;

const std::string& BweProbeResultFailure_FailureReason_Name(BweProbeResultFailure_FailureReason value);
template<typename T>
inline const std::string& BweProbeResultFailure_FailureReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BweProbeResultFailure_FailureReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BweProbeResultFailure_FailureReason_Name.");
  return BweProbeResultFailure_FailureReason_Name(static_cast<BweProbeResultFailure_FailureReason>(enum_t_value));
}
bool BweProbeResultFailure_FailureReason_Parse(
    const std::string& name, BweProbeResultFailure_FailureReason* value);
enum IceCandidatePairConfig_IceCandidatePairConfigType : int {
  IceCandidatePairConfig_IceCandidatePairConfigType_UNKNOWN_CONFIG_TYPE = 0,
  IceCandidatePairConfig_IceCandidatePairConfigType_ADDED = 1,
  IceCandidatePairConfig_IceCandidatePairConfigType_UPDATED = 2,
  IceCandidatePairConfig_IceCandidatePairConfigType_DESTROYED = 3,
  IceCandidatePairConfig_IceCandidatePairConfigType_SELECTED = 4
};
bool IceCandidatePairConfig_IceCandidatePairConfigType_IsValid(int value);
constexpr IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfig_IceCandidatePairConfigType_IceCandidatePairConfigType_MIN = IceCandidatePairConfig_IceCandidatePairConfigType_UNKNOWN_CONFIG_TYPE;
constexpr IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfig_IceCandidatePairConfigType_IceCandidatePairConfigType_MAX = IceCandidatePairConfig_IceCandidatePairConfigType_SELECTED;
constexpr int IceCandidatePairConfig_IceCandidatePairConfigType_IceCandidatePairConfigType_ARRAYSIZE = IceCandidatePairConfig_IceCandidatePairConfigType_IceCandidatePairConfigType_MAX + 1;

const std::string& IceCandidatePairConfig_IceCandidatePairConfigType_Name(IceCandidatePairConfig_IceCandidatePairConfigType value);
template<typename T>
inline const std::string& IceCandidatePairConfig_IceCandidatePairConfigType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IceCandidatePairConfig_IceCandidatePairConfigType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IceCandidatePairConfig_IceCandidatePairConfigType_Name.");
  return IceCandidatePairConfig_IceCandidatePairConfigType_Name(static_cast<IceCandidatePairConfig_IceCandidatePairConfigType>(enum_t_value));
}
bool IceCandidatePairConfig_IceCandidatePairConfigType_Parse(
    const std::string& name, IceCandidatePairConfig_IceCandidatePairConfigType* value);
enum IceCandidatePairConfig_IceCandidateType : int {
  IceCandidatePairConfig_IceCandidateType_UNKNOWN_CANDIDATE_TYPE = 0,
  IceCandidatePairConfig_IceCandidateType_LOCAL = 1,
  IceCandidatePairConfig_IceCandidateType_STUN = 2,
  IceCandidatePairConfig_IceCandidateType_PRFLX = 3,
  IceCandidatePairConfig_IceCandidateType_RELAY = 4
};
bool IceCandidatePairConfig_IceCandidateType_IsValid(int value);
constexpr IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig_IceCandidateType_IceCandidateType_MIN = IceCandidatePairConfig_IceCandidateType_UNKNOWN_CANDIDATE_TYPE;
constexpr IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig_IceCandidateType_IceCandidateType_MAX = IceCandidatePairConfig_IceCandidateType_RELAY;
constexpr int IceCandidatePairConfig_IceCandidateType_IceCandidateType_ARRAYSIZE = IceCandidatePairConfig_IceCandidateType_IceCandidateType_MAX + 1;

const std::string& IceCandidatePairConfig_IceCandidateType_Name(IceCandidatePairConfig_IceCandidateType value);
template<typename T>
inline const std::string& IceCandidatePairConfig_IceCandidateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IceCandidatePairConfig_IceCandidateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IceCandidatePairConfig_IceCandidateType_Name.");
  return IceCandidatePairConfig_IceCandidateType_Name(static_cast<IceCandidatePairConfig_IceCandidateType>(enum_t_value));
}
bool IceCandidatePairConfig_IceCandidateType_Parse(
    const std::string& name, IceCandidatePairConfig_IceCandidateType* value);
enum IceCandidatePairConfig_Protocol : int {
  IceCandidatePairConfig_Protocol_UNKNOWN_PROTOCOL = 0,
  IceCandidatePairConfig_Protocol_UDP = 1,
  IceCandidatePairConfig_Protocol_TCP = 2,
  IceCandidatePairConfig_Protocol_SSLTCP = 3,
  IceCandidatePairConfig_Protocol_TLS = 4
};
bool IceCandidatePairConfig_Protocol_IsValid(int value);
constexpr IceCandidatePairConfig_Protocol IceCandidatePairConfig_Protocol_Protocol_MIN = IceCandidatePairConfig_Protocol_UNKNOWN_PROTOCOL;
constexpr IceCandidatePairConfig_Protocol IceCandidatePairConfig_Protocol_Protocol_MAX = IceCandidatePairConfig_Protocol_TLS;
constexpr int IceCandidatePairConfig_Protocol_Protocol_ARRAYSIZE = IceCandidatePairConfig_Protocol_Protocol_MAX + 1;

const std::string& IceCandidatePairConfig_Protocol_Name(IceCandidatePairConfig_Protocol value);
template<typename T>
inline const std::string& IceCandidatePairConfig_Protocol_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IceCandidatePairConfig_Protocol>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IceCandidatePairConfig_Protocol_Name.");
  return IceCandidatePairConfig_Protocol_Name(static_cast<IceCandidatePairConfig_Protocol>(enum_t_value));
}
bool IceCandidatePairConfig_Protocol_Parse(
    const std::string& name, IceCandidatePairConfig_Protocol* value);
enum IceCandidatePairConfig_AddressFamily : int {
  IceCandidatePairConfig_AddressFamily_UNKNOWN_ADDRESS_FAMILY = 0,
  IceCandidatePairConfig_AddressFamily_IPV4 = 1,
  IceCandidatePairConfig_AddressFamily_IPV6 = 2
};
bool IceCandidatePairConfig_AddressFamily_IsValid(int value);
constexpr IceCandidatePairConfig_AddressFamily IceCandidatePairConfig_AddressFamily_AddressFamily_MIN = IceCandidatePairConfig_AddressFamily_UNKNOWN_ADDRESS_FAMILY;
constexpr IceCandidatePairConfig_AddressFamily IceCandidatePairConfig_AddressFamily_AddressFamily_MAX = IceCandidatePairConfig_AddressFamily_IPV6;
constexpr int IceCandidatePairConfig_AddressFamily_AddressFamily_ARRAYSIZE = IceCandidatePairConfig_AddressFamily_AddressFamily_MAX + 1;

const std::string& IceCandidatePairConfig_AddressFamily_Name(IceCandidatePairConfig_AddressFamily value);
template<typename T>
inline const std::string& IceCandidatePairConfig_AddressFamily_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IceCandidatePairConfig_AddressFamily>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IceCandidatePairConfig_AddressFamily_Name.");
  return IceCandidatePairConfig_AddressFamily_Name(static_cast<IceCandidatePairConfig_AddressFamily>(enum_t_value));
}
bool IceCandidatePairConfig_AddressFamily_Parse(
    const std::string& name, IceCandidatePairConfig_AddressFamily* value);
enum IceCandidatePairConfig_NetworkType : int {
  IceCandidatePairConfig_NetworkType_UNKNOWN_NETWORK_TYPE = 0,
  IceCandidatePairConfig_NetworkType_ETHERNET = 1,
  IceCandidatePairConfig_NetworkType_WIFI = 2,
  IceCandidatePairConfig_NetworkType_CELLULAR = 3,
  IceCandidatePairConfig_NetworkType_VPN = 4,
  IceCandidatePairConfig_NetworkType_LOOPBACK = 5
};
bool IceCandidatePairConfig_NetworkType_IsValid(int value);
constexpr IceCandidatePairConfig_NetworkType IceCandidatePairConfig_NetworkType_NetworkType_MIN = IceCandidatePairConfig_NetworkType_UNKNOWN_NETWORK_TYPE;
constexpr IceCandidatePairConfig_NetworkType IceCandidatePairConfig_NetworkType_NetworkType_MAX = IceCandidatePairConfig_NetworkType_LOOPBACK;
constexpr int IceCandidatePairConfig_NetworkType_NetworkType_ARRAYSIZE = IceCandidatePairConfig_NetworkType_NetworkType_MAX + 1;

const std::string& IceCandidatePairConfig_NetworkType_Name(IceCandidatePairConfig_NetworkType value);
template<typename T>
inline const std::string& IceCandidatePairConfig_NetworkType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IceCandidatePairConfig_NetworkType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IceCandidatePairConfig_NetworkType_Name.");
  return IceCandidatePairConfig_NetworkType_Name(static_cast<IceCandidatePairConfig_NetworkType>(enum_t_value));
}
bool IceCandidatePairConfig_NetworkType_Parse(
    const std::string& name, IceCandidatePairConfig_NetworkType* value);
enum IceCandidatePairEvent_IceCandidatePairEventType : int {
  IceCandidatePairEvent_IceCandidatePairEventType_UNKNOWN_CHECK_TYPE = 0,
  IceCandidatePairEvent_IceCandidatePairEventType_CHECK_SENT = 1,
  IceCandidatePairEvent_IceCandidatePairEventType_CHECK_RECEIVED = 2,
  IceCandidatePairEvent_IceCandidatePairEventType_CHECK_RESPONSE_SENT = 3,
  IceCandidatePairEvent_IceCandidatePairEventType_CHECK_RESPONSE_RECEIVED = 4
};
bool IceCandidatePairEvent_IceCandidatePairEventType_IsValid(int value);
constexpr IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEvent_IceCandidatePairEventType_IceCandidatePairEventType_MIN = IceCandidatePairEvent_IceCandidatePairEventType_UNKNOWN_CHECK_TYPE;
constexpr IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEvent_IceCandidatePairEventType_IceCandidatePairEventType_MAX = IceCandidatePairEvent_IceCandidatePairEventType_CHECK_RESPONSE_RECEIVED;
constexpr int IceCandidatePairEvent_IceCandidatePairEventType_IceCandidatePairEventType_ARRAYSIZE = IceCandidatePairEvent_IceCandidatePairEventType_IceCandidatePairEventType_MAX + 1;

const std::string& IceCandidatePairEvent_IceCandidatePairEventType_Name(IceCandidatePairEvent_IceCandidatePairEventType value);
template<typename T>
inline const std::string& IceCandidatePairEvent_IceCandidatePairEventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IceCandidatePairEvent_IceCandidatePairEventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IceCandidatePairEvent_IceCandidatePairEventType_Name.");
  return IceCandidatePairEvent_IceCandidatePairEventType_Name(static_cast<IceCandidatePairEvent_IceCandidatePairEventType>(enum_t_value));
}
bool IceCandidatePairEvent_IceCandidatePairEventType_Parse(
    const std::string& name, IceCandidatePairEvent_IceCandidatePairEventType* value);
enum DtlsTransportStateEvent_DtlsTransportState : int {
  DtlsTransportStateEvent_DtlsTransportState_UNKNOWN_DTLS_TRANSPORT_STATE = 0,
  DtlsTransportStateEvent_DtlsTransportState_DTLS_TRANSPORT_NEW = 1,
  DtlsTransportStateEvent_DtlsTransportState_DTLS_TRANSPORT_CONNECTING = 2,
  DtlsTransportStateEvent_DtlsTransportState_DTLS_TRANSPORT_CONNECTED = 3,
  DtlsTransportStateEvent_DtlsTransportState_DTLS_TRANSPORT_CLOSED = 4,
  DtlsTransportStateEvent_DtlsTransportState_DTLS_TRANSPORT_FAILED = 5
};
bool DtlsTransportStateEvent_DtlsTransportState_IsValid(int value);
constexpr DtlsTransportStateEvent_DtlsTransportState DtlsTransportStateEvent_DtlsTransportState_DtlsTransportState_MIN = DtlsTransportStateEvent_DtlsTransportState_UNKNOWN_DTLS_TRANSPORT_STATE;
constexpr DtlsTransportStateEvent_DtlsTransportState DtlsTransportStateEvent_DtlsTransportState_DtlsTransportState_MAX = DtlsTransportStateEvent_DtlsTransportState_DTLS_TRANSPORT_FAILED;
constexpr int DtlsTransportStateEvent_DtlsTransportState_DtlsTransportState_ARRAYSIZE = DtlsTransportStateEvent_DtlsTransportState_DtlsTransportState_MAX + 1;

const std::string& DtlsTransportStateEvent_DtlsTransportState_Name(DtlsTransportStateEvent_DtlsTransportState value);
template<typename T>
inline const std::string& DtlsTransportStateEvent_DtlsTransportState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DtlsTransportStateEvent_DtlsTransportState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DtlsTransportStateEvent_DtlsTransportState_Name.");
  return DtlsTransportStateEvent_DtlsTransportState_Name(static_cast<DtlsTransportStateEvent_DtlsTransportState>(enum_t_value));
}
bool DtlsTransportStateEvent_DtlsTransportState_Parse(
    const std::string& name, DtlsTransportStateEvent_DtlsTransportState* value);
// ===================================================================

class EventStream :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.EventStream) */ {
 public:
  EventStream();
  virtual ~EventStream();

  EventStream(const EventStream& from);
  EventStream(EventStream&& from) noexcept
    : EventStream() {
    *this = ::std::move(from);
  }

  inline EventStream& operator=(const EventStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventStream& operator=(EventStream&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const EventStream& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventStream* internal_default_instance() {
    return reinterpret_cast<const EventStream*>(
               &_EventStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EventStream& a, EventStream& b) {
    a.Swap(&b);
  }
  inline void Swap(EventStream* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventStream* New() const final {
    return CreateMaybeMessage<EventStream>(nullptr);
  }

  EventStream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventStream>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const EventStream& from);
  void MergeFrom(const EventStream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EventStream* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webrtc.rtclog2.EventStream";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamFieldNumber = 1,
    kIncomingRtpPacketsFieldNumber = 2,
    kOutgoingRtpPacketsFieldNumber = 3,
    kIncomingRtcpPacketsFieldNumber = 4,
    kOutgoingRtcpPacketsFieldNumber = 5,
    kAudioPlayoutEventsFieldNumber = 6,
    kBeginLogEventsFieldNumber = 16,
    kEndLogEventsFieldNumber = 17,
    kLossBasedBweUpdatesFieldNumber = 18,
    kDelayBasedBweUpdatesFieldNumber = 19,
    kAudioNetworkAdaptationsFieldNumber = 20,
    kProbeClustersFieldNumber = 21,
    kProbeSuccessFieldNumber = 22,
    kProbeFailureFieldNumber = 23,
    kAlrStatesFieldNumber = 24,
    kIceCandidateConfigsFieldNumber = 25,
    kIceCandidateEventsFieldNumber = 26,
    kDtlsTransportStateEventsFieldNumber = 27,
    kDtlsWritableStatesFieldNumber = 28,
    kGenericPacketsSentFieldNumber = 29,
    kGenericPacketsReceivedFieldNumber = 30,
    kGenericAcksReceivedFieldNumber = 31,
    kRouteChangesFieldNumber = 32,
    kRemoteEstimatesFieldNumber = 33,
    kAudioRecvStreamConfigsFieldNumber = 101,
    kAudioSendStreamConfigsFieldNumber = 102,
    kVideoRecvStreamConfigsFieldNumber = 103,
    kVideoSendStreamConfigsFieldNumber = 104,
  };
  // repeated .webrtc.rtclog2.Event stream = 1 [deprecated = true];
  PROTOBUF_DEPRECATED int stream_size() const;
  PROTOBUF_DEPRECATED void clear_stream();
  PROTOBUF_DEPRECATED ::webrtc::rtclog2::Event* mutable_stream(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::Event >*
      mutable_stream();
  PROTOBUF_DEPRECATED const ::webrtc::rtclog2::Event& stream(int index) const;
  PROTOBUF_DEPRECATED ::webrtc::rtclog2::Event* add_stream();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::Event >&
      stream() const;

  // repeated .webrtc.rtclog2.IncomingRtpPackets incoming_rtp_packets = 2;
  int incoming_rtp_packets_size() const;
  void clear_incoming_rtp_packets();
  ::webrtc::rtclog2::IncomingRtpPackets* mutable_incoming_rtp_packets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::IncomingRtpPackets >*
      mutable_incoming_rtp_packets();
  const ::webrtc::rtclog2::IncomingRtpPackets& incoming_rtp_packets(int index) const;
  ::webrtc::rtclog2::IncomingRtpPackets* add_incoming_rtp_packets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::IncomingRtpPackets >&
      incoming_rtp_packets() const;

  // repeated .webrtc.rtclog2.OutgoingRtpPackets outgoing_rtp_packets = 3;
  int outgoing_rtp_packets_size() const;
  void clear_outgoing_rtp_packets();
  ::webrtc::rtclog2::OutgoingRtpPackets* mutable_outgoing_rtp_packets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::OutgoingRtpPackets >*
      mutable_outgoing_rtp_packets();
  const ::webrtc::rtclog2::OutgoingRtpPackets& outgoing_rtp_packets(int index) const;
  ::webrtc::rtclog2::OutgoingRtpPackets* add_outgoing_rtp_packets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::OutgoingRtpPackets >&
      outgoing_rtp_packets() const;

  // repeated .webrtc.rtclog2.IncomingRtcpPackets incoming_rtcp_packets = 4;
  int incoming_rtcp_packets_size() const;
  void clear_incoming_rtcp_packets();
  ::webrtc::rtclog2::IncomingRtcpPackets* mutable_incoming_rtcp_packets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::IncomingRtcpPackets >*
      mutable_incoming_rtcp_packets();
  const ::webrtc::rtclog2::IncomingRtcpPackets& incoming_rtcp_packets(int index) const;
  ::webrtc::rtclog2::IncomingRtcpPackets* add_incoming_rtcp_packets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::IncomingRtcpPackets >&
      incoming_rtcp_packets() const;

  // repeated .webrtc.rtclog2.OutgoingRtcpPackets outgoing_rtcp_packets = 5;
  int outgoing_rtcp_packets_size() const;
  void clear_outgoing_rtcp_packets();
  ::webrtc::rtclog2::OutgoingRtcpPackets* mutable_outgoing_rtcp_packets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::OutgoingRtcpPackets >*
      mutable_outgoing_rtcp_packets();
  const ::webrtc::rtclog2::OutgoingRtcpPackets& outgoing_rtcp_packets(int index) const;
  ::webrtc::rtclog2::OutgoingRtcpPackets* add_outgoing_rtcp_packets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::OutgoingRtcpPackets >&
      outgoing_rtcp_packets() const;

  // repeated .webrtc.rtclog2.AudioPlayoutEvents audio_playout_events = 6;
  int audio_playout_events_size() const;
  void clear_audio_playout_events();
  ::webrtc::rtclog2::AudioPlayoutEvents* mutable_audio_playout_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::AudioPlayoutEvents >*
      mutable_audio_playout_events();
  const ::webrtc::rtclog2::AudioPlayoutEvents& audio_playout_events(int index) const;
  ::webrtc::rtclog2::AudioPlayoutEvents* add_audio_playout_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::AudioPlayoutEvents >&
      audio_playout_events() const;

  // repeated .webrtc.rtclog2.BeginLogEvent begin_log_events = 16;
  int begin_log_events_size() const;
  void clear_begin_log_events();
  ::webrtc::rtclog2::BeginLogEvent* mutable_begin_log_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::BeginLogEvent >*
      mutable_begin_log_events();
  const ::webrtc::rtclog2::BeginLogEvent& begin_log_events(int index) const;
  ::webrtc::rtclog2::BeginLogEvent* add_begin_log_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::BeginLogEvent >&
      begin_log_events() const;

  // repeated .webrtc.rtclog2.EndLogEvent end_log_events = 17;
  int end_log_events_size() const;
  void clear_end_log_events();
  ::webrtc::rtclog2::EndLogEvent* mutable_end_log_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::EndLogEvent >*
      mutable_end_log_events();
  const ::webrtc::rtclog2::EndLogEvent& end_log_events(int index) const;
  ::webrtc::rtclog2::EndLogEvent* add_end_log_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::EndLogEvent >&
      end_log_events() const;

  // repeated .webrtc.rtclog2.LossBasedBweUpdates loss_based_bwe_updates = 18;
  int loss_based_bwe_updates_size() const;
  void clear_loss_based_bwe_updates();
  ::webrtc::rtclog2::LossBasedBweUpdates* mutable_loss_based_bwe_updates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::LossBasedBweUpdates >*
      mutable_loss_based_bwe_updates();
  const ::webrtc::rtclog2::LossBasedBweUpdates& loss_based_bwe_updates(int index) const;
  ::webrtc::rtclog2::LossBasedBweUpdates* add_loss_based_bwe_updates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::LossBasedBweUpdates >&
      loss_based_bwe_updates() const;

  // repeated .webrtc.rtclog2.DelayBasedBweUpdates delay_based_bwe_updates = 19;
  int delay_based_bwe_updates_size() const;
  void clear_delay_based_bwe_updates();
  ::webrtc::rtclog2::DelayBasedBweUpdates* mutable_delay_based_bwe_updates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::DelayBasedBweUpdates >*
      mutable_delay_based_bwe_updates();
  const ::webrtc::rtclog2::DelayBasedBweUpdates& delay_based_bwe_updates(int index) const;
  ::webrtc::rtclog2::DelayBasedBweUpdates* add_delay_based_bwe_updates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::DelayBasedBweUpdates >&
      delay_based_bwe_updates() const;

  // repeated .webrtc.rtclog2.AudioNetworkAdaptations audio_network_adaptations = 20;
  int audio_network_adaptations_size() const;
  void clear_audio_network_adaptations();
  ::webrtc::rtclog2::AudioNetworkAdaptations* mutable_audio_network_adaptations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::AudioNetworkAdaptations >*
      mutable_audio_network_adaptations();
  const ::webrtc::rtclog2::AudioNetworkAdaptations& audio_network_adaptations(int index) const;
  ::webrtc::rtclog2::AudioNetworkAdaptations* add_audio_network_adaptations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::AudioNetworkAdaptations >&
      audio_network_adaptations() const;

  // repeated .webrtc.rtclog2.BweProbeCluster probe_clusters = 21;
  int probe_clusters_size() const;
  void clear_probe_clusters();
  ::webrtc::rtclog2::BweProbeCluster* mutable_probe_clusters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::BweProbeCluster >*
      mutable_probe_clusters();
  const ::webrtc::rtclog2::BweProbeCluster& probe_clusters(int index) const;
  ::webrtc::rtclog2::BweProbeCluster* add_probe_clusters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::BweProbeCluster >&
      probe_clusters() const;

  // repeated .webrtc.rtclog2.BweProbeResultSuccess probe_success = 22;
  int probe_success_size() const;
  void clear_probe_success();
  ::webrtc::rtclog2::BweProbeResultSuccess* mutable_probe_success(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::BweProbeResultSuccess >*
      mutable_probe_success();
  const ::webrtc::rtclog2::BweProbeResultSuccess& probe_success(int index) const;
  ::webrtc::rtclog2::BweProbeResultSuccess* add_probe_success();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::BweProbeResultSuccess >&
      probe_success() const;

  // repeated .webrtc.rtclog2.BweProbeResultFailure probe_failure = 23;
  int probe_failure_size() const;
  void clear_probe_failure();
  ::webrtc::rtclog2::BweProbeResultFailure* mutable_probe_failure(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::BweProbeResultFailure >*
      mutable_probe_failure();
  const ::webrtc::rtclog2::BweProbeResultFailure& probe_failure(int index) const;
  ::webrtc::rtclog2::BweProbeResultFailure* add_probe_failure();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::BweProbeResultFailure >&
      probe_failure() const;

  // repeated .webrtc.rtclog2.AlrState alr_states = 24;
  int alr_states_size() const;
  void clear_alr_states();
  ::webrtc::rtclog2::AlrState* mutable_alr_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::AlrState >*
      mutable_alr_states();
  const ::webrtc::rtclog2::AlrState& alr_states(int index) const;
  ::webrtc::rtclog2::AlrState* add_alr_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::AlrState >&
      alr_states() const;

  // repeated .webrtc.rtclog2.IceCandidatePairConfig ice_candidate_configs = 25;
  int ice_candidate_configs_size() const;
  void clear_ice_candidate_configs();
  ::webrtc::rtclog2::IceCandidatePairConfig* mutable_ice_candidate_configs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::IceCandidatePairConfig >*
      mutable_ice_candidate_configs();
  const ::webrtc::rtclog2::IceCandidatePairConfig& ice_candidate_configs(int index) const;
  ::webrtc::rtclog2::IceCandidatePairConfig* add_ice_candidate_configs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::IceCandidatePairConfig >&
      ice_candidate_configs() const;

  // repeated .webrtc.rtclog2.IceCandidatePairEvent ice_candidate_events = 26;
  int ice_candidate_events_size() const;
  void clear_ice_candidate_events();
  ::webrtc::rtclog2::IceCandidatePairEvent* mutable_ice_candidate_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::IceCandidatePairEvent >*
      mutable_ice_candidate_events();
  const ::webrtc::rtclog2::IceCandidatePairEvent& ice_candidate_events(int index) const;
  ::webrtc::rtclog2::IceCandidatePairEvent* add_ice_candidate_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::IceCandidatePairEvent >&
      ice_candidate_events() const;

  // repeated .webrtc.rtclog2.DtlsTransportStateEvent dtls_transport_state_events = 27;
  int dtls_transport_state_events_size() const;
  void clear_dtls_transport_state_events();
  ::webrtc::rtclog2::DtlsTransportStateEvent* mutable_dtls_transport_state_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::DtlsTransportStateEvent >*
      mutable_dtls_transport_state_events();
  const ::webrtc::rtclog2::DtlsTransportStateEvent& dtls_transport_state_events(int index) const;
  ::webrtc::rtclog2::DtlsTransportStateEvent* add_dtls_transport_state_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::DtlsTransportStateEvent >&
      dtls_transport_state_events() const;

  // repeated .webrtc.rtclog2.DtlsWritableState dtls_writable_states = 28;
  int dtls_writable_states_size() const;
  void clear_dtls_writable_states();
  ::webrtc::rtclog2::DtlsWritableState* mutable_dtls_writable_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::DtlsWritableState >*
      mutable_dtls_writable_states();
  const ::webrtc::rtclog2::DtlsWritableState& dtls_writable_states(int index) const;
  ::webrtc::rtclog2::DtlsWritableState* add_dtls_writable_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::DtlsWritableState >&
      dtls_writable_states() const;

  // repeated .webrtc.rtclog2.GenericPacketSent generic_packets_sent = 29;
  int generic_packets_sent_size() const;
  void clear_generic_packets_sent();
  ::webrtc::rtclog2::GenericPacketSent* mutable_generic_packets_sent(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::GenericPacketSent >*
      mutable_generic_packets_sent();
  const ::webrtc::rtclog2::GenericPacketSent& generic_packets_sent(int index) const;
  ::webrtc::rtclog2::GenericPacketSent* add_generic_packets_sent();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::GenericPacketSent >&
      generic_packets_sent() const;

  // repeated .webrtc.rtclog2.GenericPacketReceived generic_packets_received = 30;
  int generic_packets_received_size() const;
  void clear_generic_packets_received();
  ::webrtc::rtclog2::GenericPacketReceived* mutable_generic_packets_received(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::GenericPacketReceived >*
      mutable_generic_packets_received();
  const ::webrtc::rtclog2::GenericPacketReceived& generic_packets_received(int index) const;
  ::webrtc::rtclog2::GenericPacketReceived* add_generic_packets_received();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::GenericPacketReceived >&
      generic_packets_received() const;

  // repeated .webrtc.rtclog2.GenericAckReceived generic_acks_received = 31;
  int generic_acks_received_size() const;
  void clear_generic_acks_received();
  ::webrtc::rtclog2::GenericAckReceived* mutable_generic_acks_received(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::GenericAckReceived >*
      mutable_generic_acks_received();
  const ::webrtc::rtclog2::GenericAckReceived& generic_acks_received(int index) const;
  ::webrtc::rtclog2::GenericAckReceived* add_generic_acks_received();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::GenericAckReceived >&
      generic_acks_received() const;

  // repeated .webrtc.rtclog2.RouteChange route_changes = 32;
  int route_changes_size() const;
  void clear_route_changes();
  ::webrtc::rtclog2::RouteChange* mutable_route_changes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::RouteChange >*
      mutable_route_changes();
  const ::webrtc::rtclog2::RouteChange& route_changes(int index) const;
  ::webrtc::rtclog2::RouteChange* add_route_changes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::RouteChange >&
      route_changes() const;

  // repeated .webrtc.rtclog2.RemoteEstimates remote_estimates = 33;
  int remote_estimates_size() const;
  void clear_remote_estimates();
  ::webrtc::rtclog2::RemoteEstimates* mutable_remote_estimates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::RemoteEstimates >*
      mutable_remote_estimates();
  const ::webrtc::rtclog2::RemoteEstimates& remote_estimates(int index) const;
  ::webrtc::rtclog2::RemoteEstimates* add_remote_estimates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::RemoteEstimates >&
      remote_estimates() const;

  // repeated .webrtc.rtclog2.AudioRecvStreamConfig audio_recv_stream_configs = 101;
  int audio_recv_stream_configs_size() const;
  void clear_audio_recv_stream_configs();
  ::webrtc::rtclog2::AudioRecvStreamConfig* mutable_audio_recv_stream_configs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::AudioRecvStreamConfig >*
      mutable_audio_recv_stream_configs();
  const ::webrtc::rtclog2::AudioRecvStreamConfig& audio_recv_stream_configs(int index) const;
  ::webrtc::rtclog2::AudioRecvStreamConfig* add_audio_recv_stream_configs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::AudioRecvStreamConfig >&
      audio_recv_stream_configs() const;

  // repeated .webrtc.rtclog2.AudioSendStreamConfig audio_send_stream_configs = 102;
  int audio_send_stream_configs_size() const;
  void clear_audio_send_stream_configs();
  ::webrtc::rtclog2::AudioSendStreamConfig* mutable_audio_send_stream_configs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::AudioSendStreamConfig >*
      mutable_audio_send_stream_configs();
  const ::webrtc::rtclog2::AudioSendStreamConfig& audio_send_stream_configs(int index) const;
  ::webrtc::rtclog2::AudioSendStreamConfig* add_audio_send_stream_configs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::AudioSendStreamConfig >&
      audio_send_stream_configs() const;

  // repeated .webrtc.rtclog2.VideoRecvStreamConfig video_recv_stream_configs = 103;
  int video_recv_stream_configs_size() const;
  void clear_video_recv_stream_configs();
  ::webrtc::rtclog2::VideoRecvStreamConfig* mutable_video_recv_stream_configs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::VideoRecvStreamConfig >*
      mutable_video_recv_stream_configs();
  const ::webrtc::rtclog2::VideoRecvStreamConfig& video_recv_stream_configs(int index) const;
  ::webrtc::rtclog2::VideoRecvStreamConfig* add_video_recv_stream_configs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::VideoRecvStreamConfig >&
      video_recv_stream_configs() const;

  // repeated .webrtc.rtclog2.VideoSendStreamConfig video_send_stream_configs = 104;
  int video_send_stream_configs_size() const;
  void clear_video_send_stream_configs();
  ::webrtc::rtclog2::VideoSendStreamConfig* mutable_video_send_stream_configs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::VideoSendStreamConfig >*
      mutable_video_send_stream_configs();
  const ::webrtc::rtclog2::VideoSendStreamConfig& video_send_stream_configs(int index) const;
  ::webrtc::rtclog2::VideoSendStreamConfig* add_video_send_stream_configs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::VideoSendStreamConfig >&
      video_send_stream_configs() const;

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.EventStream)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::Event > stream_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::IncomingRtpPackets > incoming_rtp_packets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::OutgoingRtpPackets > outgoing_rtp_packets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::IncomingRtcpPackets > incoming_rtcp_packets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::OutgoingRtcpPackets > outgoing_rtcp_packets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::AudioPlayoutEvents > audio_playout_events_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::BeginLogEvent > begin_log_events_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::EndLogEvent > end_log_events_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::LossBasedBweUpdates > loss_based_bwe_updates_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::DelayBasedBweUpdates > delay_based_bwe_updates_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::AudioNetworkAdaptations > audio_network_adaptations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::BweProbeCluster > probe_clusters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::BweProbeResultSuccess > probe_success_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::BweProbeResultFailure > probe_failure_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::AlrState > alr_states_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::IceCandidatePairConfig > ice_candidate_configs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::IceCandidatePairEvent > ice_candidate_events_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::DtlsTransportStateEvent > dtls_transport_state_events_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::DtlsWritableState > dtls_writable_states_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::GenericPacketSent > generic_packets_sent_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::GenericPacketReceived > generic_packets_received_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::GenericAckReceived > generic_acks_received_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::RouteChange > route_changes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::RemoteEstimates > remote_estimates_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::AudioRecvStreamConfig > audio_recv_stream_configs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::AudioSendStreamConfig > audio_send_stream_configs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::VideoRecvStreamConfig > video_recv_stream_configs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::VideoSendStreamConfig > video_send_stream_configs_;
  friend struct ::TableStruct_rtc_5fevent_5flog2_2eproto;
};
// -------------------------------------------------------------------

class Event :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Event& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Event* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(nullptr);
  }

  Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webrtc.rtclog2.Event";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.Event)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rtc_5fevent_5flog2_2eproto;
};
// -------------------------------------------------------------------

class GenericPacketReceived :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.GenericPacketReceived) */ {
 public:
  GenericPacketReceived();
  virtual ~GenericPacketReceived();

  GenericPacketReceived(const GenericPacketReceived& from);
  GenericPacketReceived(GenericPacketReceived&& from) noexcept
    : GenericPacketReceived() {
    *this = ::std::move(from);
  }

  inline GenericPacketReceived& operator=(const GenericPacketReceived& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenericPacketReceived& operator=(GenericPacketReceived&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GenericPacketReceived& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenericPacketReceived* internal_default_instance() {
    return reinterpret_cast<const GenericPacketReceived*>(
               &_GenericPacketReceived_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GenericPacketReceived& a, GenericPacketReceived& b) {
    a.Swap(&b);
  }
  inline void Swap(GenericPacketReceived* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenericPacketReceived* New() const final {
    return CreateMaybeMessage<GenericPacketReceived>(nullptr);
  }

  GenericPacketReceived* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenericPacketReceived>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GenericPacketReceived& from);
  void MergeFrom(const GenericPacketReceived& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GenericPacketReceived* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webrtc.rtclog2.GenericPacketReceived";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampMsDeltasFieldNumber = 17,
    kPacketNumberDeltasFieldNumber = 18,
    kPacketLengthDeltasFieldNumber = 19,
    kTimestampMsFieldNumber = 1,
    kPacketNumberFieldNumber = 2,
    kPacketLengthFieldNumber = 3,
    kNumberOfDeltasFieldNumber = 16,
  };
  // optional bytes timestamp_ms_deltas = 17;
  bool has_timestamp_ms_deltas() const;
  void clear_timestamp_ms_deltas();
  const std::string& timestamp_ms_deltas() const;
  void set_timestamp_ms_deltas(const std::string& value);
  void set_timestamp_ms_deltas(std::string&& value);
  void set_timestamp_ms_deltas(const char* value);
  void set_timestamp_ms_deltas(const void* value, size_t size);
  std::string* mutable_timestamp_ms_deltas();
  std::string* release_timestamp_ms_deltas();
  void set_allocated_timestamp_ms_deltas(std::string* timestamp_ms_deltas);

  // optional bytes packet_number_deltas = 18;
  bool has_packet_number_deltas() const;
  void clear_packet_number_deltas();
  const std::string& packet_number_deltas() const;
  void set_packet_number_deltas(const std::string& value);
  void set_packet_number_deltas(std::string&& value);
  void set_packet_number_deltas(const char* value);
  void set_packet_number_deltas(const void* value, size_t size);
  std::string* mutable_packet_number_deltas();
  std::string* release_packet_number_deltas();
  void set_allocated_packet_number_deltas(std::string* packet_number_deltas);

  // optional bytes packet_length_deltas = 19;
  bool has_packet_length_deltas() const;
  void clear_packet_length_deltas();
  const std::string& packet_length_deltas() const;
  void set_packet_length_deltas(const std::string& value);
  void set_packet_length_deltas(std::string&& value);
  void set_packet_length_deltas(const char* value);
  void set_packet_length_deltas(const void* value, size_t size);
  std::string* mutable_packet_length_deltas();
  std::string* release_packet_length_deltas();
  void set_allocated_packet_length_deltas(std::string* packet_length_deltas);

  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms() const;
  void set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 packet_number = 2;
  bool has_packet_number() const;
  void clear_packet_number();
  ::PROTOBUF_NAMESPACE_ID::int64 packet_number() const;
  void set_packet_number(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 packet_length = 3;
  bool has_packet_length() const;
  void clear_packet_length();
  ::PROTOBUF_NAMESPACE_ID::int32 packet_length() const;
  void set_packet_length(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 number_of_deltas = 16;
  bool has_number_of_deltas() const;
  void clear_number_of_deltas();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_deltas() const;
  void set_number_of_deltas(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.GenericPacketReceived)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_ms_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr packet_number_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr packet_length_deltas_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 packet_number_;
  ::PROTOBUF_NAMESPACE_ID::int32 packet_length_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_deltas_;
  friend struct ::TableStruct_rtc_5fevent_5flog2_2eproto;
};
// -------------------------------------------------------------------

class GenericPacketSent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.GenericPacketSent) */ {
 public:
  GenericPacketSent();
  virtual ~GenericPacketSent();

  GenericPacketSent(const GenericPacketSent& from);
  GenericPacketSent(GenericPacketSent&& from) noexcept
    : GenericPacketSent() {
    *this = ::std::move(from);
  }

  inline GenericPacketSent& operator=(const GenericPacketSent& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenericPacketSent& operator=(GenericPacketSent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GenericPacketSent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenericPacketSent* internal_default_instance() {
    return reinterpret_cast<const GenericPacketSent*>(
               &_GenericPacketSent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GenericPacketSent& a, GenericPacketSent& b) {
    a.Swap(&b);
  }
  inline void Swap(GenericPacketSent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenericPacketSent* New() const final {
    return CreateMaybeMessage<GenericPacketSent>(nullptr);
  }

  GenericPacketSent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenericPacketSent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GenericPacketSent& from);
  void MergeFrom(const GenericPacketSent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GenericPacketSent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webrtc.rtclog2.GenericPacketSent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampMsDeltasFieldNumber = 17,
    kPacketNumberDeltasFieldNumber = 18,
    kOverheadLengthDeltasFieldNumber = 19,
    kPayloadLengthDeltasFieldNumber = 20,
    kPaddingLengthDeltasFieldNumber = 21,
    kTimestampMsFieldNumber = 1,
    kPacketNumberFieldNumber = 2,
    kOverheadLengthFieldNumber = 3,
    kPayloadLengthFieldNumber = 4,
    kPaddingLengthFieldNumber = 5,
    kNumberOfDeltasFieldNumber = 16,
  };
  // optional bytes timestamp_ms_deltas = 17;
  bool has_timestamp_ms_deltas() const;
  void clear_timestamp_ms_deltas();
  const std::string& timestamp_ms_deltas() const;
  void set_timestamp_ms_deltas(const std::string& value);
  void set_timestamp_ms_deltas(std::string&& value);
  void set_timestamp_ms_deltas(const char* value);
  void set_timestamp_ms_deltas(const void* value, size_t size);
  std::string* mutable_timestamp_ms_deltas();
  std::string* release_timestamp_ms_deltas();
  void set_allocated_timestamp_ms_deltas(std::string* timestamp_ms_deltas);

  // optional bytes packet_number_deltas = 18;
  bool has_packet_number_deltas() const;
  void clear_packet_number_deltas();
  const std::string& packet_number_deltas() const;
  void set_packet_number_deltas(const std::string& value);
  void set_packet_number_deltas(std::string&& value);
  void set_packet_number_deltas(const char* value);
  void set_packet_number_deltas(const void* value, size_t size);
  std::string* mutable_packet_number_deltas();
  std::string* release_packet_number_deltas();
  void set_allocated_packet_number_deltas(std::string* packet_number_deltas);

  // optional bytes overhead_length_deltas = 19;
  bool has_overhead_length_deltas() const;
  void clear_overhead_length_deltas();
  const std::string& overhead_length_deltas() const;
  void set_overhead_length_deltas(const std::string& value);
  void set_overhead_length_deltas(std::string&& value);
  void set_overhead_length_deltas(const char* value);
  void set_overhead_length_deltas(const void* value, size_t size);
  std::string* mutable_overhead_length_deltas();
  std::string* release_overhead_length_deltas();
  void set_allocated_overhead_length_deltas(std::string* overhead_length_deltas);

  // optional bytes payload_length_deltas = 20;
  bool has_payload_length_deltas() const;
  void clear_payload_length_deltas();
  const std::string& payload_length_deltas() const;
  void set_payload_length_deltas(const std::string& value);
  void set_payload_length_deltas(std::string&& value);
  void set_payload_length_deltas(const char* value);
  void set_payload_length_deltas(const void* value, size_t size);
  std::string* mutable_payload_length_deltas();
  std::string* release_payload_length_deltas();
  void set_allocated_payload_length_deltas(std::string* payload_length_deltas);

  // optional bytes padding_length_deltas = 21;
  bool has_padding_length_deltas() const;
  void clear_padding_length_deltas();
  const std::string& padding_length_deltas() const;
  void set_padding_length_deltas(const std::string& value);
  void set_padding_length_deltas(std::string&& value);
  void set_padding_length_deltas(const char* value);
  void set_padding_length_deltas(const void* value, size_t size);
  std::string* mutable_padding_length_deltas();
  std::string* release_padding_length_deltas();
  void set_allocated_padding_length_deltas(std::string* padding_length_deltas);

  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms() const;
  void set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 packet_number = 2;
  bool has_packet_number() const;
  void clear_packet_number();
  ::PROTOBUF_NAMESPACE_ID::int64 packet_number() const;
  void set_packet_number(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 overhead_length = 3;
  bool has_overhead_length() const;
  void clear_overhead_length();
  ::PROTOBUF_NAMESPACE_ID::int32 overhead_length() const;
  void set_overhead_length(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 payload_length = 4;
  bool has_payload_length() const;
  void clear_payload_length();
  ::PROTOBUF_NAMESPACE_ID::int32 payload_length() const;
  void set_payload_length(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 padding_length = 5;
  bool has_padding_length() const;
  void clear_padding_length();
  ::PROTOBUF_NAMESPACE_ID::int32 padding_length() const;
  void set_padding_length(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 number_of_deltas = 16;
  bool has_number_of_deltas() const;
  void clear_number_of_deltas();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_deltas() const;
  void set_number_of_deltas(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.GenericPacketSent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_ms_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr packet_number_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr overhead_length_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_length_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr padding_length_deltas_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 packet_number_;
  ::PROTOBUF_NAMESPACE_ID::int32 overhead_length_;
  ::PROTOBUF_NAMESPACE_ID::int32 payload_length_;
  ::PROTOBUF_NAMESPACE_ID::int32 padding_length_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_deltas_;
  friend struct ::TableStruct_rtc_5fevent_5flog2_2eproto;
};
// -------------------------------------------------------------------

class GenericAckReceived :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.GenericAckReceived) */ {
 public:
  GenericAckReceived();
  virtual ~GenericAckReceived();

  GenericAckReceived(const GenericAckReceived& from);
  GenericAckReceived(GenericAckReceived&& from) noexcept
    : GenericAckReceived() {
    *this = ::std::move(from);
  }

  inline GenericAckReceived& operator=(const GenericAckReceived& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenericAckReceived& operator=(GenericAckReceived&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GenericAckReceived& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenericAckReceived* internal_default_instance() {
    return reinterpret_cast<const GenericAckReceived*>(
               &_GenericAckReceived_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GenericAckReceived& a, GenericAckReceived& b) {
    a.Swap(&b);
  }
  inline void Swap(GenericAckReceived* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenericAckReceived* New() const final {
    return CreateMaybeMessage<GenericAckReceived>(nullptr);
  }

  GenericAckReceived* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenericAckReceived>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GenericAckReceived& from);
  void MergeFrom(const GenericAckReceived& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GenericAckReceived* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webrtc.rtclog2.GenericAckReceived";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampMsDeltasFieldNumber = 17,
    kPacketNumberDeltasFieldNumber = 18,
    kAckedPacketNumberDeltasFieldNumber = 19,
    kReceiveAckedPacketTimeMsDeltasFieldNumber = 20,
    kTimestampMsFieldNumber = 1,
    kPacketNumberFieldNumber = 2,
    kAckedPacketNumberFieldNumber = 3,
    kReceiveAckedPacketTimeMsFieldNumber = 4,
    kNumberOfDeltasFieldNumber = 16,
  };
  // optional bytes timestamp_ms_deltas = 17;
  bool has_timestamp_ms_deltas() const;
  void clear_timestamp_ms_deltas();
  const std::string& timestamp_ms_deltas() const;
  void set_timestamp_ms_deltas(const std::string& value);
  void set_timestamp_ms_deltas(std::string&& value);
  void set_timestamp_ms_deltas(const char* value);
  void set_timestamp_ms_deltas(const void* value, size_t size);
  std::string* mutable_timestamp_ms_deltas();
  std::string* release_timestamp_ms_deltas();
  void set_allocated_timestamp_ms_deltas(std::string* timestamp_ms_deltas);

  // optional bytes packet_number_deltas = 18;
  bool has_packet_number_deltas() const;
  void clear_packet_number_deltas();
  const std::string& packet_number_deltas() const;
  void set_packet_number_deltas(const std::string& value);
  void set_packet_number_deltas(std::string&& value);
  void set_packet_number_deltas(const char* value);
  void set_packet_number_deltas(const void* value, size_t size);
  std::string* mutable_packet_number_deltas();
  std::string* release_packet_number_deltas();
  void set_allocated_packet_number_deltas(std::string* packet_number_deltas);

  // optional bytes acked_packet_number_deltas = 19;
  bool has_acked_packet_number_deltas() const;
  void clear_acked_packet_number_deltas();
  const std::string& acked_packet_number_deltas() const;
  void set_acked_packet_number_deltas(const std::string& value);
  void set_acked_packet_number_deltas(std::string&& value);
  void set_acked_packet_number_deltas(const char* value);
  void set_acked_packet_number_deltas(const void* value, size_t size);
  std::string* mutable_acked_packet_number_deltas();
  std::string* release_acked_packet_number_deltas();
  void set_allocated_acked_packet_number_deltas(std::string* acked_packet_number_deltas);

  // optional bytes receive_acked_packet_time_ms_deltas = 20;
  bool has_receive_acked_packet_time_ms_deltas() const;
  void clear_receive_acked_packet_time_ms_deltas();
  const std::string& receive_acked_packet_time_ms_deltas() const;
  void set_receive_acked_packet_time_ms_deltas(const std::string& value);
  void set_receive_acked_packet_time_ms_deltas(std::string&& value);
  void set_receive_acked_packet_time_ms_deltas(const char* value);
  void set_receive_acked_packet_time_ms_deltas(const void* value, size_t size);
  std::string* mutable_receive_acked_packet_time_ms_deltas();
  std::string* release_receive_acked_packet_time_ms_deltas();
  void set_allocated_receive_acked_packet_time_ms_deltas(std::string* receive_acked_packet_time_ms_deltas);

  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms() const;
  void set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 packet_number = 2;
  bool has_packet_number() const;
  void clear_packet_number();
  ::PROTOBUF_NAMESPACE_ID::int64 packet_number() const;
  void set_packet_number(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 acked_packet_number = 3;
  bool has_acked_packet_number() const;
  void clear_acked_packet_number();
  ::PROTOBUF_NAMESPACE_ID::int64 acked_packet_number() const;
  void set_acked_packet_number(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 receive_acked_packet_time_ms = 4;
  bool has_receive_acked_packet_time_ms() const;
  void clear_receive_acked_packet_time_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 receive_acked_packet_time_ms() const;
  void set_receive_acked_packet_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint32 number_of_deltas = 16;
  bool has_number_of_deltas() const;
  void clear_number_of_deltas();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_deltas() const;
  void set_number_of_deltas(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.GenericAckReceived)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_ms_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr packet_number_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr acked_packet_number_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receive_acked_packet_time_ms_deltas_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 packet_number_;
  ::PROTOBUF_NAMESPACE_ID::int64 acked_packet_number_;
  ::PROTOBUF_NAMESPACE_ID::int64 receive_acked_packet_time_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_deltas_;
  friend struct ::TableStruct_rtc_5fevent_5flog2_2eproto;
};
// -------------------------------------------------------------------

class IncomingRtpPackets :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.IncomingRtpPackets) */ {
 public:
  IncomingRtpPackets();
  virtual ~IncomingRtpPackets();

  IncomingRtpPackets(const IncomingRtpPackets& from);
  IncomingRtpPackets(IncomingRtpPackets&& from) noexcept
    : IncomingRtpPackets() {
    *this = ::std::move(from);
  }

  inline IncomingRtpPackets& operator=(const IncomingRtpPackets& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncomingRtpPackets& operator=(IncomingRtpPackets&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IncomingRtpPackets& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IncomingRtpPackets* internal_default_instance() {
    return reinterpret_cast<const IncomingRtpPackets*>(
               &_IncomingRtpPackets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(IncomingRtpPackets& a, IncomingRtpPackets& b) {
    a.Swap(&b);
  }
  inline void Swap(IncomingRtpPackets* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IncomingRtpPackets* New() const final {
    return CreateMaybeMessage<IncomingRtpPackets>(nullptr);
  }

  IncomingRtpPackets* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IncomingRtpPackets>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IncomingRtpPackets& from);
  void MergeFrom(const IncomingRtpPackets& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IncomingRtpPackets* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webrtc.rtclog2.IncomingRtpPackets";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampMsDeltasFieldNumber = 101,
    kMarkerDeltasFieldNumber = 102,
    kPayloadTypeDeltasFieldNumber = 103,
    kSequenceNumberDeltasFieldNumber = 104,
    kRtpTimestampDeltasFieldNumber = 105,
    kSsrcDeltasFieldNumber = 106,
    kPayloadSizeDeltasFieldNumber = 108,
    kHeaderSizeDeltasFieldNumber = 109,
    kPaddingSizeDeltasFieldNumber = 110,
    kTransportSequenceNumberDeltasFieldNumber = 115,
    kTransmissionTimeOffsetDeltasFieldNumber = 116,
    kAbsoluteSendTimeDeltasFieldNumber = 117,
    kVideoRotationDeltasFieldNumber = 118,
    kAudioLevelDeltasFieldNumber = 119,
    kVoiceActivityDeltasFieldNumber = 120,
    kTimestampMsFieldNumber = 1,
    kPayloadTypeFieldNumber = 3,
    kSequenceNumberFieldNumber = 4,
    kRtpTimestampFieldNumber = 5,
    kSsrcFieldNumber = 6,
    kPayloadSizeFieldNumber = 8,
    kHeaderSizeFieldNumber = 9,
    kPaddingSizeFieldNumber = 10,
    kNumberOfDeltasFieldNumber = 11,
    kMarkerFieldNumber = 2,
    kVoiceActivityFieldNumber = 20,
    kTransportSequenceNumberFieldNumber = 15,
    kTransmissionTimeOffsetFieldNumber = 16,
    kAbsoluteSendTimeFieldNumber = 17,
    kVideoRotationFieldNumber = 18,
    kAudioLevelFieldNumber = 19,
  };
  // optional bytes timestamp_ms_deltas = 101;
  bool has_timestamp_ms_deltas() const;
  void clear_timestamp_ms_deltas();
  const std::string& timestamp_ms_deltas() const;
  void set_timestamp_ms_deltas(const std::string& value);
  void set_timestamp_ms_deltas(std::string&& value);
  void set_timestamp_ms_deltas(const char* value);
  void set_timestamp_ms_deltas(const void* value, size_t size);
  std::string* mutable_timestamp_ms_deltas();
  std::string* release_timestamp_ms_deltas();
  void set_allocated_timestamp_ms_deltas(std::string* timestamp_ms_deltas);

  // optional bytes marker_deltas = 102;
  bool has_marker_deltas() const;
  void clear_marker_deltas();
  const std::string& marker_deltas() const;
  void set_marker_deltas(const std::string& value);
  void set_marker_deltas(std::string&& value);
  void set_marker_deltas(const char* value);
  void set_marker_deltas(const void* value, size_t size);
  std::string* mutable_marker_deltas();
  std::string* release_marker_deltas();
  void set_allocated_marker_deltas(std::string* marker_deltas);

  // optional bytes payload_type_deltas = 103;
  bool has_payload_type_deltas() const;
  void clear_payload_type_deltas();
  const std::string& payload_type_deltas() const;
  void set_payload_type_deltas(const std::string& value);
  void set_payload_type_deltas(std::string&& value);
  void set_payload_type_deltas(const char* value);
  void set_payload_type_deltas(const void* value, size_t size);
  std::string* mutable_payload_type_deltas();
  std::string* release_payload_type_deltas();
  void set_allocated_payload_type_deltas(std::string* payload_type_deltas);

  // optional bytes sequence_number_deltas = 104;
  bool has_sequence_number_deltas() const;
  void clear_sequence_number_deltas();
  const std::string& sequence_number_deltas() const;
  void set_sequence_number_deltas(const std::string& value);
  void set_sequence_number_deltas(std::string&& value);
  void set_sequence_number_deltas(const char* value);
  void set_sequence_number_deltas(const void* value, size_t size);
  std::string* mutable_sequence_number_deltas();
  std::string* release_sequence_number_deltas();
  void set_allocated_sequence_number_deltas(std::string* sequence_number_deltas);

  // optional bytes rtp_timestamp_deltas = 105;
  bool has_rtp_timestamp_deltas() const;
  void clear_rtp_timestamp_deltas();
  const std::string& rtp_timestamp_deltas() const;
  void set_rtp_timestamp_deltas(const std::string& value);
  void set_rtp_timestamp_deltas(std::string&& value);
  void set_rtp_timestamp_deltas(const char* value);
  void set_rtp_timestamp_deltas(const void* value, size_t size);
  std::string* mutable_rtp_timestamp_deltas();
  std::string* release_rtp_timestamp_deltas();
  void set_allocated_rtp_timestamp_deltas(std::string* rtp_timestamp_deltas);

  // optional bytes ssrc_deltas = 106;
  bool has_ssrc_deltas() const;
  void clear_ssrc_deltas();
  const std::string& ssrc_deltas() const;
  void set_ssrc_deltas(const std::string& value);
  void set_ssrc_deltas(std::string&& value);
  void set_ssrc_deltas(const char* value);
  void set_ssrc_deltas(const void* value, size_t size);
  std::string* mutable_ssrc_deltas();
  std::string* release_ssrc_deltas();
  void set_allocated_ssrc_deltas(std::string* ssrc_deltas);

  // optional bytes payload_size_deltas = 108;
  bool has_payload_size_deltas() const;
  void clear_payload_size_deltas();
  const std::string& payload_size_deltas() const;
  void set_payload_size_deltas(const std::string& value);
  void set_payload_size_deltas(std::string&& value);
  void set_payload_size_deltas(const char* value);
  void set_payload_size_deltas(const void* value, size_t size);
  std::string* mutable_payload_size_deltas();
  std::string* release_payload_size_deltas();
  void set_allocated_payload_size_deltas(std::string* payload_size_deltas);

  // optional bytes header_size_deltas = 109;
  bool has_header_size_deltas() const;
  void clear_header_size_deltas();
  const std::string& header_size_deltas() const;
  void set_header_size_deltas(const std::string& value);
  void set_header_size_deltas(std::string&& value);
  void set_header_size_deltas(const char* value);
  void set_header_size_deltas(const void* value, size_t size);
  std::string* mutable_header_size_deltas();
  std::string* release_header_size_deltas();
  void set_allocated_header_size_deltas(std::string* header_size_deltas);

  // optional bytes padding_size_deltas = 110;
  bool has_padding_size_deltas() const;
  void clear_padding_size_deltas();
  const std::string& padding_size_deltas() const;
  void set_padding_size_deltas(const std::string& value);
  void set_padding_size_deltas(std::string&& value);
  void set_padding_size_deltas(const char* value);
  void set_padding_size_deltas(const void* value, size_t size);
  std::string* mutable_padding_size_deltas();
  std::string* release_padding_size_deltas();
  void set_allocated_padding_size_deltas(std::string* padding_size_deltas);

  // optional bytes transport_sequence_number_deltas = 115;
  bool has_transport_sequence_number_deltas() const;
  void clear_transport_sequence_number_deltas();
  const std::string& transport_sequence_number_deltas() const;
  void set_transport_sequence_number_deltas(const std::string& value);
  void set_transport_sequence_number_deltas(std::string&& value);
  void set_transport_sequence_number_deltas(const char* value);
  void set_transport_sequence_number_deltas(const void* value, size_t size);
  std::string* mutable_transport_sequence_number_deltas();
  std::string* release_transport_sequence_number_deltas();
  void set_allocated_transport_sequence_number_deltas(std::string* transport_sequence_number_deltas);

  // optional bytes transmission_time_offset_deltas = 116;
  bool has_transmission_time_offset_deltas() const;
  void clear_transmission_time_offset_deltas();
  const std::string& transmission_time_offset_deltas() const;
  void set_transmission_time_offset_deltas(const std::string& value);
  void set_transmission_time_offset_deltas(std::string&& value);
  void set_transmission_time_offset_deltas(const char* value);
  void set_transmission_time_offset_deltas(const void* value, size_t size);
  std::string* mutable_transmission_time_offset_deltas();
  std::string* release_transmission_time_offset_deltas();
  void set_allocated_transmission_time_offset_deltas(std::string* transmission_time_offset_deltas);

  // optional bytes absolute_send_time_deltas = 117;
  bool has_absolute_send_time_deltas() const;
  void clear_absolute_send_time_deltas();
  const std::string& absolute_send_time_deltas() const;
  void set_absolute_send_time_deltas(const std::string& value);
  void set_absolute_send_time_deltas(std::string&& value);
  void set_absolute_send_time_deltas(const char* value);
  void set_absolute_send_time_deltas(const void* value, size_t size);
  std::string* mutable_absolute_send_time_deltas();
  std::string* release_absolute_send_time_deltas();
  void set_allocated_absolute_send_time_deltas(std::string* absolute_send_time_deltas);

  // optional bytes video_rotation_deltas = 118;
  bool has_video_rotation_deltas() const;
  void clear_video_rotation_deltas();
  const std::string& video_rotation_deltas() const;
  void set_video_rotation_deltas(const std::string& value);
  void set_video_rotation_deltas(std::string&& value);
  void set_video_rotation_deltas(const char* value);
  void set_video_rotation_deltas(const void* value, size_t size);
  std::string* mutable_video_rotation_deltas();
  std::string* release_video_rotation_deltas();
  void set_allocated_video_rotation_deltas(std::string* video_rotation_deltas);

  // optional bytes audio_level_deltas = 119;
  bool has_audio_level_deltas() const;
  void clear_audio_level_deltas();
  const std::string& audio_level_deltas() const;
  void set_audio_level_deltas(const std::string& value);
  void set_audio_level_deltas(std::string&& value);
  void set_audio_level_deltas(const char* value);
  void set_audio_level_deltas(const void* value, size_t size);
  std::string* mutable_audio_level_deltas();
  std::string* release_audio_level_deltas();
  void set_allocated_audio_level_deltas(std::string* audio_level_deltas);

  // optional bytes voice_activity_deltas = 120;
  bool has_voice_activity_deltas() const;
  void clear_voice_activity_deltas();
  const std::string& voice_activity_deltas() const;
  void set_voice_activity_deltas(const std::string& value);
  void set_voice_activity_deltas(std::string&& value);
  void set_voice_activity_deltas(const char* value);
  void set_voice_activity_deltas(const void* value, size_t size);
  std::string* mutable_voice_activity_deltas();
  std::string* release_voice_activity_deltas();
  void set_allocated_voice_activity_deltas(std::string* voice_activity_deltas);

  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms() const;
  void set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint32 payload_type = 3;
  bool has_payload_type() const;
  void clear_payload_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 payload_type() const;
  void set_payload_type(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 sequence_number = 4;
  bool has_sequence_number() const;
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional fixed32 rtp_timestamp = 5;
  bool has_rtp_timestamp() const;
  void clear_rtp_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 rtp_timestamp() const;
  void set_rtp_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional fixed32 ssrc = 6;
  bool has_ssrc() const;
  void clear_ssrc();
  ::PROTOBUF_NAMESPACE_ID::uint32 ssrc() const;
  void set_ssrc(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 payload_size = 8;
  bool has_payload_size() const;
  void clear_payload_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 payload_size() const;
  void set_payload_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 header_size = 9;
  bool has_header_size() const;
  void clear_header_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 header_size() const;
  void set_header_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 padding_size = 10;
  bool has_padding_size() const;
  void clear_padding_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 padding_size() const;
  void set_padding_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 number_of_deltas = 11;
  bool has_number_of_deltas() const;
  void clear_number_of_deltas();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_deltas() const;
  void set_number_of_deltas(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional bool marker = 2;
  bool has_marker() const;
  void clear_marker();
  bool marker() const;
  void set_marker(bool value);

  // optional bool voice_activity = 20;
  bool has_voice_activity() const;
  void clear_voice_activity();
  bool voice_activity() const;
  void set_voice_activity(bool value);

  // optional uint32 transport_sequence_number = 15;
  bool has_transport_sequence_number() const;
  void clear_transport_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 transport_sequence_number() const;
  void set_transport_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 transmission_time_offset = 16;
  bool has_transmission_time_offset() const;
  void clear_transmission_time_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 transmission_time_offset() const;
  void set_transmission_time_offset(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 absolute_send_time = 17;
  bool has_absolute_send_time() const;
  void clear_absolute_send_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 absolute_send_time() const;
  void set_absolute_send_time(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 video_rotation = 18;
  bool has_video_rotation() const;
  void clear_video_rotation();
  ::PROTOBUF_NAMESPACE_ID::uint32 video_rotation() const;
  void set_video_rotation(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 audio_level = 19;
  bool has_audio_level() const;
  void clear_audio_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 audio_level() const;
  void set_audio_level(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.IncomingRtpPackets)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_ms_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marker_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_type_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sequence_number_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rtp_timestamp_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssrc_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_size_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_size_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr padding_size_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transport_sequence_number_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transmission_time_offset_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr absolute_send_time_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr video_rotation_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_level_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr voice_activity_deltas_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 payload_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rtp_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ssrc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 payload_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 header_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 padding_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_deltas_;
  bool marker_;
  bool voice_activity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 transport_sequence_number_;
  ::PROTOBUF_NAMESPACE_ID::int32 transmission_time_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 absolute_send_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 video_rotation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 audio_level_;
  friend struct ::TableStruct_rtc_5fevent_5flog2_2eproto;
};
// -------------------------------------------------------------------

class OutgoingRtpPackets :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.OutgoingRtpPackets) */ {
 public:
  OutgoingRtpPackets();
  virtual ~OutgoingRtpPackets();

  OutgoingRtpPackets(const OutgoingRtpPackets& from);
  OutgoingRtpPackets(OutgoingRtpPackets&& from) noexcept
    : OutgoingRtpPackets() {
    *this = ::std::move(from);
  }

  inline OutgoingRtpPackets& operator=(const OutgoingRtpPackets& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutgoingRtpPackets& operator=(OutgoingRtpPackets&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const OutgoingRtpPackets& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OutgoingRtpPackets* internal_default_instance() {
    return reinterpret_cast<const OutgoingRtpPackets*>(
               &_OutgoingRtpPackets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(OutgoingRtpPackets& a, OutgoingRtpPackets& b) {
    a.Swap(&b);
  }
  inline void Swap(OutgoingRtpPackets* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OutgoingRtpPackets* New() const final {
    return CreateMaybeMessage<OutgoingRtpPackets>(nullptr);
  }

  OutgoingRtpPackets* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OutgoingRtpPackets>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const OutgoingRtpPackets& from);
  void MergeFrom(const OutgoingRtpPackets& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OutgoingRtpPackets* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webrtc.rtclog2.OutgoingRtpPackets";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampMsDeltasFieldNumber = 101,
    kMarkerDeltasFieldNumber = 102,
    kPayloadTypeDeltasFieldNumber = 103,
    kSequenceNumberDeltasFieldNumber = 104,
    kRtpTimestampDeltasFieldNumber = 105,
    kSsrcDeltasFieldNumber = 106,
    kPayloadSizeDeltasFieldNumber = 108,
    kHeaderSizeDeltasFieldNumber = 109,
    kPaddingSizeDeltasFieldNumber = 110,
    kTransportSequenceNumberDeltasFieldNumber = 115,
    kTransmissionTimeOffsetDeltasFieldNumber = 116,
    kAbsoluteSendTimeDeltasFieldNumber = 117,
    kVideoRotationDeltasFieldNumber = 118,
    kAudioLevelDeltasFieldNumber = 119,
    kVoiceActivityDeltasFieldNumber = 120,
    kTimestampMsFieldNumber = 1,
    kPayloadTypeFieldNumber = 3,
    kSequenceNumberFieldNumber = 4,
    kRtpTimestampFieldNumber = 5,
    kSsrcFieldNumber = 6,
    kPayloadSizeFieldNumber = 8,
    kHeaderSizeFieldNumber = 9,
    kPaddingSizeFieldNumber = 10,
    kNumberOfDeltasFieldNumber = 11,
    kMarkerFieldNumber = 2,
    kVoiceActivityFieldNumber = 20,
    kTransportSequenceNumberFieldNumber = 15,
    kTransmissionTimeOffsetFieldNumber = 16,
    kAbsoluteSendTimeFieldNumber = 17,
    kVideoRotationFieldNumber = 18,
    kAudioLevelFieldNumber = 19,
  };
  // optional bytes timestamp_ms_deltas = 101;
  bool has_timestamp_ms_deltas() const;
  void clear_timestamp_ms_deltas();
  const std::string& timestamp_ms_deltas() const;
  void set_timestamp_ms_deltas(const std::string& value);
  void set_timestamp_ms_deltas(std::string&& value);
  void set_timestamp_ms_deltas(const char* value);
  void set_timestamp_ms_deltas(const void* value, size_t size);
  std::string* mutable_timestamp_ms_deltas();
  std::string* release_timestamp_ms_deltas();
  void set_allocated_timestamp_ms_deltas(std::string* timestamp_ms_deltas);

  // optional bytes marker_deltas = 102;
  bool has_marker_deltas() const;
  void clear_marker_deltas();
  const std::string& marker_deltas() const;
  void set_marker_deltas(const std::string& value);
  void set_marker_deltas(std::string&& value);
  void set_marker_deltas(const char* value);
  void set_marker_deltas(const void* value, size_t size);
  std::string* mutable_marker_deltas();
  std::string* release_marker_deltas();
  void set_allocated_marker_deltas(std::string* marker_deltas);

  // optional bytes payload_type_deltas = 103;
  bool has_payload_type_deltas() const;
  void clear_payload_type_deltas();
  const std::string& payload_type_deltas() const;
  void set_payload_type_deltas(const std::string& value);
  void set_payload_type_deltas(std::string&& value);
  void set_payload_type_deltas(const char* value);
  void set_payload_type_deltas(const void* value, size_t size);
  std::string* mutable_payload_type_deltas();
  std::string* release_payload_type_deltas();
  void set_allocated_payload_type_deltas(std::string* payload_type_deltas);

  // optional bytes sequence_number_deltas = 104;
  bool has_sequence_number_deltas() const;
  void clear_sequence_number_deltas();
  const std::string& sequence_number_deltas() const;
  void set_sequence_number_deltas(const std::string& value);
  void set_sequence_number_deltas(std::string&& value);
  void set_sequence_number_deltas(const char* value);
  void set_sequence_number_deltas(const void* value, size_t size);
  std::string* mutable_sequence_number_deltas();
  std::string* release_sequence_number_deltas();
  void set_allocated_sequence_number_deltas(std::string* sequence_number_deltas);

  // optional bytes rtp_timestamp_deltas = 105;
  bool has_rtp_timestamp_deltas() const;
  void clear_rtp_timestamp_deltas();
  const std::string& rtp_timestamp_deltas() const;
  void set_rtp_timestamp_deltas(const std::string& value);
  void set_rtp_timestamp_deltas(std::string&& value);
  void set_rtp_timestamp_deltas(const char* value);
  void set_rtp_timestamp_deltas(const void* value, size_t size);
  std::string* mutable_rtp_timestamp_deltas();
  std::string* release_rtp_timestamp_deltas();
  void set_allocated_rtp_timestamp_deltas(std::string* rtp_timestamp_deltas);

  // optional bytes ssrc_deltas = 106;
  bool has_ssrc_deltas() const;
  void clear_ssrc_deltas();
  const std::string& ssrc_deltas() const;
  void set_ssrc_deltas(const std::string& value);
  void set_ssrc_deltas(std::string&& value);
  void set_ssrc_deltas(const char* value);
  void set_ssrc_deltas(const void* value, size_t size);
  std::string* mutable_ssrc_deltas();
  std::string* release_ssrc_deltas();
  void set_allocated_ssrc_deltas(std::string* ssrc_deltas);

  // optional bytes payload_size_deltas = 108;
  bool has_payload_size_deltas() const;
  void clear_payload_size_deltas();
  const std::string& payload_size_deltas() const;
  void set_payload_size_deltas(const std::string& value);
  void set_payload_size_deltas(std::string&& value);
  void set_payload_size_deltas(const char* value);
  void set_payload_size_deltas(const void* value, size_t size);
  std::string* mutable_payload_size_deltas();
  std::string* release_payload_size_deltas();
  void set_allocated_payload_size_deltas(std::string* payload_size_deltas);

  // optional bytes header_size_deltas = 109;
  bool has_header_size_deltas() const;
  void clear_header_size_deltas();
  const std::string& header_size_deltas() const;
  void set_header_size_deltas(const std::string& value);
  void set_header_size_deltas(std::string&& value);
  void set_header_size_deltas(const char* value);
  void set_header_size_deltas(const void* value, size_t size);
  std::string* mutable_header_size_deltas();
  std::string* release_header_size_deltas();
  void set_allocated_header_size_deltas(std::string* header_size_deltas);

  // optional bytes padding_size_deltas = 110;
  bool has_padding_size_deltas() const;
  void clear_padding_size_deltas();
  const std::string& padding_size_deltas() const;
  void set_padding_size_deltas(const std::string& value);
  void set_padding_size_deltas(std::string&& value);
  void set_padding_size_deltas(const char* value);
  void set_padding_size_deltas(const void* value, size_t size);
  std::string* mutable_padding_size_deltas();
  std::string* release_padding_size_deltas();
  void set_allocated_padding_size_deltas(std::string* padding_size_deltas);

  // optional bytes transport_sequence_number_deltas = 115;
  bool has_transport_sequence_number_deltas() const;
  void clear_transport_sequence_number_deltas();
  const std::string& transport_sequence_number_deltas() const;
  void set_transport_sequence_number_deltas(const std::string& value);
  void set_transport_sequence_number_deltas(std::string&& value);
  void set_transport_sequence_number_deltas(const char* value);
  void set_transport_sequence_number_deltas(const void* value, size_t size);
  std::string* mutable_transport_sequence_number_deltas();
  std::string* release_transport_sequence_number_deltas();
  void set_allocated_transport_sequence_number_deltas(std::string* transport_sequence_number_deltas);

  // optional bytes transmission_time_offset_deltas = 116;
  bool has_transmission_time_offset_deltas() const;
  void clear_transmission_time_offset_deltas();
  const std::string& transmission_time_offset_deltas() const;
  void set_transmission_time_offset_deltas(const std::string& value);
  void set_transmission_time_offset_deltas(std::string&& value);
  void set_transmission_time_offset_deltas(const char* value);
  void set_transmission_time_offset_deltas(const void* value, size_t size);
  std::string* mutable_transmission_time_offset_deltas();
  std::string* release_transmission_time_offset_deltas();
  void set_allocated_transmission_time_offset_deltas(std::string* transmission_time_offset_deltas);

  // optional bytes absolute_send_time_deltas = 117;
  bool has_absolute_send_time_deltas() const;
  void clear_absolute_send_time_deltas();
  const std::string& absolute_send_time_deltas() const;
  void set_absolute_send_time_deltas(const std::string& value);
  void set_absolute_send_time_deltas(std::string&& value);
  void set_absolute_send_time_deltas(const char* value);
  void set_absolute_send_time_deltas(const void* value, size_t size);
  std::string* mutable_absolute_send_time_deltas();
  std::string* release_absolute_send_time_deltas();
  void set_allocated_absolute_send_time_deltas(std::string* absolute_send_time_deltas);

  // optional bytes video_rotation_deltas = 118;
  bool has_video_rotation_deltas() const;
  void clear_video_rotation_deltas();
  const std::string& video_rotation_deltas() const;
  void set_video_rotation_deltas(const std::string& value);
  void set_video_rotation_deltas(std::string&& value);
  void set_video_rotation_deltas(const char* value);
  void set_video_rotation_deltas(const void* value, size_t size);
  std::string* mutable_video_rotation_deltas();
  std::string* release_video_rotation_deltas();
  void set_allocated_video_rotation_deltas(std::string* video_rotation_deltas);

  // optional bytes audio_level_deltas = 119;
  bool has_audio_level_deltas() const;
  void clear_audio_level_deltas();
  const std::string& audio_level_deltas() const;
  void set_audio_level_deltas(const std::string& value);
  void set_audio_level_deltas(std::string&& value);
  void set_audio_level_deltas(const char* value);
  void set_audio_level_deltas(const void* value, size_t size);
  std::string* mutable_audio_level_deltas();
  std::string* release_audio_level_deltas();
  void set_allocated_audio_level_deltas(std::string* audio_level_deltas);

  // optional bytes voice_activity_deltas = 120;
  bool has_voice_activity_deltas() const;
  void clear_voice_activity_deltas();
  const std::string& voice_activity_deltas() const;
  void set_voice_activity_deltas(const std::string& value);
  void set_voice_activity_deltas(std::string&& value);
  void set_voice_activity_deltas(const char* value);
  void set_voice_activity_deltas(const void* value, size_t size);
  std::string* mutable_voice_activity_deltas();
  std::string* release_voice_activity_deltas();
  void set_allocated_voice_activity_deltas(std::string* voice_activity_deltas);

  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms() const;
  void set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint32 payload_type = 3;
  bool has_payload_type() const;
  void clear_payload_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 payload_type() const;
  void set_payload_type(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 sequence_number = 4;
  bool has_sequence_number() const;
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional fixed32 rtp_timestamp = 5;
  bool has_rtp_timestamp() const;
  void clear_rtp_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 rtp_timestamp() const;
  void set_rtp_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional fixed32 ssrc = 6;
  bool has_ssrc() const;
  void clear_ssrc();
  ::PROTOBUF_NAMESPACE_ID::uint32 ssrc() const;
  void set_ssrc(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 payload_size = 8;
  bool has_payload_size() const;
  void clear_payload_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 payload_size() const;
  void set_payload_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 header_size = 9;
  bool has_header_size() const;
  void clear_header_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 header_size() const;
  void set_header_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 padding_size = 10;
  bool has_padding_size() const;
  void clear_padding_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 padding_size() const;
  void set_padding_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 number_of_deltas = 11;
  bool has_number_of_deltas() const;
  void clear_number_of_deltas();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_deltas() const;
  void set_number_of_deltas(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional bool marker = 2;
  bool has_marker() const;
  void clear_marker();
  bool marker() const;
  void set_marker(bool value);

  // optional bool voice_activity = 20;
  bool has_voice_activity() const;
  void clear_voice_activity();
  bool voice_activity() const;
  void set_voice_activity(bool value);

  // optional uint32 transport_sequence_number = 15;
  bool has_transport_sequence_number() const;
  void clear_transport_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 transport_sequence_number() const;
  void set_transport_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 transmission_time_offset = 16;
  bool has_transmission_time_offset() const;
  void clear_transmission_time_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 transmission_time_offset() const;
  void set_transmission_time_offset(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 absolute_send_time = 17;
  bool has_absolute_send_time() const;
  void clear_absolute_send_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 absolute_send_time() const;
  void set_absolute_send_time(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 video_rotation = 18;
  bool has_video_rotation() const;
  void clear_video_rotation();
  ::PROTOBUF_NAMESPACE_ID::uint32 video_rotation() const;
  void set_video_rotation(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 audio_level = 19;
  bool has_audio_level() const;
  void clear_audio_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 audio_level() const;
  void set_audio_level(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.OutgoingRtpPackets)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_ms_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marker_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_type_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sequence_number_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rtp_timestamp_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssrc_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_size_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_size_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr padding_size_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transport_sequence_number_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transmission_time_offset_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr absolute_send_time_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr video_rotation_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_level_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr voice_activity_deltas_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 payload_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rtp_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ssrc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 payload_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 header_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 padding_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_deltas_;
  bool marker_;
  bool voice_activity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 transport_sequence_number_;
  ::PROTOBUF_NAMESPACE_ID::int32 transmission_time_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 absolute_send_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 video_rotation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 audio_level_;
  friend struct ::TableStruct_rtc_5fevent_5flog2_2eproto;
};
// -------------------------------------------------------------------

class IncomingRtcpPackets :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.IncomingRtcpPackets) */ {
 public:
  IncomingRtcpPackets();
  virtual ~IncomingRtcpPackets();

  IncomingRtcpPackets(const IncomingRtcpPackets& from);
  IncomingRtcpPackets(IncomingRtcpPackets&& from) noexcept
    : IncomingRtcpPackets() {
    *this = ::std::move(from);
  }

  inline IncomingRtcpPackets& operator=(const IncomingRtcpPackets& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncomingRtcpPackets& operator=(IncomingRtcpPackets&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IncomingRtcpPackets& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IncomingRtcpPackets* internal_default_instance() {
    return reinterpret_cast<const IncomingRtcpPackets*>(
               &_IncomingRtcpPackets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(IncomingRtcpPackets& a, IncomingRtcpPackets& b) {
    a.Swap(&b);
  }
  inline void Swap(IncomingRtcpPackets* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IncomingRtcpPackets* New() const final {
    return CreateMaybeMessage<IncomingRtcpPackets>(nullptr);
  }

  IncomingRtcpPackets* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IncomingRtcpPackets>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IncomingRtcpPackets& from);
  void MergeFrom(const IncomingRtcpPackets& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IncomingRtcpPackets* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webrtc.rtclog2.IncomingRtcpPackets";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRawPacketFieldNumber = 2,
    kTimestampMsDeltasFieldNumber = 101,
    kRawPacketBlobsFieldNumber = 102,
    kTimestampMsFieldNumber = 1,
    kNumberOfDeltasFieldNumber = 3,
  };
  // optional bytes raw_packet = 2;
  bool has_raw_packet() const;
  void clear_raw_packet();
  const std::string& raw_packet() const;
  void set_raw_packet(const std::string& value);
  void set_raw_packet(std::string&& value);
  void set_raw_packet(const char* value);
  void set_raw_packet(const void* value, size_t size);
  std::string* mutable_raw_packet();
  std::string* release_raw_packet();
  void set_allocated_raw_packet(std::string* raw_packet);

  // optional bytes timestamp_ms_deltas = 101;
  bool has_timestamp_ms_deltas() const;
  void clear_timestamp_ms_deltas();
  const std::string& timestamp_ms_deltas() const;
  void set_timestamp_ms_deltas(const std::string& value);
  void set_timestamp_ms_deltas(std::string&& value);
  void set_timestamp_ms_deltas(const char* value);
  void set_timestamp_ms_deltas(const void* value, size_t size);
  std::string* mutable_timestamp_ms_deltas();
  std::string* release_timestamp_ms_deltas();
  void set_allocated_timestamp_ms_deltas(std::string* timestamp_ms_deltas);

  // optional bytes raw_packet_blobs = 102;
  bool has_raw_packet_blobs() const;
  void clear_raw_packet_blobs();
  const std::string& raw_packet_blobs() const;
  void set_raw_packet_blobs(const std::string& value);
  void set_raw_packet_blobs(std::string&& value);
  void set_raw_packet_blobs(const char* value);
  void set_raw_packet_blobs(const void* value, size_t size);
  std::string* mutable_raw_packet_blobs();
  std::string* release_raw_packet_blobs();
  void set_allocated_raw_packet_blobs(std::string* raw_packet_blobs);

  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms() const;
  void set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint32 number_of_deltas = 3;
  bool has_number_of_deltas() const;
  void clear_number_of_deltas();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_deltas() const;
  void set_number_of_deltas(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.IncomingRtcpPackets)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_packet_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_ms_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_packet_blobs_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_deltas_;
  friend struct ::TableStruct_rtc_5fevent_5flog2_2eproto;
};
// -------------------------------------------------------------------

class OutgoingRtcpPackets :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.OutgoingRtcpPackets) */ {
 public:
  OutgoingRtcpPackets();
  virtual ~OutgoingRtcpPackets();

  OutgoingRtcpPackets(const OutgoingRtcpPackets& from);
  OutgoingRtcpPackets(OutgoingRtcpPackets&& from) noexcept
    : OutgoingRtcpPackets() {
    *this = ::std::move(from);
  }

  inline OutgoingRtcpPackets& operator=(const OutgoingRtcpPackets& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutgoingRtcpPackets& operator=(OutgoingRtcpPackets&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const OutgoingRtcpPackets& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OutgoingRtcpPackets* internal_default_instance() {
    return reinterpret_cast<const OutgoingRtcpPackets*>(
               &_OutgoingRtcpPackets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(OutgoingRtcpPackets& a, OutgoingRtcpPackets& b) {
    a.Swap(&b);
  }
  inline void Swap(OutgoingRtcpPackets* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OutgoingRtcpPackets* New() const final {
    return CreateMaybeMessage<OutgoingRtcpPackets>(nullptr);
  }

  OutgoingRtcpPackets* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OutgoingRtcpPackets>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const OutgoingRtcpPackets& from);
  void MergeFrom(const OutgoingRtcpPackets& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OutgoingRtcpPackets* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webrtc.rtclog2.OutgoingRtcpPackets";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRawPacketFieldNumber = 2,
    kTimestampMsDeltasFieldNumber = 101,
    kRawPacketBlobsFieldNumber = 102,
    kTimestampMsFieldNumber = 1,
    kNumberOfDeltasFieldNumber = 3,
  };
  // optional bytes raw_packet = 2;
  bool has_raw_packet() const;
  void clear_raw_packet();
  const std::string& raw_packet() const;
  void set_raw_packet(const std::string& value);
  void set_raw_packet(std::string&& value);
  void set_raw_packet(const char* value);
  void set_raw_packet(const void* value, size_t size);
  std::string* mutable_raw_packet();
  std::string* release_raw_packet();
  void set_allocated_raw_packet(std::string* raw_packet);

  // optional bytes timestamp_ms_deltas = 101;
  bool has_timestamp_ms_deltas() const;
  void clear_timestamp_ms_deltas();
  const std::string& timestamp_ms_deltas() const;
  void set_timestamp_ms_deltas(const std::string& value);
  void set_timestamp_ms_deltas(std::string&& value);
  void set_timestamp_ms_deltas(const char* value);
  void set_timestamp_ms_deltas(const void* value, size_t size);
  std::string* mutable_timestamp_ms_deltas();
  std::string* release_timestamp_ms_deltas();
  void set_allocated_timestamp_ms_deltas(std::string* timestamp_ms_deltas);

  // optional bytes raw_packet_blobs = 102;
  bool has_raw_packet_blobs() const;
  void clear_raw_packet_blobs();
  const std::string& raw_packet_blobs() const;
  void set_raw_packet_blobs(const std::string& value);
  void set_raw_packet_blobs(std::string&& value);
  void set_raw_packet_blobs(const char* value);
  void set_raw_packet_blobs(const void* value, size_t size);
  std::string* mutable_raw_packet_blobs();
  std::string* release_raw_packet_blobs();
  void set_allocated_raw_packet_blobs(std::string* raw_packet_blobs);

  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms() const;
  void set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint32 number_of_deltas = 3;
  bool has_number_of_deltas() const;
  void clear_number_of_deltas();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_deltas() const;
  void set_number_of_deltas(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.OutgoingRtcpPackets)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_packet_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_ms_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_packet_blobs_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_deltas_;
  friend struct ::TableStruct_rtc_5fevent_5flog2_2eproto;
};
// -------------------------------------------------------------------

class AudioPlayoutEvents :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.AudioPlayoutEvents) */ {
 public:
  AudioPlayoutEvents();
  virtual ~AudioPlayoutEvents();

  AudioPlayoutEvents(const AudioPlayoutEvents& from);
  AudioPlayoutEvents(AudioPlayoutEvents&& from) noexcept
    : AudioPlayoutEvents() {
    *this = ::std::move(from);
  }

  inline AudioPlayoutEvents& operator=(const AudioPlayoutEvents& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioPlayoutEvents& operator=(AudioPlayoutEvents&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AudioPlayoutEvents& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioPlayoutEvents* internal_default_instance() {
    return reinterpret_cast<const AudioPlayoutEvents*>(
               &_AudioPlayoutEvents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AudioPlayoutEvents& a, AudioPlayoutEvents& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioPlayoutEvents* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioPlayoutEvents* New() const final {
    return CreateMaybeMessage<AudioPlayoutEvents>(nullptr);
  }

  AudioPlayoutEvents* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioPlayoutEvents>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AudioPlayoutEvents& from);
  void MergeFrom(const AudioPlayoutEvents& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AudioPlayoutEvents* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webrtc.rtclog2.AudioPlayoutEvents";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampMsDeltasFieldNumber = 101,
    kLocalSsrcDeltasFieldNumber = 102,
    kTimestampMsFieldNumber = 1,
    kLocalSsrcFieldNumber = 2,
    kNumberOfDeltasFieldNumber = 3,
  };
  // optional bytes timestamp_ms_deltas = 101;
  bool has_timestamp_ms_deltas() const;
  void clear_timestamp_ms_deltas();
  const std::string& timestamp_ms_deltas() const;
  void set_timestamp_ms_deltas(const std::string& value);
  void set_timestamp_ms_deltas(std::string&& value);
  void set_timestamp_ms_deltas(const char* value);
  void set_timestamp_ms_deltas(const void* value, size_t size);
  std::string* mutable_timestamp_ms_deltas();
  std::string* release_timestamp_ms_deltas();
  void set_allocated_timestamp_ms_deltas(std::string* timestamp_ms_deltas);

  // optional bytes local_ssrc_deltas = 102;
  bool has_local_ssrc_deltas() const;
  void clear_local_ssrc_deltas();
  const std::string& local_ssrc_deltas() const;
  void set_local_ssrc_deltas(const std::string& value);
  void set_local_ssrc_deltas(std::string&& value);
  void set_local_ssrc_deltas(const char* value);
  void set_local_ssrc_deltas(const void* value, size_t size);
  std::string* mutable_local_ssrc_deltas();
  std::string* release_local_ssrc_deltas();
  void set_allocated_local_ssrc_deltas(std::string* local_ssrc_deltas);

  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms() const;
  void set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint32 local_ssrc = 2;
  bool has_local_ssrc() const;
  void clear_local_ssrc();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_ssrc() const;
  void set_local_ssrc(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 number_of_deltas = 3;
  bool has_number_of_deltas() const;
  void clear_number_of_deltas();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_deltas() const;
  void set_number_of_deltas(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.AudioPlayoutEvents)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_ms_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_ssrc_deltas_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_ssrc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_deltas_;
  friend struct ::TableStruct_rtc_5fevent_5flog2_2eproto;
};
// -------------------------------------------------------------------

class BeginLogEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.BeginLogEvent) */ {
 public:
  BeginLogEvent();
  virtual ~BeginLogEvent();

  BeginLogEvent(const BeginLogEvent& from);
  BeginLogEvent(BeginLogEvent&& from) noexcept
    : BeginLogEvent() {
    *this = ::std::move(from);
  }

  inline BeginLogEvent& operator=(const BeginLogEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BeginLogEvent& operator=(BeginLogEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BeginLogEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeginLogEvent* internal_default_instance() {
    return reinterpret_cast<const BeginLogEvent*>(
               &_BeginLogEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BeginLogEvent& a, BeginLogEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(BeginLogEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BeginLogEvent* New() const final {
    return CreateMaybeMessage<BeginLogEvent>(nullptr);
  }

  BeginLogEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BeginLogEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BeginLogEvent& from);
  void MergeFrom(const BeginLogEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BeginLogEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webrtc.rtclog2.BeginLogEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampMsFieldNumber = 1,
    kUtcTimeMsFieldNumber = 3,
    kVersionFieldNumber = 2,
  };
  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms() const;
  void set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 utc_time_ms = 3;
  bool has_utc_time_ms() const;
  void clear_utc_time_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 utc_time_ms() const;
  void set_utc_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint32 version = 2;
  bool has_version() const;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.BeginLogEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 utc_time_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  friend struct ::TableStruct_rtc_5fevent_5flog2_2eproto;
};
// -------------------------------------------------------------------

class EndLogEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.EndLogEvent) */ {
 public:
  EndLogEvent();
  virtual ~EndLogEvent();

  EndLogEvent(const EndLogEvent& from);
  EndLogEvent(EndLogEvent&& from) noexcept
    : EndLogEvent() {
    *this = ::std::move(from);
  }

  inline EndLogEvent& operator=(const EndLogEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndLogEvent& operator=(EndLogEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const EndLogEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EndLogEvent* internal_default_instance() {
    return reinterpret_cast<const EndLogEvent*>(
               &_EndLogEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(EndLogEvent& a, EndLogEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(EndLogEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EndLogEvent* New() const final {
    return CreateMaybeMessage<EndLogEvent>(nullptr);
  }

  EndLogEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EndLogEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const EndLogEvent& from);
  void MergeFrom(const EndLogEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EndLogEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webrtc.rtclog2.EndLogEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampMsFieldNumber = 1,
  };
  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms() const;
  void set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.EndLogEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms_;
  friend struct ::TableStruct_rtc_5fevent_5flog2_2eproto;
};
// -------------------------------------------------------------------

class LossBasedBweUpdates :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.LossBasedBweUpdates) */ {
 public:
  LossBasedBweUpdates();
  virtual ~LossBasedBweUpdates();

  LossBasedBweUpdates(const LossBasedBweUpdates& from);
  LossBasedBweUpdates(LossBasedBweUpdates&& from) noexcept
    : LossBasedBweUpdates() {
    *this = ::std::move(from);
  }

  inline LossBasedBweUpdates& operator=(const LossBasedBweUpdates& from) {
    CopyFrom(from);
    return *this;
  }
  inline LossBasedBweUpdates& operator=(LossBasedBweUpdates&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const LossBasedBweUpdates& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LossBasedBweUpdates* internal_default_instance() {
    return reinterpret_cast<const LossBasedBweUpdates*>(
               &_LossBasedBweUpdates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(LossBasedBweUpdates& a, LossBasedBweUpdates& b) {
    a.Swap(&b);
  }
  inline void Swap(LossBasedBweUpdates* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LossBasedBweUpdates* New() const final {
    return CreateMaybeMessage<LossBasedBweUpdates>(nullptr);
  }

  LossBasedBweUpdates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LossBasedBweUpdates>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LossBasedBweUpdates& from);
  void MergeFrom(const LossBasedBweUpdates& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LossBasedBweUpdates* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webrtc.rtclog2.LossBasedBweUpdates";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampMsDeltasFieldNumber = 101,
    kBitrateBpsDeltasFieldNumber = 102,
    kFractionLossDeltasFieldNumber = 103,
    kTotalPacketsDeltasFieldNumber = 104,
    kTimestampMsFieldNumber = 1,
    kBitrateBpsFieldNumber = 2,
    kFractionLossFieldNumber = 3,
    kTotalPacketsFieldNumber = 4,
    kNumberOfDeltasFieldNumber = 5,
  };
  // optional bytes timestamp_ms_deltas = 101;
  bool has_timestamp_ms_deltas() const;
  void clear_timestamp_ms_deltas();
  const std::string& timestamp_ms_deltas() const;
  void set_timestamp_ms_deltas(const std::string& value);
  void set_timestamp_ms_deltas(std::string&& value);
  void set_timestamp_ms_deltas(const char* value);
  void set_timestamp_ms_deltas(const void* value, size_t size);
  std::string* mutable_timestamp_ms_deltas();
  std::string* release_timestamp_ms_deltas();
  void set_allocated_timestamp_ms_deltas(std::string* timestamp_ms_deltas);

  // optional bytes bitrate_bps_deltas = 102;
  bool has_bitrate_bps_deltas() const;
  void clear_bitrate_bps_deltas();
  const std::string& bitrate_bps_deltas() const;
  void set_bitrate_bps_deltas(const std::string& value);
  void set_bitrate_bps_deltas(std::string&& value);
  void set_bitrate_bps_deltas(const char* value);
  void set_bitrate_bps_deltas(const void* value, size_t size);
  std::string* mutable_bitrate_bps_deltas();
  std::string* release_bitrate_bps_deltas();
  void set_allocated_bitrate_bps_deltas(std::string* bitrate_bps_deltas);

  // optional bytes fraction_loss_deltas = 103;
  bool has_fraction_loss_deltas() const;
  void clear_fraction_loss_deltas();
  const std::string& fraction_loss_deltas() const;
  void set_fraction_loss_deltas(const std::string& value);
  void set_fraction_loss_deltas(std::string&& value);
  void set_fraction_loss_deltas(const char* value);
  void set_fraction_loss_deltas(const void* value, size_t size);
  std::string* mutable_fraction_loss_deltas();
  std::string* release_fraction_loss_deltas();
  void set_allocated_fraction_loss_deltas(std::string* fraction_loss_deltas);

  // optional bytes total_packets_deltas = 104;
  bool has_total_packets_deltas() const;
  void clear_total_packets_deltas();
  const std::string& total_packets_deltas() const;
  void set_total_packets_deltas(const std::string& value);
  void set_total_packets_deltas(std::string&& value);
  void set_total_packets_deltas(const char* value);
  void set_total_packets_deltas(const void* value, size_t size);
  std::string* mutable_total_packets_deltas();
  std::string* release_total_packets_deltas();
  void set_allocated_total_packets_deltas(std::string* total_packets_deltas);

  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms() const;
  void set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint32 bitrate_bps = 2;
  bool has_bitrate_bps() const;
  void clear_bitrate_bps();
  ::PROTOBUF_NAMESPACE_ID::uint32 bitrate_bps() const;
  void set_bitrate_bps(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 fraction_loss = 3;
  bool has_fraction_loss() const;
  void clear_fraction_loss();
  ::PROTOBUF_NAMESPACE_ID::uint32 fraction_loss() const;
  void set_fraction_loss(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 total_packets = 4;
  bool has_total_packets() const;
  void clear_total_packets();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_packets() const;
  void set_total_packets(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 number_of_deltas = 5;
  bool has_number_of_deltas() const;
  void clear_number_of_deltas();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_deltas() const;
  void set_number_of_deltas(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.LossBasedBweUpdates)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_ms_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bitrate_bps_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fraction_loss_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr total_packets_deltas_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bitrate_bps_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fraction_loss_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_packets_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_deltas_;
  friend struct ::TableStruct_rtc_5fevent_5flog2_2eproto;
};
// -------------------------------------------------------------------

class DelayBasedBweUpdates :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.DelayBasedBweUpdates) */ {
 public:
  DelayBasedBweUpdates();
  virtual ~DelayBasedBweUpdates();

  DelayBasedBweUpdates(const DelayBasedBweUpdates& from);
  DelayBasedBweUpdates(DelayBasedBweUpdates&& from) noexcept
    : DelayBasedBweUpdates() {
    *this = ::std::move(from);
  }

  inline DelayBasedBweUpdates& operator=(const DelayBasedBweUpdates& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelayBasedBweUpdates& operator=(DelayBasedBweUpdates&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DelayBasedBweUpdates& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DelayBasedBweUpdates* internal_default_instance() {
    return reinterpret_cast<const DelayBasedBweUpdates*>(
               &_DelayBasedBweUpdates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DelayBasedBweUpdates& a, DelayBasedBweUpdates& b) {
    a.Swap(&b);
  }
  inline void Swap(DelayBasedBweUpdates* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DelayBasedBweUpdates* New() const final {
    return CreateMaybeMessage<DelayBasedBweUpdates>(nullptr);
  }

  DelayBasedBweUpdates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DelayBasedBweUpdates>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DelayBasedBweUpdates& from);
  void MergeFrom(const DelayBasedBweUpdates& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DelayBasedBweUpdates* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webrtc.rtclog2.DelayBasedBweUpdates";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DelayBasedBweUpdates_DetectorState DetectorState;
  static constexpr DetectorState BWE_UNKNOWN_STATE =
    DelayBasedBweUpdates_DetectorState_BWE_UNKNOWN_STATE;
  static constexpr DetectorState BWE_NORMAL =
    DelayBasedBweUpdates_DetectorState_BWE_NORMAL;
  static constexpr DetectorState BWE_UNDERUSING =
    DelayBasedBweUpdates_DetectorState_BWE_UNDERUSING;
  static constexpr DetectorState BWE_OVERUSING =
    DelayBasedBweUpdates_DetectorState_BWE_OVERUSING;
  static inline bool DetectorState_IsValid(int value) {
    return DelayBasedBweUpdates_DetectorState_IsValid(value);
  }
  static constexpr DetectorState DetectorState_MIN =
    DelayBasedBweUpdates_DetectorState_DetectorState_MIN;
  static constexpr DetectorState DetectorState_MAX =
    DelayBasedBweUpdates_DetectorState_DetectorState_MAX;
  static constexpr int DetectorState_ARRAYSIZE =
    DelayBasedBweUpdates_DetectorState_DetectorState_ARRAYSIZE;
  template<typename T>
  static inline const std::string& DetectorState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DetectorState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DetectorState_Name.");
    return DelayBasedBweUpdates_DetectorState_Name(enum_t_value);
  }
  static inline bool DetectorState_Parse(const std::string& name,
      DetectorState* value) {
    return DelayBasedBweUpdates_DetectorState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampMsDeltasFieldNumber = 101,
    kBitrateBpsDeltasFieldNumber = 102,
    kDetectorStateDeltasFieldNumber = 103,
    kTimestampMsFieldNumber = 1,
    kBitrateBpsFieldNumber = 2,
    kDetectorStateFieldNumber = 3,
    kNumberOfDeltasFieldNumber = 4,
  };
  // optional bytes timestamp_ms_deltas = 101;
  bool has_timestamp_ms_deltas() const;
  void clear_timestamp_ms_deltas();
  const std::string& timestamp_ms_deltas() const;
  void set_timestamp_ms_deltas(const std::string& value);
  void set_timestamp_ms_deltas(std::string&& value);
  void set_timestamp_ms_deltas(const char* value);
  void set_timestamp_ms_deltas(const void* value, size_t size);
  std::string* mutable_timestamp_ms_deltas();
  std::string* release_timestamp_ms_deltas();
  void set_allocated_timestamp_ms_deltas(std::string* timestamp_ms_deltas);

  // optional bytes bitrate_bps_deltas = 102;
  bool has_bitrate_bps_deltas() const;
  void clear_bitrate_bps_deltas();
  const std::string& bitrate_bps_deltas() const;
  void set_bitrate_bps_deltas(const std::string& value);
  void set_bitrate_bps_deltas(std::string&& value);
  void set_bitrate_bps_deltas(const char* value);
  void set_bitrate_bps_deltas(const void* value, size_t size);
  std::string* mutable_bitrate_bps_deltas();
  std::string* release_bitrate_bps_deltas();
  void set_allocated_bitrate_bps_deltas(std::string* bitrate_bps_deltas);

  // optional bytes detector_state_deltas = 103;
  bool has_detector_state_deltas() const;
  void clear_detector_state_deltas();
  const std::string& detector_state_deltas() const;
  void set_detector_state_deltas(const std::string& value);
  void set_detector_state_deltas(std::string&& value);
  void set_detector_state_deltas(const char* value);
  void set_detector_state_deltas(const void* value, size_t size);
  std::string* mutable_detector_state_deltas();
  std::string* release_detector_state_deltas();
  void set_allocated_detector_state_deltas(std::string* detector_state_deltas);

  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms() const;
  void set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint32 bitrate_bps = 2;
  bool has_bitrate_bps() const;
  void clear_bitrate_bps();
  ::PROTOBUF_NAMESPACE_ID::uint32 bitrate_bps() const;
  void set_bitrate_bps(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional .webrtc.rtclog2.DelayBasedBweUpdates.DetectorState detector_state = 3;
  bool has_detector_state() const;
  void clear_detector_state();
  ::webrtc::rtclog2::DelayBasedBweUpdates_DetectorState detector_state() const;
  void set_detector_state(::webrtc::rtclog2::DelayBasedBweUpdates_DetectorState value);

  // optional uint32 number_of_deltas = 4;
  bool has_number_of_deltas() const;
  void clear_number_of_deltas();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_deltas() const;
  void set_number_of_deltas(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.DelayBasedBweUpdates)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_ms_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bitrate_bps_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detector_state_deltas_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bitrate_bps_;
  int detector_state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_deltas_;
  friend struct ::TableStruct_rtc_5fevent_5flog2_2eproto;
};
// -------------------------------------------------------------------

class RtpHeaderExtensionConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.RtpHeaderExtensionConfig) */ {
 public:
  RtpHeaderExtensionConfig();
  virtual ~RtpHeaderExtensionConfig();

  RtpHeaderExtensionConfig(const RtpHeaderExtensionConfig& from);
  RtpHeaderExtensionConfig(RtpHeaderExtensionConfig&& from) noexcept
    : RtpHeaderExtensionConfig() {
    *this = ::std::move(from);
  }

  inline RtpHeaderExtensionConfig& operator=(const RtpHeaderExtensionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtpHeaderExtensionConfig& operator=(RtpHeaderExtensionConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RtpHeaderExtensionConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RtpHeaderExtensionConfig* internal_default_instance() {
    return reinterpret_cast<const RtpHeaderExtensionConfig*>(
               &_RtpHeaderExtensionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RtpHeaderExtensionConfig& a, RtpHeaderExtensionConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(RtpHeaderExtensionConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RtpHeaderExtensionConfig* New() const final {
    return CreateMaybeMessage<RtpHeaderExtensionConfig>(nullptr);
  }

  RtpHeaderExtensionConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RtpHeaderExtensionConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RtpHeaderExtensionConfig& from);
  void MergeFrom(const RtpHeaderExtensionConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RtpHeaderExtensionConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webrtc.rtclog2.RtpHeaderExtensionConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransmissionTimeOffsetIdFieldNumber = 1,
    kAbsoluteSendTimeIdFieldNumber = 2,
    kTransportSequenceNumberIdFieldNumber = 3,
    kVideoRotationIdFieldNumber = 4,
    kAudioLevelIdFieldNumber = 5,
  };
  // optional int32 transmission_time_offset_id = 1;
  bool has_transmission_time_offset_id() const;
  void clear_transmission_time_offset_id();
  ::PROTOBUF_NAMESPACE_ID::int32 transmission_time_offset_id() const;
  void set_transmission_time_offset_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 absolute_send_time_id = 2;
  bool has_absolute_send_time_id() const;
  void clear_absolute_send_time_id();
  ::PROTOBUF_NAMESPACE_ID::int32 absolute_send_time_id() const;
  void set_absolute_send_time_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 transport_sequence_number_id = 3;
  bool has_transport_sequence_number_id() const;
  void clear_transport_sequence_number_id();
  ::PROTOBUF_NAMESPACE_ID::int32 transport_sequence_number_id() const;
  void set_transport_sequence_number_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 video_rotation_id = 4;
  bool has_video_rotation_id() const;
  void clear_video_rotation_id();
  ::PROTOBUF_NAMESPACE_ID::int32 video_rotation_id() const;
  void set_video_rotation_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 audio_level_id = 5;
  bool has_audio_level_id() const;
  void clear_audio_level_id();
  ::PROTOBUF_NAMESPACE_ID::int32 audio_level_id() const;
  void set_audio_level_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.RtpHeaderExtensionConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 transmission_time_offset_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 absolute_send_time_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 transport_sequence_number_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 video_rotation_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 audio_level_id_;
  friend struct ::TableStruct_rtc_5fevent_5flog2_2eproto;
};
// -------------------------------------------------------------------

class VideoRecvStreamConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.VideoRecvStreamConfig) */ {
 public:
  VideoRecvStreamConfig();
  virtual ~VideoRecvStreamConfig();

  VideoRecvStreamConfig(const VideoRecvStreamConfig& from);
  VideoRecvStreamConfig(VideoRecvStreamConfig&& from) noexcept
    : VideoRecvStreamConfig() {
    *this = ::std::move(from);
  }

  inline VideoRecvStreamConfig& operator=(const VideoRecvStreamConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoRecvStreamConfig& operator=(VideoRecvStreamConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const VideoRecvStreamConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoRecvStreamConfig* internal_default_instance() {
    return reinterpret_cast<const VideoRecvStreamConfig*>(
               &_VideoRecvStreamConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(VideoRecvStreamConfig& a, VideoRecvStreamConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoRecvStreamConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VideoRecvStreamConfig* New() const final {
    return CreateMaybeMessage<VideoRecvStreamConfig>(nullptr);
  }

  VideoRecvStreamConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VideoRecvStreamConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const VideoRecvStreamConfig& from);
  void MergeFrom(const VideoRecvStreamConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoRecvStreamConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webrtc.rtclog2.VideoRecvStreamConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderExtensionsFieldNumber = 5,
    kTimestampMsFieldNumber = 1,
    kRemoteSsrcFieldNumber = 2,
    kLocalSsrcFieldNumber = 3,
    kRtxSsrcFieldNumber = 4,
  };
  // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 5;
  bool has_header_extensions() const;
  void clear_header_extensions();
  const ::webrtc::rtclog2::RtpHeaderExtensionConfig& header_extensions() const;
  ::webrtc::rtclog2::RtpHeaderExtensionConfig* release_header_extensions();
  ::webrtc::rtclog2::RtpHeaderExtensionConfig* mutable_header_extensions();
  void set_allocated_header_extensions(::webrtc::rtclog2::RtpHeaderExtensionConfig* header_extensions);

  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms() const;
  void set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint32 remote_ssrc = 2;
  bool has_remote_ssrc() const;
  void clear_remote_ssrc();
  ::PROTOBUF_NAMESPACE_ID::uint32 remote_ssrc() const;
  void set_remote_ssrc(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 local_ssrc = 3;
  bool has_local_ssrc() const;
  void clear_local_ssrc();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_ssrc() const;
  void set_local_ssrc(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 rtx_ssrc = 4;
  bool has_rtx_ssrc() const;
  void clear_rtx_ssrc();
  ::PROTOBUF_NAMESPACE_ID::uint32 rtx_ssrc() const;
  void set_rtx_ssrc(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.VideoRecvStreamConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::webrtc::rtclog2::RtpHeaderExtensionConfig* header_extensions_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 remote_ssrc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_ssrc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rtx_ssrc_;
  friend struct ::TableStruct_rtc_5fevent_5flog2_2eproto;
};
// -------------------------------------------------------------------

class VideoSendStreamConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.VideoSendStreamConfig) */ {
 public:
  VideoSendStreamConfig();
  virtual ~VideoSendStreamConfig();

  VideoSendStreamConfig(const VideoSendStreamConfig& from);
  VideoSendStreamConfig(VideoSendStreamConfig&& from) noexcept
    : VideoSendStreamConfig() {
    *this = ::std::move(from);
  }

  inline VideoSendStreamConfig& operator=(const VideoSendStreamConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoSendStreamConfig& operator=(VideoSendStreamConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const VideoSendStreamConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoSendStreamConfig* internal_default_instance() {
    return reinterpret_cast<const VideoSendStreamConfig*>(
               &_VideoSendStreamConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(VideoSendStreamConfig& a, VideoSendStreamConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoSendStreamConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VideoSendStreamConfig* New() const final {
    return CreateMaybeMessage<VideoSendStreamConfig>(nullptr);
  }

  VideoSendStreamConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VideoSendStreamConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const VideoSendStreamConfig& from);
  void MergeFrom(const VideoSendStreamConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoSendStreamConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webrtc.rtclog2.VideoSendStreamConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderExtensionsFieldNumber = 4,
    kTimestampMsFieldNumber = 1,
    kSsrcFieldNumber = 2,
    kRtxSsrcFieldNumber = 3,
  };
  // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 4;
  bool has_header_extensions() const;
  void clear_header_extensions();
  const ::webrtc::rtclog2::RtpHeaderExtensionConfig& header_extensions() const;
  ::webrtc::rtclog2::RtpHeaderExtensionConfig* release_header_extensions();
  ::webrtc::rtclog2::RtpHeaderExtensionConfig* mutable_header_extensions();
  void set_allocated_header_extensions(::webrtc::rtclog2::RtpHeaderExtensionConfig* header_extensions);

  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms() const;
  void set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint32 ssrc = 2;
  bool has_ssrc() const;
  void clear_ssrc();
  ::PROTOBUF_NAMESPACE_ID::uint32 ssrc() const;
  void set_ssrc(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 rtx_ssrc = 3;
  bool has_rtx_ssrc() const;
  void clear_rtx_ssrc();
  ::PROTOBUF_NAMESPACE_ID::uint32 rtx_ssrc() const;
  void set_rtx_ssrc(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.VideoSendStreamConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::webrtc::rtclog2::RtpHeaderExtensionConfig* header_extensions_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ssrc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rtx_ssrc_;
  friend struct ::TableStruct_rtc_5fevent_5flog2_2eproto;
};
// -------------------------------------------------------------------

class AudioRecvStreamConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.AudioRecvStreamConfig) */ {
 public:
  AudioRecvStreamConfig();
  virtual ~AudioRecvStreamConfig();

  AudioRecvStreamConfig(const AudioRecvStreamConfig& from);
  AudioRecvStreamConfig(AudioRecvStreamConfig&& from) noexcept
    : AudioRecvStreamConfig() {
    *this = ::std::move(from);
  }

  inline AudioRecvStreamConfig& operator=(const AudioRecvStreamConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioRecvStreamConfig& operator=(AudioRecvStreamConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AudioRecvStreamConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioRecvStreamConfig* internal_default_instance() {
    return reinterpret_cast<const AudioRecvStreamConfig*>(
               &_AudioRecvStreamConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(AudioRecvStreamConfig& a, AudioRecvStreamConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioRecvStreamConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioRecvStreamConfig* New() const final {
    return CreateMaybeMessage<AudioRecvStreamConfig>(nullptr);
  }

  AudioRecvStreamConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioRecvStreamConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AudioRecvStreamConfig& from);
  void MergeFrom(const AudioRecvStreamConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AudioRecvStreamConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webrtc.rtclog2.AudioRecvStreamConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderExtensionsFieldNumber = 5,
    kTimestampMsFieldNumber = 1,
    kRemoteSsrcFieldNumber = 2,
    kLocalSsrcFieldNumber = 3,
  };
  // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 5;
  bool has_header_extensions() const;
  void clear_header_extensions();
  const ::webrtc::rtclog2::RtpHeaderExtensionConfig& header_extensions() const;
  ::webrtc::rtclog2::RtpHeaderExtensionConfig* release_header_extensions();
  ::webrtc::rtclog2::RtpHeaderExtensionConfig* mutable_header_extensions();
  void set_allocated_header_extensions(::webrtc::rtclog2::RtpHeaderExtensionConfig* header_extensions);

  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms() const;
  void set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint32 remote_ssrc = 2;
  bool has_remote_ssrc() const;
  void clear_remote_ssrc();
  ::PROTOBUF_NAMESPACE_ID::uint32 remote_ssrc() const;
  void set_remote_ssrc(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 local_ssrc = 3;
  bool has_local_ssrc() const;
  void clear_local_ssrc();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_ssrc() const;
  void set_local_ssrc(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.AudioRecvStreamConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::webrtc::rtclog2::RtpHeaderExtensionConfig* header_extensions_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 remote_ssrc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_ssrc_;
  friend struct ::TableStruct_rtc_5fevent_5flog2_2eproto;
};
// -------------------------------------------------------------------

class AudioSendStreamConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.AudioSendStreamConfig) */ {
 public:
  AudioSendStreamConfig();
  virtual ~AudioSendStreamConfig();

  AudioSendStreamConfig(const AudioSendStreamConfig& from);
  AudioSendStreamConfig(AudioSendStreamConfig&& from) noexcept
    : AudioSendStreamConfig() {
    *this = ::std::move(from);
  }

  inline AudioSendStreamConfig& operator=(const AudioSendStreamConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioSendStreamConfig& operator=(AudioSendStreamConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AudioSendStreamConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioSendStreamConfig* internal_default_instance() {
    return reinterpret_cast<const AudioSendStreamConfig*>(
               &_AudioSendStreamConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(AudioSendStreamConfig& a, AudioSendStreamConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioSendStreamConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioSendStreamConfig* New() const final {
    return CreateMaybeMessage<AudioSendStreamConfig>(nullptr);
  }

  AudioSendStreamConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioSendStreamConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AudioSendStreamConfig& from);
  void MergeFrom(const AudioSendStreamConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AudioSendStreamConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webrtc.rtclog2.AudioSendStreamConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderExtensionsFieldNumber = 4,
    kTimestampMsFieldNumber = 1,
    kSsrcFieldNumber = 2,
  };
  // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 4;
  bool has_header_extensions() const;
  void clear_header_extensions();
  const ::webrtc::rtclog2::RtpHeaderExtensionConfig& header_extensions() const;
  ::webrtc::rtclog2::RtpHeaderExtensionConfig* release_header_extensions();
  ::webrtc::rtclog2::RtpHeaderExtensionConfig* mutable_header_extensions();
  void set_allocated_header_extensions(::webrtc::rtclog2::RtpHeaderExtensionConfig* header_extensions);

  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms() const;
  void set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint32 ssrc = 2;
  bool has_ssrc() const;
  void clear_ssrc();
  ::PROTOBUF_NAMESPACE_ID::uint32 ssrc() const;
  void set_ssrc(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.AudioSendStreamConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::webrtc::rtclog2::RtpHeaderExtensionConfig* header_extensions_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ssrc_;
  friend struct ::TableStruct_rtc_5fevent_5flog2_2eproto;
};
// -------------------------------------------------------------------

class AudioNetworkAdaptations :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.AudioNetworkAdaptations) */ {
 public:
  AudioNetworkAdaptations();
  virtual ~AudioNetworkAdaptations();

  AudioNetworkAdaptations(const AudioNetworkAdaptations& from);
  AudioNetworkAdaptations(AudioNetworkAdaptations&& from) noexcept
    : AudioNetworkAdaptations() {
    *this = ::std::move(from);
  }

  inline AudioNetworkAdaptations& operator=(const AudioNetworkAdaptations& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioNetworkAdaptations& operator=(AudioNetworkAdaptations&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AudioNetworkAdaptations& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioNetworkAdaptations* internal_default_instance() {
    return reinterpret_cast<const AudioNetworkAdaptations*>(
               &_AudioNetworkAdaptations_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(AudioNetworkAdaptations& a, AudioNetworkAdaptations& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioNetworkAdaptations* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioNetworkAdaptations* New() const final {
    return CreateMaybeMessage<AudioNetworkAdaptations>(nullptr);
  }

  AudioNetworkAdaptations* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioNetworkAdaptations>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AudioNetworkAdaptations& from);
  void MergeFrom(const AudioNetworkAdaptations& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AudioNetworkAdaptations* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webrtc.rtclog2.AudioNetworkAdaptations";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampMsDeltasFieldNumber = 101,
    kBitrateBpsDeltasFieldNumber = 102,
    kFrameLengthMsDeltasFieldNumber = 103,
    kUplinkPacketLossFractionDeltasFieldNumber = 104,
    kEnableFecDeltasFieldNumber = 105,
    kEnableDtxDeltasFieldNumber = 106,
    kNumChannelsDeltasFieldNumber = 107,
    kTimestampMsFieldNumber = 1,
    kBitrateBpsFieldNumber = 2,
    kFrameLengthMsFieldNumber = 3,
    kUplinkPacketLossFractionFieldNumber = 4,
    kEnableFecFieldNumber = 5,
    kEnableDtxFieldNumber = 6,
    kNumChannelsFieldNumber = 7,
    kNumberOfDeltasFieldNumber = 8,
  };
  // optional bytes timestamp_ms_deltas = 101;
  bool has_timestamp_ms_deltas() const;
  void clear_timestamp_ms_deltas();
  const std::string& timestamp_ms_deltas() const;
  void set_timestamp_ms_deltas(const std::string& value);
  void set_timestamp_ms_deltas(std::string&& value);
  void set_timestamp_ms_deltas(const char* value);
  void set_timestamp_ms_deltas(const void* value, size_t size);
  std::string* mutable_timestamp_ms_deltas();
  std::string* release_timestamp_ms_deltas();
  void set_allocated_timestamp_ms_deltas(std::string* timestamp_ms_deltas);

  // optional bytes bitrate_bps_deltas = 102;
  bool has_bitrate_bps_deltas() const;
  void clear_bitrate_bps_deltas();
  const std::string& bitrate_bps_deltas() const;
  void set_bitrate_bps_deltas(const std::string& value);
  void set_bitrate_bps_deltas(std::string&& value);
  void set_bitrate_bps_deltas(const char* value);
  void set_bitrate_bps_deltas(const void* value, size_t size);
  std::string* mutable_bitrate_bps_deltas();
  std::string* release_bitrate_bps_deltas();
  void set_allocated_bitrate_bps_deltas(std::string* bitrate_bps_deltas);

  // optional bytes frame_length_ms_deltas = 103;
  bool has_frame_length_ms_deltas() const;
  void clear_frame_length_ms_deltas();
  const std::string& frame_length_ms_deltas() const;
  void set_frame_length_ms_deltas(const std::string& value);
  void set_frame_length_ms_deltas(std::string&& value);
  void set_frame_length_ms_deltas(const char* value);
  void set_frame_length_ms_deltas(const void* value, size_t size);
  std::string* mutable_frame_length_ms_deltas();
  std::string* release_frame_length_ms_deltas();
  void set_allocated_frame_length_ms_deltas(std::string* frame_length_ms_deltas);

  // optional bytes uplink_packet_loss_fraction_deltas = 104;
  bool has_uplink_packet_loss_fraction_deltas() const;
  void clear_uplink_packet_loss_fraction_deltas();
  const std::string& uplink_packet_loss_fraction_deltas() const;
  void set_uplink_packet_loss_fraction_deltas(const std::string& value);
  void set_uplink_packet_loss_fraction_deltas(std::string&& value);
  void set_uplink_packet_loss_fraction_deltas(const char* value);
  void set_uplink_packet_loss_fraction_deltas(const void* value, size_t size);
  std::string* mutable_uplink_packet_loss_fraction_deltas();
  std::string* release_uplink_packet_loss_fraction_deltas();
  void set_allocated_uplink_packet_loss_fraction_deltas(std::string* uplink_packet_loss_fraction_deltas);

  // optional bytes enable_fec_deltas = 105;
  bool has_enable_fec_deltas() const;
  void clear_enable_fec_deltas();
  const std::string& enable_fec_deltas() const;
  void set_enable_fec_deltas(const std::string& value);
  void set_enable_fec_deltas(std::string&& value);
  void set_enable_fec_deltas(const char* value);
  void set_enable_fec_deltas(const void* value, size_t size);
  std::string* mutable_enable_fec_deltas();
  std::string* release_enable_fec_deltas();
  void set_allocated_enable_fec_deltas(std::string* enable_fec_deltas);

  // optional bytes enable_dtx_deltas = 106;
  bool has_enable_dtx_deltas() const;
  void clear_enable_dtx_deltas();
  const std::string& enable_dtx_deltas() const;
  void set_enable_dtx_deltas(const std::string& value);
  void set_enable_dtx_deltas(std::string&& value);
  void set_enable_dtx_deltas(const char* value);
  void set_enable_dtx_deltas(const void* value, size_t size);
  std::string* mutable_enable_dtx_deltas();
  std::string* release_enable_dtx_deltas();
  void set_allocated_enable_dtx_deltas(std::string* enable_dtx_deltas);

  // optional bytes num_channels_deltas = 107;
  bool has_num_channels_deltas() const;
  void clear_num_channels_deltas();
  const std::string& num_channels_deltas() const;
  void set_num_channels_deltas(const std::string& value);
  void set_num_channels_deltas(std::string&& value);
  void set_num_channels_deltas(const char* value);
  void set_num_channels_deltas(const void* value, size_t size);
  std::string* mutable_num_channels_deltas();
  std::string* release_num_channels_deltas();
  void set_allocated_num_channels_deltas(std::string* num_channels_deltas);

  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms() const;
  void set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 bitrate_bps = 2;
  bool has_bitrate_bps() const;
  void clear_bitrate_bps();
  ::PROTOBUF_NAMESPACE_ID::int32 bitrate_bps() const;
  void set_bitrate_bps(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 frame_length_ms = 3;
  bool has_frame_length_ms() const;
  void clear_frame_length_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_length_ms() const;
  void set_frame_length_ms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 uplink_packet_loss_fraction = 4;
  bool has_uplink_packet_loss_fraction() const;
  void clear_uplink_packet_loss_fraction();
  ::PROTOBUF_NAMESPACE_ID::uint32 uplink_packet_loss_fraction() const;
  void set_uplink_packet_loss_fraction(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional bool enable_fec = 5;
  bool has_enable_fec() const;
  void clear_enable_fec();
  bool enable_fec() const;
  void set_enable_fec(bool value);

  // optional bool enable_dtx = 6;
  bool has_enable_dtx() const;
  void clear_enable_dtx();
  bool enable_dtx() const;
  void set_enable_dtx(bool value);

  // optional uint32 num_channels = 7;
  bool has_num_channels() const;
  void clear_num_channels();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_channels() const;
  void set_num_channels(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 number_of_deltas = 8;
  bool has_number_of_deltas() const;
  void clear_number_of_deltas();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_deltas() const;
  void set_number_of_deltas(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.AudioNetworkAdaptations)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_ms_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bitrate_bps_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_length_ms_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uplink_packet_loss_fraction_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enable_fec_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enable_dtx_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr num_channels_deltas_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 bitrate_bps_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_length_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uplink_packet_loss_fraction_;
  bool enable_fec_;
  bool enable_dtx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_channels_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_deltas_;
  friend struct ::TableStruct_rtc_5fevent_5flog2_2eproto;
};
// -------------------------------------------------------------------

class BweProbeCluster :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.BweProbeCluster) */ {
 public:
  BweProbeCluster();
  virtual ~BweProbeCluster();

  BweProbeCluster(const BweProbeCluster& from);
  BweProbeCluster(BweProbeCluster&& from) noexcept
    : BweProbeCluster() {
    *this = ::std::move(from);
  }

  inline BweProbeCluster& operator=(const BweProbeCluster& from) {
    CopyFrom(from);
    return *this;
  }
  inline BweProbeCluster& operator=(BweProbeCluster&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BweProbeCluster& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BweProbeCluster* internal_default_instance() {
    return reinterpret_cast<const BweProbeCluster*>(
               &_BweProbeCluster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(BweProbeCluster& a, BweProbeCluster& b) {
    a.Swap(&b);
  }
  inline void Swap(BweProbeCluster* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BweProbeCluster* New() const final {
    return CreateMaybeMessage<BweProbeCluster>(nullptr);
  }

  BweProbeCluster* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BweProbeCluster>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BweProbeCluster& from);
  void MergeFrom(const BweProbeCluster& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BweProbeCluster* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webrtc.rtclog2.BweProbeCluster";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampMsFieldNumber = 1,
    kIdFieldNumber = 2,
    kBitrateBpsFieldNumber = 3,
    kMinPacketsFieldNumber = 4,
    kMinBytesFieldNumber = 5,
  };
  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms() const;
  void set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint32 id = 2;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 bitrate_bps = 3;
  bool has_bitrate_bps() const;
  void clear_bitrate_bps();
  ::PROTOBUF_NAMESPACE_ID::uint32 bitrate_bps() const;
  void set_bitrate_bps(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 min_packets = 4;
  bool has_min_packets() const;
  void clear_min_packets();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_packets() const;
  void set_min_packets(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 min_bytes = 5;
  bool has_min_bytes() const;
  void clear_min_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_bytes() const;
  void set_min_bytes(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.BweProbeCluster)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bitrate_bps_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_packets_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_bytes_;
  friend struct ::TableStruct_rtc_5fevent_5flog2_2eproto;
};
// -------------------------------------------------------------------

class BweProbeResultSuccess :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.BweProbeResultSuccess) */ {
 public:
  BweProbeResultSuccess();
  virtual ~BweProbeResultSuccess();

  BweProbeResultSuccess(const BweProbeResultSuccess& from);
  BweProbeResultSuccess(BweProbeResultSuccess&& from) noexcept
    : BweProbeResultSuccess() {
    *this = ::std::move(from);
  }

  inline BweProbeResultSuccess& operator=(const BweProbeResultSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline BweProbeResultSuccess& operator=(BweProbeResultSuccess&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BweProbeResultSuccess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BweProbeResultSuccess* internal_default_instance() {
    return reinterpret_cast<const BweProbeResultSuccess*>(
               &_BweProbeResultSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(BweProbeResultSuccess& a, BweProbeResultSuccess& b) {
    a.Swap(&b);
  }
  inline void Swap(BweProbeResultSuccess* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BweProbeResultSuccess* New() const final {
    return CreateMaybeMessage<BweProbeResultSuccess>(nullptr);
  }

  BweProbeResultSuccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BweProbeResultSuccess>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BweProbeResultSuccess& from);
  void MergeFrom(const BweProbeResultSuccess& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BweProbeResultSuccess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webrtc.rtclog2.BweProbeResultSuccess";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampMsFieldNumber = 1,
    kIdFieldNumber = 2,
    kBitrateBpsFieldNumber = 3,
  };
  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms() const;
  void set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint32 id = 2;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 bitrate_bps = 3;
  bool has_bitrate_bps() const;
  void clear_bitrate_bps();
  ::PROTOBUF_NAMESPACE_ID::uint32 bitrate_bps() const;
  void set_bitrate_bps(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.BweProbeResultSuccess)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bitrate_bps_;
  friend struct ::TableStruct_rtc_5fevent_5flog2_2eproto;
};
// -------------------------------------------------------------------

class BweProbeResultFailure :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.BweProbeResultFailure) */ {
 public:
  BweProbeResultFailure();
  virtual ~BweProbeResultFailure();

  BweProbeResultFailure(const BweProbeResultFailure& from);
  BweProbeResultFailure(BweProbeResultFailure&& from) noexcept
    : BweProbeResultFailure() {
    *this = ::std::move(from);
  }

  inline BweProbeResultFailure& operator=(const BweProbeResultFailure& from) {
    CopyFrom(from);
    return *this;
  }
  inline BweProbeResultFailure& operator=(BweProbeResultFailure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BweProbeResultFailure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BweProbeResultFailure* internal_default_instance() {
    return reinterpret_cast<const BweProbeResultFailure*>(
               &_BweProbeResultFailure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(BweProbeResultFailure& a, BweProbeResultFailure& b) {
    a.Swap(&b);
  }
  inline void Swap(BweProbeResultFailure* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BweProbeResultFailure* New() const final {
    return CreateMaybeMessage<BweProbeResultFailure>(nullptr);
  }

  BweProbeResultFailure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BweProbeResultFailure>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BweProbeResultFailure& from);
  void MergeFrom(const BweProbeResultFailure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BweProbeResultFailure* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webrtc.rtclog2.BweProbeResultFailure";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef BweProbeResultFailure_FailureReason FailureReason;
  static constexpr FailureReason UNKNOWN =
    BweProbeResultFailure_FailureReason_UNKNOWN;
  static constexpr FailureReason INVALID_SEND_RECEIVE_INTERVAL =
    BweProbeResultFailure_FailureReason_INVALID_SEND_RECEIVE_INTERVAL;
  static constexpr FailureReason INVALID_SEND_RECEIVE_RATIO =
    BweProbeResultFailure_FailureReason_INVALID_SEND_RECEIVE_RATIO;
  static constexpr FailureReason TIMEOUT =
    BweProbeResultFailure_FailureReason_TIMEOUT;
  static inline bool FailureReason_IsValid(int value) {
    return BweProbeResultFailure_FailureReason_IsValid(value);
  }
  static constexpr FailureReason FailureReason_MIN =
    BweProbeResultFailure_FailureReason_FailureReason_MIN;
  static constexpr FailureReason FailureReason_MAX =
    BweProbeResultFailure_FailureReason_FailureReason_MAX;
  static constexpr int FailureReason_ARRAYSIZE =
    BweProbeResultFailure_FailureReason_FailureReason_ARRAYSIZE;
  template<typename T>
  static inline const std::string& FailureReason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FailureReason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FailureReason_Name.");
    return BweProbeResultFailure_FailureReason_Name(enum_t_value);
  }
  static inline bool FailureReason_Parse(const std::string& name,
      FailureReason* value) {
    return BweProbeResultFailure_FailureReason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampMsFieldNumber = 1,
    kIdFieldNumber = 2,
    kFailureFieldNumber = 3,
  };
  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms() const;
  void set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint32 id = 2;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional .webrtc.rtclog2.BweProbeResultFailure.FailureReason failure = 3;
  bool has_failure() const;
  void clear_failure();
  ::webrtc::rtclog2::BweProbeResultFailure_FailureReason failure() const;
  void set_failure(::webrtc::rtclog2::BweProbeResultFailure_FailureReason value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.BweProbeResultFailure)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  int failure_;
  friend struct ::TableStruct_rtc_5fevent_5flog2_2eproto;
};
// -------------------------------------------------------------------

class AlrState :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.AlrState) */ {
 public:
  AlrState();
  virtual ~AlrState();

  AlrState(const AlrState& from);
  AlrState(AlrState&& from) noexcept
    : AlrState() {
    *this = ::std::move(from);
  }

  inline AlrState& operator=(const AlrState& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlrState& operator=(AlrState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AlrState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlrState* internal_default_instance() {
    return reinterpret_cast<const AlrState*>(
               &_AlrState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(AlrState& a, AlrState& b) {
    a.Swap(&b);
  }
  inline void Swap(AlrState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlrState* New() const final {
    return CreateMaybeMessage<AlrState>(nullptr);
  }

  AlrState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlrState>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AlrState& from);
  void MergeFrom(const AlrState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AlrState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webrtc.rtclog2.AlrState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampMsFieldNumber = 1,
    kInAlrFieldNumber = 2,
  };
  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms() const;
  void set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional bool in_alr = 2;
  bool has_in_alr() const;
  void clear_in_alr();
  bool in_alr() const;
  void set_in_alr(bool value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.AlrState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms_;
  bool in_alr_;
  friend struct ::TableStruct_rtc_5fevent_5flog2_2eproto;
};
// -------------------------------------------------------------------

class IceCandidatePairConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.IceCandidatePairConfig) */ {
 public:
  IceCandidatePairConfig();
  virtual ~IceCandidatePairConfig();

  IceCandidatePairConfig(const IceCandidatePairConfig& from);
  IceCandidatePairConfig(IceCandidatePairConfig&& from) noexcept
    : IceCandidatePairConfig() {
    *this = ::std::move(from);
  }

  inline IceCandidatePairConfig& operator=(const IceCandidatePairConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline IceCandidatePairConfig& operator=(IceCandidatePairConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IceCandidatePairConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IceCandidatePairConfig* internal_default_instance() {
    return reinterpret_cast<const IceCandidatePairConfig*>(
               &_IceCandidatePairConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(IceCandidatePairConfig& a, IceCandidatePairConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(IceCandidatePairConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IceCandidatePairConfig* New() const final {
    return CreateMaybeMessage<IceCandidatePairConfig>(nullptr);
  }

  IceCandidatePairConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IceCandidatePairConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IceCandidatePairConfig& from);
  void MergeFrom(const IceCandidatePairConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IceCandidatePairConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webrtc.rtclog2.IceCandidatePairConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfigType;
  static constexpr IceCandidatePairConfigType UNKNOWN_CONFIG_TYPE =
    IceCandidatePairConfig_IceCandidatePairConfigType_UNKNOWN_CONFIG_TYPE;
  static constexpr IceCandidatePairConfigType ADDED =
    IceCandidatePairConfig_IceCandidatePairConfigType_ADDED;
  static constexpr IceCandidatePairConfigType UPDATED =
    IceCandidatePairConfig_IceCandidatePairConfigType_UPDATED;
  static constexpr IceCandidatePairConfigType DESTROYED =
    IceCandidatePairConfig_IceCandidatePairConfigType_DESTROYED;
  static constexpr IceCandidatePairConfigType SELECTED =
    IceCandidatePairConfig_IceCandidatePairConfigType_SELECTED;
  static inline bool IceCandidatePairConfigType_IsValid(int value) {
    return IceCandidatePairConfig_IceCandidatePairConfigType_IsValid(value);
  }
  static constexpr IceCandidatePairConfigType IceCandidatePairConfigType_MIN =
    IceCandidatePairConfig_IceCandidatePairConfigType_IceCandidatePairConfigType_MIN;
  static constexpr IceCandidatePairConfigType IceCandidatePairConfigType_MAX =
    IceCandidatePairConfig_IceCandidatePairConfigType_IceCandidatePairConfigType_MAX;
  static constexpr int IceCandidatePairConfigType_ARRAYSIZE =
    IceCandidatePairConfig_IceCandidatePairConfigType_IceCandidatePairConfigType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& IceCandidatePairConfigType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, IceCandidatePairConfigType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function IceCandidatePairConfigType_Name.");
    return IceCandidatePairConfig_IceCandidatePairConfigType_Name(enum_t_value);
  }
  static inline bool IceCandidatePairConfigType_Parse(const std::string& name,
      IceCandidatePairConfigType* value) {
    return IceCandidatePairConfig_IceCandidatePairConfigType_Parse(name, value);
  }

  typedef IceCandidatePairConfig_IceCandidateType IceCandidateType;
  static constexpr IceCandidateType UNKNOWN_CANDIDATE_TYPE =
    IceCandidatePairConfig_IceCandidateType_UNKNOWN_CANDIDATE_TYPE;
  static constexpr IceCandidateType LOCAL =
    IceCandidatePairConfig_IceCandidateType_LOCAL;
  static constexpr IceCandidateType STUN =
    IceCandidatePairConfig_IceCandidateType_STUN;
  static constexpr IceCandidateType PRFLX =
    IceCandidatePairConfig_IceCandidateType_PRFLX;
  static constexpr IceCandidateType RELAY =
    IceCandidatePairConfig_IceCandidateType_RELAY;
  static inline bool IceCandidateType_IsValid(int value) {
    return IceCandidatePairConfig_IceCandidateType_IsValid(value);
  }
  static constexpr IceCandidateType IceCandidateType_MIN =
    IceCandidatePairConfig_IceCandidateType_IceCandidateType_MIN;
  static constexpr IceCandidateType IceCandidateType_MAX =
    IceCandidatePairConfig_IceCandidateType_IceCandidateType_MAX;
  static constexpr int IceCandidateType_ARRAYSIZE =
    IceCandidatePairConfig_IceCandidateType_IceCandidateType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& IceCandidateType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, IceCandidateType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function IceCandidateType_Name.");
    return IceCandidatePairConfig_IceCandidateType_Name(enum_t_value);
  }
  static inline bool IceCandidateType_Parse(const std::string& name,
      IceCandidateType* value) {
    return IceCandidatePairConfig_IceCandidateType_Parse(name, value);
  }

  typedef IceCandidatePairConfig_Protocol Protocol;
  static constexpr Protocol UNKNOWN_PROTOCOL =
    IceCandidatePairConfig_Protocol_UNKNOWN_PROTOCOL;
  static constexpr Protocol UDP =
    IceCandidatePairConfig_Protocol_UDP;
  static constexpr Protocol TCP =
    IceCandidatePairConfig_Protocol_TCP;
  static constexpr Protocol SSLTCP =
    IceCandidatePairConfig_Protocol_SSLTCP;
  static constexpr Protocol TLS =
    IceCandidatePairConfig_Protocol_TLS;
  static inline bool Protocol_IsValid(int value) {
    return IceCandidatePairConfig_Protocol_IsValid(value);
  }
  static constexpr Protocol Protocol_MIN =
    IceCandidatePairConfig_Protocol_Protocol_MIN;
  static constexpr Protocol Protocol_MAX =
    IceCandidatePairConfig_Protocol_Protocol_MAX;
  static constexpr int Protocol_ARRAYSIZE =
    IceCandidatePairConfig_Protocol_Protocol_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Protocol_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Protocol>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Protocol_Name.");
    return IceCandidatePairConfig_Protocol_Name(enum_t_value);
  }
  static inline bool Protocol_Parse(const std::string& name,
      Protocol* value) {
    return IceCandidatePairConfig_Protocol_Parse(name, value);
  }

  typedef IceCandidatePairConfig_AddressFamily AddressFamily;
  static constexpr AddressFamily UNKNOWN_ADDRESS_FAMILY =
    IceCandidatePairConfig_AddressFamily_UNKNOWN_ADDRESS_FAMILY;
  static constexpr AddressFamily IPV4 =
    IceCandidatePairConfig_AddressFamily_IPV4;
  static constexpr AddressFamily IPV6 =
    IceCandidatePairConfig_AddressFamily_IPV6;
  static inline bool AddressFamily_IsValid(int value) {
    return IceCandidatePairConfig_AddressFamily_IsValid(value);
  }
  static constexpr AddressFamily AddressFamily_MIN =
    IceCandidatePairConfig_AddressFamily_AddressFamily_MIN;
  static constexpr AddressFamily AddressFamily_MAX =
    IceCandidatePairConfig_AddressFamily_AddressFamily_MAX;
  static constexpr int AddressFamily_ARRAYSIZE =
    IceCandidatePairConfig_AddressFamily_AddressFamily_ARRAYSIZE;
  template<typename T>
  static inline const std::string& AddressFamily_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AddressFamily>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AddressFamily_Name.");
    return IceCandidatePairConfig_AddressFamily_Name(enum_t_value);
  }
  static inline bool AddressFamily_Parse(const std::string& name,
      AddressFamily* value) {
    return IceCandidatePairConfig_AddressFamily_Parse(name, value);
  }

  typedef IceCandidatePairConfig_NetworkType NetworkType;
  static constexpr NetworkType UNKNOWN_NETWORK_TYPE =
    IceCandidatePairConfig_NetworkType_UNKNOWN_NETWORK_TYPE;
  static constexpr NetworkType ETHERNET =
    IceCandidatePairConfig_NetworkType_ETHERNET;
  static constexpr NetworkType WIFI =
    IceCandidatePairConfig_NetworkType_WIFI;
  static constexpr NetworkType CELLULAR =
    IceCandidatePairConfig_NetworkType_CELLULAR;
  static constexpr NetworkType VPN =
    IceCandidatePairConfig_NetworkType_VPN;
  static constexpr NetworkType LOOPBACK =
    IceCandidatePairConfig_NetworkType_LOOPBACK;
  static inline bool NetworkType_IsValid(int value) {
    return IceCandidatePairConfig_NetworkType_IsValid(value);
  }
  static constexpr NetworkType NetworkType_MIN =
    IceCandidatePairConfig_NetworkType_NetworkType_MIN;
  static constexpr NetworkType NetworkType_MAX =
    IceCandidatePairConfig_NetworkType_NetworkType_MAX;
  static constexpr int NetworkType_ARRAYSIZE =
    IceCandidatePairConfig_NetworkType_NetworkType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& NetworkType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NetworkType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NetworkType_Name.");
    return IceCandidatePairConfig_NetworkType_Name(enum_t_value);
  }
  static inline bool NetworkType_Parse(const std::string& name,
      NetworkType* value) {
    return IceCandidatePairConfig_NetworkType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampMsFieldNumber = 1,
    kConfigTypeFieldNumber = 2,
    kCandidatePairIdFieldNumber = 3,
    kLocalCandidateTypeFieldNumber = 4,
    kLocalRelayProtocolFieldNumber = 5,
    kLocalNetworkTypeFieldNumber = 6,
    kLocalAddressFamilyFieldNumber = 7,
    kRemoteCandidateTypeFieldNumber = 8,
    kRemoteAddressFamilyFieldNumber = 9,
    kCandidatePairProtocolFieldNumber = 10,
  };
  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms() const;
  void set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidatePairConfigType config_type = 2;
  bool has_config_type() const;
  void clear_config_type();
  ::webrtc::rtclog2::IceCandidatePairConfig_IceCandidatePairConfigType config_type() const;
  void set_config_type(::webrtc::rtclog2::IceCandidatePairConfig_IceCandidatePairConfigType value);

  // optional uint32 candidate_pair_id = 3;
  bool has_candidate_pair_id() const;
  void clear_candidate_pair_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 candidate_pair_id() const;
  void set_candidate_pair_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidateType local_candidate_type = 4;
  bool has_local_candidate_type() const;
  void clear_local_candidate_type();
  ::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType local_candidate_type() const;
  void set_local_candidate_type(::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType value);

  // optional .webrtc.rtclog2.IceCandidatePairConfig.Protocol local_relay_protocol = 5;
  bool has_local_relay_protocol() const;
  void clear_local_relay_protocol();
  ::webrtc::rtclog2::IceCandidatePairConfig_Protocol local_relay_protocol() const;
  void set_local_relay_protocol(::webrtc::rtclog2::IceCandidatePairConfig_Protocol value);

  // optional .webrtc.rtclog2.IceCandidatePairConfig.NetworkType local_network_type = 6;
  bool has_local_network_type() const;
  void clear_local_network_type();
  ::webrtc::rtclog2::IceCandidatePairConfig_NetworkType local_network_type() const;
  void set_local_network_type(::webrtc::rtclog2::IceCandidatePairConfig_NetworkType value);

  // optional .webrtc.rtclog2.IceCandidatePairConfig.AddressFamily local_address_family = 7;
  bool has_local_address_family() const;
  void clear_local_address_family();
  ::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily local_address_family() const;
  void set_local_address_family(::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily value);

  // optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidateType remote_candidate_type = 8;
  bool has_remote_candidate_type() const;
  void clear_remote_candidate_type();
  ::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType remote_candidate_type() const;
  void set_remote_candidate_type(::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType value);

  // optional .webrtc.rtclog2.IceCandidatePairConfig.AddressFamily remote_address_family = 9;
  bool has_remote_address_family() const;
  void clear_remote_address_family();
  ::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily remote_address_family() const;
  void set_remote_address_family(::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily value);

  // optional .webrtc.rtclog2.IceCandidatePairConfig.Protocol candidate_pair_protocol = 10;
  bool has_candidate_pair_protocol() const;
  void clear_candidate_pair_protocol();
  ::webrtc::rtclog2::IceCandidatePairConfig_Protocol candidate_pair_protocol() const;
  void set_candidate_pair_protocol(::webrtc::rtclog2::IceCandidatePairConfig_Protocol value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.IceCandidatePairConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms_;
  int config_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 candidate_pair_id_;
  int local_candidate_type_;
  int local_relay_protocol_;
  int local_network_type_;
  int local_address_family_;
  int remote_candidate_type_;
  int remote_address_family_;
  int candidate_pair_protocol_;
  friend struct ::TableStruct_rtc_5fevent_5flog2_2eproto;
};
// -------------------------------------------------------------------

class IceCandidatePairEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.IceCandidatePairEvent) */ {
 public:
  IceCandidatePairEvent();
  virtual ~IceCandidatePairEvent();

  IceCandidatePairEvent(const IceCandidatePairEvent& from);
  IceCandidatePairEvent(IceCandidatePairEvent&& from) noexcept
    : IceCandidatePairEvent() {
    *this = ::std::move(from);
  }

  inline IceCandidatePairEvent& operator=(const IceCandidatePairEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline IceCandidatePairEvent& operator=(IceCandidatePairEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IceCandidatePairEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IceCandidatePairEvent* internal_default_instance() {
    return reinterpret_cast<const IceCandidatePairEvent*>(
               &_IceCandidatePairEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(IceCandidatePairEvent& a, IceCandidatePairEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(IceCandidatePairEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IceCandidatePairEvent* New() const final {
    return CreateMaybeMessage<IceCandidatePairEvent>(nullptr);
  }

  IceCandidatePairEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IceCandidatePairEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IceCandidatePairEvent& from);
  void MergeFrom(const IceCandidatePairEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IceCandidatePairEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webrtc.rtclog2.IceCandidatePairEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEventType;
  static constexpr IceCandidatePairEventType UNKNOWN_CHECK_TYPE =
    IceCandidatePairEvent_IceCandidatePairEventType_UNKNOWN_CHECK_TYPE;
  static constexpr IceCandidatePairEventType CHECK_SENT =
    IceCandidatePairEvent_IceCandidatePairEventType_CHECK_SENT;
  static constexpr IceCandidatePairEventType CHECK_RECEIVED =
    IceCandidatePairEvent_IceCandidatePairEventType_CHECK_RECEIVED;
  static constexpr IceCandidatePairEventType CHECK_RESPONSE_SENT =
    IceCandidatePairEvent_IceCandidatePairEventType_CHECK_RESPONSE_SENT;
  static constexpr IceCandidatePairEventType CHECK_RESPONSE_RECEIVED =
    IceCandidatePairEvent_IceCandidatePairEventType_CHECK_RESPONSE_RECEIVED;
  static inline bool IceCandidatePairEventType_IsValid(int value) {
    return IceCandidatePairEvent_IceCandidatePairEventType_IsValid(value);
  }
  static constexpr IceCandidatePairEventType IceCandidatePairEventType_MIN =
    IceCandidatePairEvent_IceCandidatePairEventType_IceCandidatePairEventType_MIN;
  static constexpr IceCandidatePairEventType IceCandidatePairEventType_MAX =
    IceCandidatePairEvent_IceCandidatePairEventType_IceCandidatePairEventType_MAX;
  static constexpr int IceCandidatePairEventType_ARRAYSIZE =
    IceCandidatePairEvent_IceCandidatePairEventType_IceCandidatePairEventType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& IceCandidatePairEventType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, IceCandidatePairEventType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function IceCandidatePairEventType_Name.");
    return IceCandidatePairEvent_IceCandidatePairEventType_Name(enum_t_value);
  }
  static inline bool IceCandidatePairEventType_Parse(const std::string& name,
      IceCandidatePairEventType* value) {
    return IceCandidatePairEvent_IceCandidatePairEventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampMsFieldNumber = 1,
    kEventTypeFieldNumber = 2,
    kCandidatePairIdFieldNumber = 3,
    kTransactionIdFieldNumber = 4,
  };
  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms() const;
  void set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .webrtc.rtclog2.IceCandidatePairEvent.IceCandidatePairEventType event_type = 2;
  bool has_event_type() const;
  void clear_event_type();
  ::webrtc::rtclog2::IceCandidatePairEvent_IceCandidatePairEventType event_type() const;
  void set_event_type(::webrtc::rtclog2::IceCandidatePairEvent_IceCandidatePairEventType value);

  // optional uint32 candidate_pair_id = 3;
  bool has_candidate_pair_id() const;
  void clear_candidate_pair_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 candidate_pair_id() const;
  void set_candidate_pair_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 transaction_id = 4;
  bool has_transaction_id() const;
  void clear_transaction_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 transaction_id() const;
  void set_transaction_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.IceCandidatePairEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms_;
  int event_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 candidate_pair_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 transaction_id_;
  friend struct ::TableStruct_rtc_5fevent_5flog2_2eproto;
};
// -------------------------------------------------------------------

class DtlsTransportStateEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.DtlsTransportStateEvent) */ {
 public:
  DtlsTransportStateEvent();
  virtual ~DtlsTransportStateEvent();

  DtlsTransportStateEvent(const DtlsTransportStateEvent& from);
  DtlsTransportStateEvent(DtlsTransportStateEvent&& from) noexcept
    : DtlsTransportStateEvent() {
    *this = ::std::move(from);
  }

  inline DtlsTransportStateEvent& operator=(const DtlsTransportStateEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline DtlsTransportStateEvent& operator=(DtlsTransportStateEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DtlsTransportStateEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DtlsTransportStateEvent* internal_default_instance() {
    return reinterpret_cast<const DtlsTransportStateEvent*>(
               &_DtlsTransportStateEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(DtlsTransportStateEvent& a, DtlsTransportStateEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(DtlsTransportStateEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DtlsTransportStateEvent* New() const final {
    return CreateMaybeMessage<DtlsTransportStateEvent>(nullptr);
  }

  DtlsTransportStateEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DtlsTransportStateEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DtlsTransportStateEvent& from);
  void MergeFrom(const DtlsTransportStateEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DtlsTransportStateEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webrtc.rtclog2.DtlsTransportStateEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DtlsTransportStateEvent_DtlsTransportState DtlsTransportState;
  static constexpr DtlsTransportState UNKNOWN_DTLS_TRANSPORT_STATE =
    DtlsTransportStateEvent_DtlsTransportState_UNKNOWN_DTLS_TRANSPORT_STATE;
  static constexpr DtlsTransportState DTLS_TRANSPORT_NEW =
    DtlsTransportStateEvent_DtlsTransportState_DTLS_TRANSPORT_NEW;
  static constexpr DtlsTransportState DTLS_TRANSPORT_CONNECTING =
    DtlsTransportStateEvent_DtlsTransportState_DTLS_TRANSPORT_CONNECTING;
  static constexpr DtlsTransportState DTLS_TRANSPORT_CONNECTED =
    DtlsTransportStateEvent_DtlsTransportState_DTLS_TRANSPORT_CONNECTED;
  static constexpr DtlsTransportState DTLS_TRANSPORT_CLOSED =
    DtlsTransportStateEvent_DtlsTransportState_DTLS_TRANSPORT_CLOSED;
  static constexpr DtlsTransportState DTLS_TRANSPORT_FAILED =
    DtlsTransportStateEvent_DtlsTransportState_DTLS_TRANSPORT_FAILED;
  static inline bool DtlsTransportState_IsValid(int value) {
    return DtlsTransportStateEvent_DtlsTransportState_IsValid(value);
  }
  static constexpr DtlsTransportState DtlsTransportState_MIN =
    DtlsTransportStateEvent_DtlsTransportState_DtlsTransportState_MIN;
  static constexpr DtlsTransportState DtlsTransportState_MAX =
    DtlsTransportStateEvent_DtlsTransportState_DtlsTransportState_MAX;
  static constexpr int DtlsTransportState_ARRAYSIZE =
    DtlsTransportStateEvent_DtlsTransportState_DtlsTransportState_ARRAYSIZE;
  template<typename T>
  static inline const std::string& DtlsTransportState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DtlsTransportState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DtlsTransportState_Name.");
    return DtlsTransportStateEvent_DtlsTransportState_Name(enum_t_value);
  }
  static inline bool DtlsTransportState_Parse(const std::string& name,
      DtlsTransportState* value) {
    return DtlsTransportStateEvent_DtlsTransportState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampMsFieldNumber = 1,
    kDtlsTransportStateFieldNumber = 2,
  };
  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms() const;
  void set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .webrtc.rtclog2.DtlsTransportStateEvent.DtlsTransportState dtls_transport_state = 2;
  bool has_dtls_transport_state() const;
  void clear_dtls_transport_state();
  ::webrtc::rtclog2::DtlsTransportStateEvent_DtlsTransportState dtls_transport_state() const;
  void set_dtls_transport_state(::webrtc::rtclog2::DtlsTransportStateEvent_DtlsTransportState value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.DtlsTransportStateEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms_;
  int dtls_transport_state_;
  friend struct ::TableStruct_rtc_5fevent_5flog2_2eproto;
};
// -------------------------------------------------------------------

class DtlsWritableState :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.DtlsWritableState) */ {
 public:
  DtlsWritableState();
  virtual ~DtlsWritableState();

  DtlsWritableState(const DtlsWritableState& from);
  DtlsWritableState(DtlsWritableState&& from) noexcept
    : DtlsWritableState() {
    *this = ::std::move(from);
  }

  inline DtlsWritableState& operator=(const DtlsWritableState& from) {
    CopyFrom(from);
    return *this;
  }
  inline DtlsWritableState& operator=(DtlsWritableState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DtlsWritableState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DtlsWritableState* internal_default_instance() {
    return reinterpret_cast<const DtlsWritableState*>(
               &_DtlsWritableState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(DtlsWritableState& a, DtlsWritableState& b) {
    a.Swap(&b);
  }
  inline void Swap(DtlsWritableState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DtlsWritableState* New() const final {
    return CreateMaybeMessage<DtlsWritableState>(nullptr);
  }

  DtlsWritableState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DtlsWritableState>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DtlsWritableState& from);
  void MergeFrom(const DtlsWritableState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DtlsWritableState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webrtc.rtclog2.DtlsWritableState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampMsFieldNumber = 1,
    kWritableFieldNumber = 2,
  };
  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms() const;
  void set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional bool writable = 2;
  bool has_writable() const;
  void clear_writable();
  bool writable() const;
  void set_writable(bool value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.DtlsWritableState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms_;
  bool writable_;
  friend struct ::TableStruct_rtc_5fevent_5flog2_2eproto;
};
// -------------------------------------------------------------------

class RouteChange :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.RouteChange) */ {
 public:
  RouteChange();
  virtual ~RouteChange();

  RouteChange(const RouteChange& from);
  RouteChange(RouteChange&& from) noexcept
    : RouteChange() {
    *this = ::std::move(from);
  }

  inline RouteChange& operator=(const RouteChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteChange& operator=(RouteChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RouteChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteChange* internal_default_instance() {
    return reinterpret_cast<const RouteChange*>(
               &_RouteChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(RouteChange& a, RouteChange& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteChange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteChange* New() const final {
    return CreateMaybeMessage<RouteChange>(nullptr);
  }

  RouteChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteChange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RouteChange& from);
  void MergeFrom(const RouteChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RouteChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webrtc.rtclog2.RouteChange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampMsFieldNumber = 1,
    kConnectedFieldNumber = 2,
    kOverheadFieldNumber = 3,
  };
  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms() const;
  void set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional bool connected = 2;
  bool has_connected() const;
  void clear_connected();
  bool connected() const;
  void set_connected(bool value);

  // optional uint32 overhead = 3;
  bool has_overhead() const;
  void clear_overhead();
  ::PROTOBUF_NAMESPACE_ID::uint32 overhead() const;
  void set_overhead(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.RouteChange)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms_;
  bool connected_;
  ::PROTOBUF_NAMESPACE_ID::uint32 overhead_;
  friend struct ::TableStruct_rtc_5fevent_5flog2_2eproto;
};
// -------------------------------------------------------------------

class RemoteEstimates :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.RemoteEstimates) */ {
 public:
  RemoteEstimates();
  virtual ~RemoteEstimates();

  RemoteEstimates(const RemoteEstimates& from);
  RemoteEstimates(RemoteEstimates&& from) noexcept
    : RemoteEstimates() {
    *this = ::std::move(from);
  }

  inline RemoteEstimates& operator=(const RemoteEstimates& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteEstimates& operator=(RemoteEstimates&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RemoteEstimates& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoteEstimates* internal_default_instance() {
    return reinterpret_cast<const RemoteEstimates*>(
               &_RemoteEstimates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(RemoteEstimates& a, RemoteEstimates& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteEstimates* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoteEstimates* New() const final {
    return CreateMaybeMessage<RemoteEstimates>(nullptr);
  }

  RemoteEstimates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoteEstimates>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RemoteEstimates& from);
  void MergeFrom(const RemoteEstimates& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RemoteEstimates* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webrtc.rtclog2.RemoteEstimates";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampMsDeltasFieldNumber = 101,
    kLinkCapacityLowerKbpsDeltasFieldNumber = 102,
    kLinkCapacityUpperKbpsDeltasFieldNumber = 103,
    kTimestampMsFieldNumber = 1,
    kLinkCapacityLowerKbpsFieldNumber = 2,
    kLinkCapacityUpperKbpsFieldNumber = 3,
    kNumberOfDeltasFieldNumber = 4,
  };
  // optional bytes timestamp_ms_deltas = 101;
  bool has_timestamp_ms_deltas() const;
  void clear_timestamp_ms_deltas();
  const std::string& timestamp_ms_deltas() const;
  void set_timestamp_ms_deltas(const std::string& value);
  void set_timestamp_ms_deltas(std::string&& value);
  void set_timestamp_ms_deltas(const char* value);
  void set_timestamp_ms_deltas(const void* value, size_t size);
  std::string* mutable_timestamp_ms_deltas();
  std::string* release_timestamp_ms_deltas();
  void set_allocated_timestamp_ms_deltas(std::string* timestamp_ms_deltas);

  // optional bytes link_capacity_lower_kbps_deltas = 102;
  bool has_link_capacity_lower_kbps_deltas() const;
  void clear_link_capacity_lower_kbps_deltas();
  const std::string& link_capacity_lower_kbps_deltas() const;
  void set_link_capacity_lower_kbps_deltas(const std::string& value);
  void set_link_capacity_lower_kbps_deltas(std::string&& value);
  void set_link_capacity_lower_kbps_deltas(const char* value);
  void set_link_capacity_lower_kbps_deltas(const void* value, size_t size);
  std::string* mutable_link_capacity_lower_kbps_deltas();
  std::string* release_link_capacity_lower_kbps_deltas();
  void set_allocated_link_capacity_lower_kbps_deltas(std::string* link_capacity_lower_kbps_deltas);

  // optional bytes link_capacity_upper_kbps_deltas = 103;
  bool has_link_capacity_upper_kbps_deltas() const;
  void clear_link_capacity_upper_kbps_deltas();
  const std::string& link_capacity_upper_kbps_deltas() const;
  void set_link_capacity_upper_kbps_deltas(const std::string& value);
  void set_link_capacity_upper_kbps_deltas(std::string&& value);
  void set_link_capacity_upper_kbps_deltas(const char* value);
  void set_link_capacity_upper_kbps_deltas(const void* value, size_t size);
  std::string* mutable_link_capacity_upper_kbps_deltas();
  std::string* release_link_capacity_upper_kbps_deltas();
  void set_allocated_link_capacity_upper_kbps_deltas(std::string* link_capacity_upper_kbps_deltas);

  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms() const;
  void set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint32 link_capacity_lower_kbps = 2;
  bool has_link_capacity_lower_kbps() const;
  void clear_link_capacity_lower_kbps();
  ::PROTOBUF_NAMESPACE_ID::uint32 link_capacity_lower_kbps() const;
  void set_link_capacity_lower_kbps(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 link_capacity_upper_kbps = 3;
  bool has_link_capacity_upper_kbps() const;
  void clear_link_capacity_upper_kbps();
  ::PROTOBUF_NAMESPACE_ID::uint32 link_capacity_upper_kbps() const;
  void set_link_capacity_upper_kbps(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 number_of_deltas = 4;
  bool has_number_of_deltas() const;
  void clear_number_of_deltas();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_deltas() const;
  void set_number_of_deltas(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.RemoteEstimates)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_ms_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr link_capacity_lower_kbps_deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr link_capacity_upper_kbps_deltas_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 link_capacity_lower_kbps_;
  ::PROTOBUF_NAMESPACE_ID::uint32 link_capacity_upper_kbps_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_deltas_;
  friend struct ::TableStruct_rtc_5fevent_5flog2_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EventStream

// repeated .webrtc.rtclog2.Event stream = 1 [deprecated = true];
inline int EventStream::stream_size() const {
  return stream_.size();
}
inline void EventStream::clear_stream() {
  stream_.Clear();
}
inline ::webrtc::rtclog2::Event* EventStream::mutable_stream(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.stream)
  return stream_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::Event >*
EventStream::mutable_stream() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.stream)
  return &stream_;
}
inline const ::webrtc::rtclog2::Event& EventStream::stream(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.stream)
  return stream_.Get(index);
}
inline ::webrtc::rtclog2::Event* EventStream::add_stream() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.stream)
  return stream_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::Event >&
EventStream::stream() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.stream)
  return stream_;
}

// repeated .webrtc.rtclog2.IncomingRtpPackets incoming_rtp_packets = 2;
inline int EventStream::incoming_rtp_packets_size() const {
  return incoming_rtp_packets_.size();
}
inline void EventStream::clear_incoming_rtp_packets() {
  incoming_rtp_packets_.Clear();
}
inline ::webrtc::rtclog2::IncomingRtpPackets* EventStream::mutable_incoming_rtp_packets(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.incoming_rtp_packets)
  return incoming_rtp_packets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::IncomingRtpPackets >*
EventStream::mutable_incoming_rtp_packets() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.incoming_rtp_packets)
  return &incoming_rtp_packets_;
}
inline const ::webrtc::rtclog2::IncomingRtpPackets& EventStream::incoming_rtp_packets(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.incoming_rtp_packets)
  return incoming_rtp_packets_.Get(index);
}
inline ::webrtc::rtclog2::IncomingRtpPackets* EventStream::add_incoming_rtp_packets() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.incoming_rtp_packets)
  return incoming_rtp_packets_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::IncomingRtpPackets >&
EventStream::incoming_rtp_packets() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.incoming_rtp_packets)
  return incoming_rtp_packets_;
}

// repeated .webrtc.rtclog2.OutgoingRtpPackets outgoing_rtp_packets = 3;
inline int EventStream::outgoing_rtp_packets_size() const {
  return outgoing_rtp_packets_.size();
}
inline void EventStream::clear_outgoing_rtp_packets() {
  outgoing_rtp_packets_.Clear();
}
inline ::webrtc::rtclog2::OutgoingRtpPackets* EventStream::mutable_outgoing_rtp_packets(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.outgoing_rtp_packets)
  return outgoing_rtp_packets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::OutgoingRtpPackets >*
EventStream::mutable_outgoing_rtp_packets() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.outgoing_rtp_packets)
  return &outgoing_rtp_packets_;
}
inline const ::webrtc::rtclog2::OutgoingRtpPackets& EventStream::outgoing_rtp_packets(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.outgoing_rtp_packets)
  return outgoing_rtp_packets_.Get(index);
}
inline ::webrtc::rtclog2::OutgoingRtpPackets* EventStream::add_outgoing_rtp_packets() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.outgoing_rtp_packets)
  return outgoing_rtp_packets_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::OutgoingRtpPackets >&
EventStream::outgoing_rtp_packets() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.outgoing_rtp_packets)
  return outgoing_rtp_packets_;
}

// repeated .webrtc.rtclog2.IncomingRtcpPackets incoming_rtcp_packets = 4;
inline int EventStream::incoming_rtcp_packets_size() const {
  return incoming_rtcp_packets_.size();
}
inline void EventStream::clear_incoming_rtcp_packets() {
  incoming_rtcp_packets_.Clear();
}
inline ::webrtc::rtclog2::IncomingRtcpPackets* EventStream::mutable_incoming_rtcp_packets(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.incoming_rtcp_packets)
  return incoming_rtcp_packets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::IncomingRtcpPackets >*
EventStream::mutable_incoming_rtcp_packets() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.incoming_rtcp_packets)
  return &incoming_rtcp_packets_;
}
inline const ::webrtc::rtclog2::IncomingRtcpPackets& EventStream::incoming_rtcp_packets(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.incoming_rtcp_packets)
  return incoming_rtcp_packets_.Get(index);
}
inline ::webrtc::rtclog2::IncomingRtcpPackets* EventStream::add_incoming_rtcp_packets() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.incoming_rtcp_packets)
  return incoming_rtcp_packets_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::IncomingRtcpPackets >&
EventStream::incoming_rtcp_packets() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.incoming_rtcp_packets)
  return incoming_rtcp_packets_;
}

// repeated .webrtc.rtclog2.OutgoingRtcpPackets outgoing_rtcp_packets = 5;
inline int EventStream::outgoing_rtcp_packets_size() const {
  return outgoing_rtcp_packets_.size();
}
inline void EventStream::clear_outgoing_rtcp_packets() {
  outgoing_rtcp_packets_.Clear();
}
inline ::webrtc::rtclog2::OutgoingRtcpPackets* EventStream::mutable_outgoing_rtcp_packets(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.outgoing_rtcp_packets)
  return outgoing_rtcp_packets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::OutgoingRtcpPackets >*
EventStream::mutable_outgoing_rtcp_packets() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.outgoing_rtcp_packets)
  return &outgoing_rtcp_packets_;
}
inline const ::webrtc::rtclog2::OutgoingRtcpPackets& EventStream::outgoing_rtcp_packets(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.outgoing_rtcp_packets)
  return outgoing_rtcp_packets_.Get(index);
}
inline ::webrtc::rtclog2::OutgoingRtcpPackets* EventStream::add_outgoing_rtcp_packets() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.outgoing_rtcp_packets)
  return outgoing_rtcp_packets_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::OutgoingRtcpPackets >&
EventStream::outgoing_rtcp_packets() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.outgoing_rtcp_packets)
  return outgoing_rtcp_packets_;
}

// repeated .webrtc.rtclog2.AudioPlayoutEvents audio_playout_events = 6;
inline int EventStream::audio_playout_events_size() const {
  return audio_playout_events_.size();
}
inline void EventStream::clear_audio_playout_events() {
  audio_playout_events_.Clear();
}
inline ::webrtc::rtclog2::AudioPlayoutEvents* EventStream::mutable_audio_playout_events(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.audio_playout_events)
  return audio_playout_events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::AudioPlayoutEvents >*
EventStream::mutable_audio_playout_events() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.audio_playout_events)
  return &audio_playout_events_;
}
inline const ::webrtc::rtclog2::AudioPlayoutEvents& EventStream::audio_playout_events(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.audio_playout_events)
  return audio_playout_events_.Get(index);
}
inline ::webrtc::rtclog2::AudioPlayoutEvents* EventStream::add_audio_playout_events() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.audio_playout_events)
  return audio_playout_events_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::AudioPlayoutEvents >&
EventStream::audio_playout_events() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.audio_playout_events)
  return audio_playout_events_;
}

// repeated .webrtc.rtclog2.BeginLogEvent begin_log_events = 16;
inline int EventStream::begin_log_events_size() const {
  return begin_log_events_.size();
}
inline void EventStream::clear_begin_log_events() {
  begin_log_events_.Clear();
}
inline ::webrtc::rtclog2::BeginLogEvent* EventStream::mutable_begin_log_events(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.begin_log_events)
  return begin_log_events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::BeginLogEvent >*
EventStream::mutable_begin_log_events() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.begin_log_events)
  return &begin_log_events_;
}
inline const ::webrtc::rtclog2::BeginLogEvent& EventStream::begin_log_events(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.begin_log_events)
  return begin_log_events_.Get(index);
}
inline ::webrtc::rtclog2::BeginLogEvent* EventStream::add_begin_log_events() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.begin_log_events)
  return begin_log_events_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::BeginLogEvent >&
EventStream::begin_log_events() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.begin_log_events)
  return begin_log_events_;
}

// repeated .webrtc.rtclog2.EndLogEvent end_log_events = 17;
inline int EventStream::end_log_events_size() const {
  return end_log_events_.size();
}
inline void EventStream::clear_end_log_events() {
  end_log_events_.Clear();
}
inline ::webrtc::rtclog2::EndLogEvent* EventStream::mutable_end_log_events(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.end_log_events)
  return end_log_events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::EndLogEvent >*
EventStream::mutable_end_log_events() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.end_log_events)
  return &end_log_events_;
}
inline const ::webrtc::rtclog2::EndLogEvent& EventStream::end_log_events(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.end_log_events)
  return end_log_events_.Get(index);
}
inline ::webrtc::rtclog2::EndLogEvent* EventStream::add_end_log_events() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.end_log_events)
  return end_log_events_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::EndLogEvent >&
EventStream::end_log_events() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.end_log_events)
  return end_log_events_;
}

// repeated .webrtc.rtclog2.LossBasedBweUpdates loss_based_bwe_updates = 18;
inline int EventStream::loss_based_bwe_updates_size() const {
  return loss_based_bwe_updates_.size();
}
inline void EventStream::clear_loss_based_bwe_updates() {
  loss_based_bwe_updates_.Clear();
}
inline ::webrtc::rtclog2::LossBasedBweUpdates* EventStream::mutable_loss_based_bwe_updates(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.loss_based_bwe_updates)
  return loss_based_bwe_updates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::LossBasedBweUpdates >*
EventStream::mutable_loss_based_bwe_updates() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.loss_based_bwe_updates)
  return &loss_based_bwe_updates_;
}
inline const ::webrtc::rtclog2::LossBasedBweUpdates& EventStream::loss_based_bwe_updates(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.loss_based_bwe_updates)
  return loss_based_bwe_updates_.Get(index);
}
inline ::webrtc::rtclog2::LossBasedBweUpdates* EventStream::add_loss_based_bwe_updates() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.loss_based_bwe_updates)
  return loss_based_bwe_updates_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::LossBasedBweUpdates >&
EventStream::loss_based_bwe_updates() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.loss_based_bwe_updates)
  return loss_based_bwe_updates_;
}

// repeated .webrtc.rtclog2.DelayBasedBweUpdates delay_based_bwe_updates = 19;
inline int EventStream::delay_based_bwe_updates_size() const {
  return delay_based_bwe_updates_.size();
}
inline void EventStream::clear_delay_based_bwe_updates() {
  delay_based_bwe_updates_.Clear();
}
inline ::webrtc::rtclog2::DelayBasedBweUpdates* EventStream::mutable_delay_based_bwe_updates(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.delay_based_bwe_updates)
  return delay_based_bwe_updates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::DelayBasedBweUpdates >*
EventStream::mutable_delay_based_bwe_updates() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.delay_based_bwe_updates)
  return &delay_based_bwe_updates_;
}
inline const ::webrtc::rtclog2::DelayBasedBweUpdates& EventStream::delay_based_bwe_updates(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.delay_based_bwe_updates)
  return delay_based_bwe_updates_.Get(index);
}
inline ::webrtc::rtclog2::DelayBasedBweUpdates* EventStream::add_delay_based_bwe_updates() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.delay_based_bwe_updates)
  return delay_based_bwe_updates_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::DelayBasedBweUpdates >&
EventStream::delay_based_bwe_updates() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.delay_based_bwe_updates)
  return delay_based_bwe_updates_;
}

// repeated .webrtc.rtclog2.AudioNetworkAdaptations audio_network_adaptations = 20;
inline int EventStream::audio_network_adaptations_size() const {
  return audio_network_adaptations_.size();
}
inline void EventStream::clear_audio_network_adaptations() {
  audio_network_adaptations_.Clear();
}
inline ::webrtc::rtclog2::AudioNetworkAdaptations* EventStream::mutable_audio_network_adaptations(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.audio_network_adaptations)
  return audio_network_adaptations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::AudioNetworkAdaptations >*
EventStream::mutable_audio_network_adaptations() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.audio_network_adaptations)
  return &audio_network_adaptations_;
}
inline const ::webrtc::rtclog2::AudioNetworkAdaptations& EventStream::audio_network_adaptations(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.audio_network_adaptations)
  return audio_network_adaptations_.Get(index);
}
inline ::webrtc::rtclog2::AudioNetworkAdaptations* EventStream::add_audio_network_adaptations() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.audio_network_adaptations)
  return audio_network_adaptations_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::AudioNetworkAdaptations >&
EventStream::audio_network_adaptations() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.audio_network_adaptations)
  return audio_network_adaptations_;
}

// repeated .webrtc.rtclog2.BweProbeCluster probe_clusters = 21;
inline int EventStream::probe_clusters_size() const {
  return probe_clusters_.size();
}
inline void EventStream::clear_probe_clusters() {
  probe_clusters_.Clear();
}
inline ::webrtc::rtclog2::BweProbeCluster* EventStream::mutable_probe_clusters(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.probe_clusters)
  return probe_clusters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::BweProbeCluster >*
EventStream::mutable_probe_clusters() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.probe_clusters)
  return &probe_clusters_;
}
inline const ::webrtc::rtclog2::BweProbeCluster& EventStream::probe_clusters(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.probe_clusters)
  return probe_clusters_.Get(index);
}
inline ::webrtc::rtclog2::BweProbeCluster* EventStream::add_probe_clusters() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.probe_clusters)
  return probe_clusters_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::BweProbeCluster >&
EventStream::probe_clusters() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.probe_clusters)
  return probe_clusters_;
}

// repeated .webrtc.rtclog2.BweProbeResultSuccess probe_success = 22;
inline int EventStream::probe_success_size() const {
  return probe_success_.size();
}
inline void EventStream::clear_probe_success() {
  probe_success_.Clear();
}
inline ::webrtc::rtclog2::BweProbeResultSuccess* EventStream::mutable_probe_success(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.probe_success)
  return probe_success_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::BweProbeResultSuccess >*
EventStream::mutable_probe_success() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.probe_success)
  return &probe_success_;
}
inline const ::webrtc::rtclog2::BweProbeResultSuccess& EventStream::probe_success(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.probe_success)
  return probe_success_.Get(index);
}
inline ::webrtc::rtclog2::BweProbeResultSuccess* EventStream::add_probe_success() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.probe_success)
  return probe_success_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::BweProbeResultSuccess >&
EventStream::probe_success() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.probe_success)
  return probe_success_;
}

// repeated .webrtc.rtclog2.BweProbeResultFailure probe_failure = 23;
inline int EventStream::probe_failure_size() const {
  return probe_failure_.size();
}
inline void EventStream::clear_probe_failure() {
  probe_failure_.Clear();
}
inline ::webrtc::rtclog2::BweProbeResultFailure* EventStream::mutable_probe_failure(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.probe_failure)
  return probe_failure_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::BweProbeResultFailure >*
EventStream::mutable_probe_failure() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.probe_failure)
  return &probe_failure_;
}
inline const ::webrtc::rtclog2::BweProbeResultFailure& EventStream::probe_failure(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.probe_failure)
  return probe_failure_.Get(index);
}
inline ::webrtc::rtclog2::BweProbeResultFailure* EventStream::add_probe_failure() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.probe_failure)
  return probe_failure_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::BweProbeResultFailure >&
EventStream::probe_failure() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.probe_failure)
  return probe_failure_;
}

// repeated .webrtc.rtclog2.AlrState alr_states = 24;
inline int EventStream::alr_states_size() const {
  return alr_states_.size();
}
inline void EventStream::clear_alr_states() {
  alr_states_.Clear();
}
inline ::webrtc::rtclog2::AlrState* EventStream::mutable_alr_states(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.alr_states)
  return alr_states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::AlrState >*
EventStream::mutable_alr_states() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.alr_states)
  return &alr_states_;
}
inline const ::webrtc::rtclog2::AlrState& EventStream::alr_states(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.alr_states)
  return alr_states_.Get(index);
}
inline ::webrtc::rtclog2::AlrState* EventStream::add_alr_states() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.alr_states)
  return alr_states_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::AlrState >&
EventStream::alr_states() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.alr_states)
  return alr_states_;
}

// repeated .webrtc.rtclog2.IceCandidatePairConfig ice_candidate_configs = 25;
inline int EventStream::ice_candidate_configs_size() const {
  return ice_candidate_configs_.size();
}
inline void EventStream::clear_ice_candidate_configs() {
  ice_candidate_configs_.Clear();
}
inline ::webrtc::rtclog2::IceCandidatePairConfig* EventStream::mutable_ice_candidate_configs(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.ice_candidate_configs)
  return ice_candidate_configs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::IceCandidatePairConfig >*
EventStream::mutable_ice_candidate_configs() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.ice_candidate_configs)
  return &ice_candidate_configs_;
}
inline const ::webrtc::rtclog2::IceCandidatePairConfig& EventStream::ice_candidate_configs(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.ice_candidate_configs)
  return ice_candidate_configs_.Get(index);
}
inline ::webrtc::rtclog2::IceCandidatePairConfig* EventStream::add_ice_candidate_configs() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.ice_candidate_configs)
  return ice_candidate_configs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::IceCandidatePairConfig >&
EventStream::ice_candidate_configs() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.ice_candidate_configs)
  return ice_candidate_configs_;
}

// repeated .webrtc.rtclog2.IceCandidatePairEvent ice_candidate_events = 26;
inline int EventStream::ice_candidate_events_size() const {
  return ice_candidate_events_.size();
}
inline void EventStream::clear_ice_candidate_events() {
  ice_candidate_events_.Clear();
}
inline ::webrtc::rtclog2::IceCandidatePairEvent* EventStream::mutable_ice_candidate_events(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.ice_candidate_events)
  return ice_candidate_events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::IceCandidatePairEvent >*
EventStream::mutable_ice_candidate_events() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.ice_candidate_events)
  return &ice_candidate_events_;
}
inline const ::webrtc::rtclog2::IceCandidatePairEvent& EventStream::ice_candidate_events(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.ice_candidate_events)
  return ice_candidate_events_.Get(index);
}
inline ::webrtc::rtclog2::IceCandidatePairEvent* EventStream::add_ice_candidate_events() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.ice_candidate_events)
  return ice_candidate_events_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::IceCandidatePairEvent >&
EventStream::ice_candidate_events() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.ice_candidate_events)
  return ice_candidate_events_;
}

// repeated .webrtc.rtclog2.DtlsTransportStateEvent dtls_transport_state_events = 27;
inline int EventStream::dtls_transport_state_events_size() const {
  return dtls_transport_state_events_.size();
}
inline void EventStream::clear_dtls_transport_state_events() {
  dtls_transport_state_events_.Clear();
}
inline ::webrtc::rtclog2::DtlsTransportStateEvent* EventStream::mutable_dtls_transport_state_events(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.dtls_transport_state_events)
  return dtls_transport_state_events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::DtlsTransportStateEvent >*
EventStream::mutable_dtls_transport_state_events() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.dtls_transport_state_events)
  return &dtls_transport_state_events_;
}
inline const ::webrtc::rtclog2::DtlsTransportStateEvent& EventStream::dtls_transport_state_events(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.dtls_transport_state_events)
  return dtls_transport_state_events_.Get(index);
}
inline ::webrtc::rtclog2::DtlsTransportStateEvent* EventStream::add_dtls_transport_state_events() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.dtls_transport_state_events)
  return dtls_transport_state_events_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::DtlsTransportStateEvent >&
EventStream::dtls_transport_state_events() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.dtls_transport_state_events)
  return dtls_transport_state_events_;
}

// repeated .webrtc.rtclog2.DtlsWritableState dtls_writable_states = 28;
inline int EventStream::dtls_writable_states_size() const {
  return dtls_writable_states_.size();
}
inline void EventStream::clear_dtls_writable_states() {
  dtls_writable_states_.Clear();
}
inline ::webrtc::rtclog2::DtlsWritableState* EventStream::mutable_dtls_writable_states(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.dtls_writable_states)
  return dtls_writable_states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::DtlsWritableState >*
EventStream::mutable_dtls_writable_states() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.dtls_writable_states)
  return &dtls_writable_states_;
}
inline const ::webrtc::rtclog2::DtlsWritableState& EventStream::dtls_writable_states(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.dtls_writable_states)
  return dtls_writable_states_.Get(index);
}
inline ::webrtc::rtclog2::DtlsWritableState* EventStream::add_dtls_writable_states() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.dtls_writable_states)
  return dtls_writable_states_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::DtlsWritableState >&
EventStream::dtls_writable_states() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.dtls_writable_states)
  return dtls_writable_states_;
}

// repeated .webrtc.rtclog2.GenericPacketSent generic_packets_sent = 29;
inline int EventStream::generic_packets_sent_size() const {
  return generic_packets_sent_.size();
}
inline void EventStream::clear_generic_packets_sent() {
  generic_packets_sent_.Clear();
}
inline ::webrtc::rtclog2::GenericPacketSent* EventStream::mutable_generic_packets_sent(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.generic_packets_sent)
  return generic_packets_sent_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::GenericPacketSent >*
EventStream::mutable_generic_packets_sent() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.generic_packets_sent)
  return &generic_packets_sent_;
}
inline const ::webrtc::rtclog2::GenericPacketSent& EventStream::generic_packets_sent(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.generic_packets_sent)
  return generic_packets_sent_.Get(index);
}
inline ::webrtc::rtclog2::GenericPacketSent* EventStream::add_generic_packets_sent() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.generic_packets_sent)
  return generic_packets_sent_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::GenericPacketSent >&
EventStream::generic_packets_sent() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.generic_packets_sent)
  return generic_packets_sent_;
}

// repeated .webrtc.rtclog2.GenericPacketReceived generic_packets_received = 30;
inline int EventStream::generic_packets_received_size() const {
  return generic_packets_received_.size();
}
inline void EventStream::clear_generic_packets_received() {
  generic_packets_received_.Clear();
}
inline ::webrtc::rtclog2::GenericPacketReceived* EventStream::mutable_generic_packets_received(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.generic_packets_received)
  return generic_packets_received_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::GenericPacketReceived >*
EventStream::mutable_generic_packets_received() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.generic_packets_received)
  return &generic_packets_received_;
}
inline const ::webrtc::rtclog2::GenericPacketReceived& EventStream::generic_packets_received(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.generic_packets_received)
  return generic_packets_received_.Get(index);
}
inline ::webrtc::rtclog2::GenericPacketReceived* EventStream::add_generic_packets_received() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.generic_packets_received)
  return generic_packets_received_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::GenericPacketReceived >&
EventStream::generic_packets_received() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.generic_packets_received)
  return generic_packets_received_;
}

// repeated .webrtc.rtclog2.GenericAckReceived generic_acks_received = 31;
inline int EventStream::generic_acks_received_size() const {
  return generic_acks_received_.size();
}
inline void EventStream::clear_generic_acks_received() {
  generic_acks_received_.Clear();
}
inline ::webrtc::rtclog2::GenericAckReceived* EventStream::mutable_generic_acks_received(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.generic_acks_received)
  return generic_acks_received_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::GenericAckReceived >*
EventStream::mutable_generic_acks_received() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.generic_acks_received)
  return &generic_acks_received_;
}
inline const ::webrtc::rtclog2::GenericAckReceived& EventStream::generic_acks_received(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.generic_acks_received)
  return generic_acks_received_.Get(index);
}
inline ::webrtc::rtclog2::GenericAckReceived* EventStream::add_generic_acks_received() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.generic_acks_received)
  return generic_acks_received_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::GenericAckReceived >&
EventStream::generic_acks_received() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.generic_acks_received)
  return generic_acks_received_;
}

// repeated .webrtc.rtclog2.RouteChange route_changes = 32;
inline int EventStream::route_changes_size() const {
  return route_changes_.size();
}
inline void EventStream::clear_route_changes() {
  route_changes_.Clear();
}
inline ::webrtc::rtclog2::RouteChange* EventStream::mutable_route_changes(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.route_changes)
  return route_changes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::RouteChange >*
EventStream::mutable_route_changes() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.route_changes)
  return &route_changes_;
}
inline const ::webrtc::rtclog2::RouteChange& EventStream::route_changes(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.route_changes)
  return route_changes_.Get(index);
}
inline ::webrtc::rtclog2::RouteChange* EventStream::add_route_changes() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.route_changes)
  return route_changes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::RouteChange >&
EventStream::route_changes() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.route_changes)
  return route_changes_;
}

// repeated .webrtc.rtclog2.RemoteEstimates remote_estimates = 33;
inline int EventStream::remote_estimates_size() const {
  return remote_estimates_.size();
}
inline void EventStream::clear_remote_estimates() {
  remote_estimates_.Clear();
}
inline ::webrtc::rtclog2::RemoteEstimates* EventStream::mutable_remote_estimates(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.remote_estimates)
  return remote_estimates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::RemoteEstimates >*
EventStream::mutable_remote_estimates() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.remote_estimates)
  return &remote_estimates_;
}
inline const ::webrtc::rtclog2::RemoteEstimates& EventStream::remote_estimates(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.remote_estimates)
  return remote_estimates_.Get(index);
}
inline ::webrtc::rtclog2::RemoteEstimates* EventStream::add_remote_estimates() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.remote_estimates)
  return remote_estimates_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::RemoteEstimates >&
EventStream::remote_estimates() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.remote_estimates)
  return remote_estimates_;
}

// repeated .webrtc.rtclog2.AudioRecvStreamConfig audio_recv_stream_configs = 101;
inline int EventStream::audio_recv_stream_configs_size() const {
  return audio_recv_stream_configs_.size();
}
inline void EventStream::clear_audio_recv_stream_configs() {
  audio_recv_stream_configs_.Clear();
}
inline ::webrtc::rtclog2::AudioRecvStreamConfig* EventStream::mutable_audio_recv_stream_configs(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.audio_recv_stream_configs)
  return audio_recv_stream_configs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::AudioRecvStreamConfig >*
EventStream::mutable_audio_recv_stream_configs() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.audio_recv_stream_configs)
  return &audio_recv_stream_configs_;
}
inline const ::webrtc::rtclog2::AudioRecvStreamConfig& EventStream::audio_recv_stream_configs(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.audio_recv_stream_configs)
  return audio_recv_stream_configs_.Get(index);
}
inline ::webrtc::rtclog2::AudioRecvStreamConfig* EventStream::add_audio_recv_stream_configs() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.audio_recv_stream_configs)
  return audio_recv_stream_configs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::AudioRecvStreamConfig >&
EventStream::audio_recv_stream_configs() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.audio_recv_stream_configs)
  return audio_recv_stream_configs_;
}

// repeated .webrtc.rtclog2.AudioSendStreamConfig audio_send_stream_configs = 102;
inline int EventStream::audio_send_stream_configs_size() const {
  return audio_send_stream_configs_.size();
}
inline void EventStream::clear_audio_send_stream_configs() {
  audio_send_stream_configs_.Clear();
}
inline ::webrtc::rtclog2::AudioSendStreamConfig* EventStream::mutable_audio_send_stream_configs(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.audio_send_stream_configs)
  return audio_send_stream_configs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::AudioSendStreamConfig >*
EventStream::mutable_audio_send_stream_configs() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.audio_send_stream_configs)
  return &audio_send_stream_configs_;
}
inline const ::webrtc::rtclog2::AudioSendStreamConfig& EventStream::audio_send_stream_configs(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.audio_send_stream_configs)
  return audio_send_stream_configs_.Get(index);
}
inline ::webrtc::rtclog2::AudioSendStreamConfig* EventStream::add_audio_send_stream_configs() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.audio_send_stream_configs)
  return audio_send_stream_configs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::AudioSendStreamConfig >&
EventStream::audio_send_stream_configs() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.audio_send_stream_configs)
  return audio_send_stream_configs_;
}

// repeated .webrtc.rtclog2.VideoRecvStreamConfig video_recv_stream_configs = 103;
inline int EventStream::video_recv_stream_configs_size() const {
  return video_recv_stream_configs_.size();
}
inline void EventStream::clear_video_recv_stream_configs() {
  video_recv_stream_configs_.Clear();
}
inline ::webrtc::rtclog2::VideoRecvStreamConfig* EventStream::mutable_video_recv_stream_configs(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.video_recv_stream_configs)
  return video_recv_stream_configs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::VideoRecvStreamConfig >*
EventStream::mutable_video_recv_stream_configs() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.video_recv_stream_configs)
  return &video_recv_stream_configs_;
}
inline const ::webrtc::rtclog2::VideoRecvStreamConfig& EventStream::video_recv_stream_configs(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.video_recv_stream_configs)
  return video_recv_stream_configs_.Get(index);
}
inline ::webrtc::rtclog2::VideoRecvStreamConfig* EventStream::add_video_recv_stream_configs() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.video_recv_stream_configs)
  return video_recv_stream_configs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::VideoRecvStreamConfig >&
EventStream::video_recv_stream_configs() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.video_recv_stream_configs)
  return video_recv_stream_configs_;
}

// repeated .webrtc.rtclog2.VideoSendStreamConfig video_send_stream_configs = 104;
inline int EventStream::video_send_stream_configs_size() const {
  return video_send_stream_configs_.size();
}
inline void EventStream::clear_video_send_stream_configs() {
  video_send_stream_configs_.Clear();
}
inline ::webrtc::rtclog2::VideoSendStreamConfig* EventStream::mutable_video_send_stream_configs(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.video_send_stream_configs)
  return video_send_stream_configs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::VideoSendStreamConfig >*
EventStream::mutable_video_send_stream_configs() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.video_send_stream_configs)
  return &video_send_stream_configs_;
}
inline const ::webrtc::rtclog2::VideoSendStreamConfig& EventStream::video_send_stream_configs(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.video_send_stream_configs)
  return video_send_stream_configs_.Get(index);
}
inline ::webrtc::rtclog2::VideoSendStreamConfig* EventStream::add_video_send_stream_configs() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.video_send_stream_configs)
  return video_send_stream_configs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::rtclog2::VideoSendStreamConfig >&
EventStream::video_send_stream_configs() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.video_send_stream_configs)
  return video_send_stream_configs_;
}

// -------------------------------------------------------------------

// Event

// -------------------------------------------------------------------

// GenericPacketReceived

// optional int64 timestamp_ms = 1;
inline bool GenericPacketReceived::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GenericPacketReceived::clear_timestamp_ms() {
  timestamp_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenericPacketReceived::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.GenericPacketReceived.timestamp_ms)
  return timestamp_ms_;
}
inline void GenericPacketReceived::set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.GenericPacketReceived.timestamp_ms)
}

// optional int64 packet_number = 2;
inline bool GenericPacketReceived::has_packet_number() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GenericPacketReceived::clear_packet_number() {
  packet_number_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenericPacketReceived::packet_number() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.GenericPacketReceived.packet_number)
  return packet_number_;
}
inline void GenericPacketReceived::set_packet_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  packet_number_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.GenericPacketReceived.packet_number)
}

// optional int32 packet_length = 3;
inline bool GenericPacketReceived::has_packet_length() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GenericPacketReceived::clear_packet_length() {
  packet_length_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GenericPacketReceived::packet_length() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.GenericPacketReceived.packet_length)
  return packet_length_;
}
inline void GenericPacketReceived::set_packet_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  packet_length_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.GenericPacketReceived.packet_length)
}

// optional uint32 number_of_deltas = 16;
inline bool GenericPacketReceived::has_number_of_deltas() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GenericPacketReceived::clear_number_of_deltas() {
  number_of_deltas_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GenericPacketReceived::number_of_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.GenericPacketReceived.number_of_deltas)
  return number_of_deltas_;
}
inline void GenericPacketReceived::set_number_of_deltas(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  number_of_deltas_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.GenericPacketReceived.number_of_deltas)
}

// optional bytes timestamp_ms_deltas = 17;
inline bool GenericPacketReceived::has_timestamp_ms_deltas() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GenericPacketReceived::clear_timestamp_ms_deltas() {
  timestamp_ms_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GenericPacketReceived::timestamp_ms_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.GenericPacketReceived.timestamp_ms_deltas)
  return timestamp_ms_deltas_.GetNoArena();
}
inline void GenericPacketReceived::set_timestamp_ms_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.GenericPacketReceived.timestamp_ms_deltas)
}
inline void GenericPacketReceived::set_timestamp_ms_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.GenericPacketReceived.timestamp_ms_deltas)
}
inline void GenericPacketReceived::set_timestamp_ms_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.GenericPacketReceived.timestamp_ms_deltas)
}
inline void GenericPacketReceived::set_timestamp_ms_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.GenericPacketReceived.timestamp_ms_deltas)
}
inline std::string* GenericPacketReceived::mutable_timestamp_ms_deltas() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.GenericPacketReceived.timestamp_ms_deltas)
  return timestamp_ms_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GenericPacketReceived::release_timestamp_ms_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.GenericPacketReceived.timestamp_ms_deltas)
  if (!has_timestamp_ms_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return timestamp_ms_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GenericPacketReceived::set_allocated_timestamp_ms_deltas(std::string* timestamp_ms_deltas) {
  if (timestamp_ms_deltas != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  timestamp_ms_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp_ms_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.GenericPacketReceived.timestamp_ms_deltas)
}

// optional bytes packet_number_deltas = 18;
inline bool GenericPacketReceived::has_packet_number_deltas() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GenericPacketReceived::clear_packet_number_deltas() {
  packet_number_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GenericPacketReceived::packet_number_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.GenericPacketReceived.packet_number_deltas)
  return packet_number_deltas_.GetNoArena();
}
inline void GenericPacketReceived::set_packet_number_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  packet_number_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.GenericPacketReceived.packet_number_deltas)
}
inline void GenericPacketReceived::set_packet_number_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  packet_number_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.GenericPacketReceived.packet_number_deltas)
}
inline void GenericPacketReceived::set_packet_number_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  packet_number_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.GenericPacketReceived.packet_number_deltas)
}
inline void GenericPacketReceived::set_packet_number_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  packet_number_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.GenericPacketReceived.packet_number_deltas)
}
inline std::string* GenericPacketReceived::mutable_packet_number_deltas() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.GenericPacketReceived.packet_number_deltas)
  return packet_number_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GenericPacketReceived::release_packet_number_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.GenericPacketReceived.packet_number_deltas)
  if (!has_packet_number_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return packet_number_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GenericPacketReceived::set_allocated_packet_number_deltas(std::string* packet_number_deltas) {
  if (packet_number_deltas != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  packet_number_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), packet_number_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.GenericPacketReceived.packet_number_deltas)
}

// optional bytes packet_length_deltas = 19;
inline bool GenericPacketReceived::has_packet_length_deltas() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GenericPacketReceived::clear_packet_length_deltas() {
  packet_length_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& GenericPacketReceived::packet_length_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.GenericPacketReceived.packet_length_deltas)
  return packet_length_deltas_.GetNoArena();
}
inline void GenericPacketReceived::set_packet_length_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  packet_length_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.GenericPacketReceived.packet_length_deltas)
}
inline void GenericPacketReceived::set_packet_length_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  packet_length_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.GenericPacketReceived.packet_length_deltas)
}
inline void GenericPacketReceived::set_packet_length_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  packet_length_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.GenericPacketReceived.packet_length_deltas)
}
inline void GenericPacketReceived::set_packet_length_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  packet_length_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.GenericPacketReceived.packet_length_deltas)
}
inline std::string* GenericPacketReceived::mutable_packet_length_deltas() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.GenericPacketReceived.packet_length_deltas)
  return packet_length_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GenericPacketReceived::release_packet_length_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.GenericPacketReceived.packet_length_deltas)
  if (!has_packet_length_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return packet_length_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GenericPacketReceived::set_allocated_packet_length_deltas(std::string* packet_length_deltas) {
  if (packet_length_deltas != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  packet_length_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), packet_length_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.GenericPacketReceived.packet_length_deltas)
}

// -------------------------------------------------------------------

// GenericPacketSent

// optional int64 timestamp_ms = 1;
inline bool GenericPacketSent::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GenericPacketSent::clear_timestamp_ms() {
  timestamp_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenericPacketSent::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.GenericPacketSent.timestamp_ms)
  return timestamp_ms_;
}
inline void GenericPacketSent::set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.GenericPacketSent.timestamp_ms)
}

// optional int64 packet_number = 2;
inline bool GenericPacketSent::has_packet_number() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GenericPacketSent::clear_packet_number() {
  packet_number_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenericPacketSent::packet_number() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.GenericPacketSent.packet_number)
  return packet_number_;
}
inline void GenericPacketSent::set_packet_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  packet_number_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.GenericPacketSent.packet_number)
}

// optional int32 overhead_length = 3;
inline bool GenericPacketSent::has_overhead_length() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GenericPacketSent::clear_overhead_length() {
  overhead_length_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GenericPacketSent::overhead_length() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.GenericPacketSent.overhead_length)
  return overhead_length_;
}
inline void GenericPacketSent::set_overhead_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  overhead_length_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.GenericPacketSent.overhead_length)
}

// optional int32 payload_length = 4;
inline bool GenericPacketSent::has_payload_length() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GenericPacketSent::clear_payload_length() {
  payload_length_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GenericPacketSent::payload_length() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.GenericPacketSent.payload_length)
  return payload_length_;
}
inline void GenericPacketSent::set_payload_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  payload_length_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.GenericPacketSent.payload_length)
}

// optional int32 padding_length = 5;
inline bool GenericPacketSent::has_padding_length() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GenericPacketSent::clear_padding_length() {
  padding_length_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GenericPacketSent::padding_length() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.GenericPacketSent.padding_length)
  return padding_length_;
}
inline void GenericPacketSent::set_padding_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  padding_length_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.GenericPacketSent.padding_length)
}

// optional uint32 number_of_deltas = 16;
inline bool GenericPacketSent::has_number_of_deltas() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GenericPacketSent::clear_number_of_deltas() {
  number_of_deltas_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GenericPacketSent::number_of_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.GenericPacketSent.number_of_deltas)
  return number_of_deltas_;
}
inline void GenericPacketSent::set_number_of_deltas(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  number_of_deltas_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.GenericPacketSent.number_of_deltas)
}

// optional bytes timestamp_ms_deltas = 17;
inline bool GenericPacketSent::has_timestamp_ms_deltas() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GenericPacketSent::clear_timestamp_ms_deltas() {
  timestamp_ms_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GenericPacketSent::timestamp_ms_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.GenericPacketSent.timestamp_ms_deltas)
  return timestamp_ms_deltas_.GetNoArena();
}
inline void GenericPacketSent::set_timestamp_ms_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.GenericPacketSent.timestamp_ms_deltas)
}
inline void GenericPacketSent::set_timestamp_ms_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.GenericPacketSent.timestamp_ms_deltas)
}
inline void GenericPacketSent::set_timestamp_ms_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.GenericPacketSent.timestamp_ms_deltas)
}
inline void GenericPacketSent::set_timestamp_ms_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.GenericPacketSent.timestamp_ms_deltas)
}
inline std::string* GenericPacketSent::mutable_timestamp_ms_deltas() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.GenericPacketSent.timestamp_ms_deltas)
  return timestamp_ms_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GenericPacketSent::release_timestamp_ms_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.GenericPacketSent.timestamp_ms_deltas)
  if (!has_timestamp_ms_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return timestamp_ms_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GenericPacketSent::set_allocated_timestamp_ms_deltas(std::string* timestamp_ms_deltas) {
  if (timestamp_ms_deltas != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  timestamp_ms_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp_ms_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.GenericPacketSent.timestamp_ms_deltas)
}

// optional bytes packet_number_deltas = 18;
inline bool GenericPacketSent::has_packet_number_deltas() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GenericPacketSent::clear_packet_number_deltas() {
  packet_number_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GenericPacketSent::packet_number_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.GenericPacketSent.packet_number_deltas)
  return packet_number_deltas_.GetNoArena();
}
inline void GenericPacketSent::set_packet_number_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  packet_number_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.GenericPacketSent.packet_number_deltas)
}
inline void GenericPacketSent::set_packet_number_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  packet_number_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.GenericPacketSent.packet_number_deltas)
}
inline void GenericPacketSent::set_packet_number_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  packet_number_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.GenericPacketSent.packet_number_deltas)
}
inline void GenericPacketSent::set_packet_number_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  packet_number_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.GenericPacketSent.packet_number_deltas)
}
inline std::string* GenericPacketSent::mutable_packet_number_deltas() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.GenericPacketSent.packet_number_deltas)
  return packet_number_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GenericPacketSent::release_packet_number_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.GenericPacketSent.packet_number_deltas)
  if (!has_packet_number_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return packet_number_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GenericPacketSent::set_allocated_packet_number_deltas(std::string* packet_number_deltas) {
  if (packet_number_deltas != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  packet_number_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), packet_number_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.GenericPacketSent.packet_number_deltas)
}

// optional bytes overhead_length_deltas = 19;
inline bool GenericPacketSent::has_overhead_length_deltas() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GenericPacketSent::clear_overhead_length_deltas() {
  overhead_length_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& GenericPacketSent::overhead_length_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.GenericPacketSent.overhead_length_deltas)
  return overhead_length_deltas_.GetNoArena();
}
inline void GenericPacketSent::set_overhead_length_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  overhead_length_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.GenericPacketSent.overhead_length_deltas)
}
inline void GenericPacketSent::set_overhead_length_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  overhead_length_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.GenericPacketSent.overhead_length_deltas)
}
inline void GenericPacketSent::set_overhead_length_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  overhead_length_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.GenericPacketSent.overhead_length_deltas)
}
inline void GenericPacketSent::set_overhead_length_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  overhead_length_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.GenericPacketSent.overhead_length_deltas)
}
inline std::string* GenericPacketSent::mutable_overhead_length_deltas() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.GenericPacketSent.overhead_length_deltas)
  return overhead_length_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GenericPacketSent::release_overhead_length_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.GenericPacketSent.overhead_length_deltas)
  if (!has_overhead_length_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return overhead_length_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GenericPacketSent::set_allocated_overhead_length_deltas(std::string* overhead_length_deltas) {
  if (overhead_length_deltas != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  overhead_length_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), overhead_length_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.GenericPacketSent.overhead_length_deltas)
}

// optional bytes payload_length_deltas = 20;
inline bool GenericPacketSent::has_payload_length_deltas() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GenericPacketSent::clear_payload_length_deltas() {
  payload_length_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& GenericPacketSent::payload_length_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.GenericPacketSent.payload_length_deltas)
  return payload_length_deltas_.GetNoArena();
}
inline void GenericPacketSent::set_payload_length_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  payload_length_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.GenericPacketSent.payload_length_deltas)
}
inline void GenericPacketSent::set_payload_length_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  payload_length_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.GenericPacketSent.payload_length_deltas)
}
inline void GenericPacketSent::set_payload_length_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  payload_length_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.GenericPacketSent.payload_length_deltas)
}
inline void GenericPacketSent::set_payload_length_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  payload_length_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.GenericPacketSent.payload_length_deltas)
}
inline std::string* GenericPacketSent::mutable_payload_length_deltas() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.GenericPacketSent.payload_length_deltas)
  return payload_length_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GenericPacketSent::release_payload_length_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.GenericPacketSent.payload_length_deltas)
  if (!has_payload_length_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return payload_length_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GenericPacketSent::set_allocated_payload_length_deltas(std::string* payload_length_deltas) {
  if (payload_length_deltas != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  payload_length_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload_length_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.GenericPacketSent.payload_length_deltas)
}

// optional bytes padding_length_deltas = 21;
inline bool GenericPacketSent::has_padding_length_deltas() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GenericPacketSent::clear_padding_length_deltas() {
  padding_length_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& GenericPacketSent::padding_length_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.GenericPacketSent.padding_length_deltas)
  return padding_length_deltas_.GetNoArena();
}
inline void GenericPacketSent::set_padding_length_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  padding_length_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.GenericPacketSent.padding_length_deltas)
}
inline void GenericPacketSent::set_padding_length_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  padding_length_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.GenericPacketSent.padding_length_deltas)
}
inline void GenericPacketSent::set_padding_length_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  padding_length_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.GenericPacketSent.padding_length_deltas)
}
inline void GenericPacketSent::set_padding_length_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  padding_length_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.GenericPacketSent.padding_length_deltas)
}
inline std::string* GenericPacketSent::mutable_padding_length_deltas() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.GenericPacketSent.padding_length_deltas)
  return padding_length_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GenericPacketSent::release_padding_length_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.GenericPacketSent.padding_length_deltas)
  if (!has_padding_length_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return padding_length_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GenericPacketSent::set_allocated_padding_length_deltas(std::string* padding_length_deltas) {
  if (padding_length_deltas != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  padding_length_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), padding_length_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.GenericPacketSent.padding_length_deltas)
}

// -------------------------------------------------------------------

// GenericAckReceived

// optional int64 timestamp_ms = 1;
inline bool GenericAckReceived::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GenericAckReceived::clear_timestamp_ms() {
  timestamp_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenericAckReceived::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.GenericAckReceived.timestamp_ms)
  return timestamp_ms_;
}
inline void GenericAckReceived::set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.GenericAckReceived.timestamp_ms)
}

// optional int64 packet_number = 2;
inline bool GenericAckReceived::has_packet_number() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GenericAckReceived::clear_packet_number() {
  packet_number_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenericAckReceived::packet_number() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.GenericAckReceived.packet_number)
  return packet_number_;
}
inline void GenericAckReceived::set_packet_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  packet_number_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.GenericAckReceived.packet_number)
}

// optional int64 acked_packet_number = 3;
inline bool GenericAckReceived::has_acked_packet_number() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GenericAckReceived::clear_acked_packet_number() {
  acked_packet_number_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenericAckReceived::acked_packet_number() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.GenericAckReceived.acked_packet_number)
  return acked_packet_number_;
}
inline void GenericAckReceived::set_acked_packet_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  acked_packet_number_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.GenericAckReceived.acked_packet_number)
}

// optional int64 receive_acked_packet_time_ms = 4;
inline bool GenericAckReceived::has_receive_acked_packet_time_ms() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GenericAckReceived::clear_receive_acked_packet_time_ms() {
  receive_acked_packet_time_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenericAckReceived::receive_acked_packet_time_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.GenericAckReceived.receive_acked_packet_time_ms)
  return receive_acked_packet_time_ms_;
}
inline void GenericAckReceived::set_receive_acked_packet_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  receive_acked_packet_time_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.GenericAckReceived.receive_acked_packet_time_ms)
}

// optional uint32 number_of_deltas = 16;
inline bool GenericAckReceived::has_number_of_deltas() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GenericAckReceived::clear_number_of_deltas() {
  number_of_deltas_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GenericAckReceived::number_of_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.GenericAckReceived.number_of_deltas)
  return number_of_deltas_;
}
inline void GenericAckReceived::set_number_of_deltas(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  number_of_deltas_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.GenericAckReceived.number_of_deltas)
}

// optional bytes timestamp_ms_deltas = 17;
inline bool GenericAckReceived::has_timestamp_ms_deltas() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GenericAckReceived::clear_timestamp_ms_deltas() {
  timestamp_ms_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GenericAckReceived::timestamp_ms_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.GenericAckReceived.timestamp_ms_deltas)
  return timestamp_ms_deltas_.GetNoArena();
}
inline void GenericAckReceived::set_timestamp_ms_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.GenericAckReceived.timestamp_ms_deltas)
}
inline void GenericAckReceived::set_timestamp_ms_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.GenericAckReceived.timestamp_ms_deltas)
}
inline void GenericAckReceived::set_timestamp_ms_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.GenericAckReceived.timestamp_ms_deltas)
}
inline void GenericAckReceived::set_timestamp_ms_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.GenericAckReceived.timestamp_ms_deltas)
}
inline std::string* GenericAckReceived::mutable_timestamp_ms_deltas() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.GenericAckReceived.timestamp_ms_deltas)
  return timestamp_ms_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GenericAckReceived::release_timestamp_ms_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.GenericAckReceived.timestamp_ms_deltas)
  if (!has_timestamp_ms_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return timestamp_ms_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GenericAckReceived::set_allocated_timestamp_ms_deltas(std::string* timestamp_ms_deltas) {
  if (timestamp_ms_deltas != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  timestamp_ms_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp_ms_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.GenericAckReceived.timestamp_ms_deltas)
}

// optional bytes packet_number_deltas = 18;
inline bool GenericAckReceived::has_packet_number_deltas() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GenericAckReceived::clear_packet_number_deltas() {
  packet_number_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GenericAckReceived::packet_number_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.GenericAckReceived.packet_number_deltas)
  return packet_number_deltas_.GetNoArena();
}
inline void GenericAckReceived::set_packet_number_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  packet_number_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.GenericAckReceived.packet_number_deltas)
}
inline void GenericAckReceived::set_packet_number_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  packet_number_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.GenericAckReceived.packet_number_deltas)
}
inline void GenericAckReceived::set_packet_number_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  packet_number_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.GenericAckReceived.packet_number_deltas)
}
inline void GenericAckReceived::set_packet_number_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  packet_number_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.GenericAckReceived.packet_number_deltas)
}
inline std::string* GenericAckReceived::mutable_packet_number_deltas() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.GenericAckReceived.packet_number_deltas)
  return packet_number_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GenericAckReceived::release_packet_number_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.GenericAckReceived.packet_number_deltas)
  if (!has_packet_number_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return packet_number_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GenericAckReceived::set_allocated_packet_number_deltas(std::string* packet_number_deltas) {
  if (packet_number_deltas != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  packet_number_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), packet_number_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.GenericAckReceived.packet_number_deltas)
}

// optional bytes acked_packet_number_deltas = 19;
inline bool GenericAckReceived::has_acked_packet_number_deltas() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GenericAckReceived::clear_acked_packet_number_deltas() {
  acked_packet_number_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& GenericAckReceived::acked_packet_number_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.GenericAckReceived.acked_packet_number_deltas)
  return acked_packet_number_deltas_.GetNoArena();
}
inline void GenericAckReceived::set_acked_packet_number_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  acked_packet_number_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.GenericAckReceived.acked_packet_number_deltas)
}
inline void GenericAckReceived::set_acked_packet_number_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  acked_packet_number_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.GenericAckReceived.acked_packet_number_deltas)
}
inline void GenericAckReceived::set_acked_packet_number_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  acked_packet_number_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.GenericAckReceived.acked_packet_number_deltas)
}
inline void GenericAckReceived::set_acked_packet_number_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  acked_packet_number_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.GenericAckReceived.acked_packet_number_deltas)
}
inline std::string* GenericAckReceived::mutable_acked_packet_number_deltas() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.GenericAckReceived.acked_packet_number_deltas)
  return acked_packet_number_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GenericAckReceived::release_acked_packet_number_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.GenericAckReceived.acked_packet_number_deltas)
  if (!has_acked_packet_number_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return acked_packet_number_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GenericAckReceived::set_allocated_acked_packet_number_deltas(std::string* acked_packet_number_deltas) {
  if (acked_packet_number_deltas != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  acked_packet_number_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), acked_packet_number_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.GenericAckReceived.acked_packet_number_deltas)
}

// optional bytes receive_acked_packet_time_ms_deltas = 20;
inline bool GenericAckReceived::has_receive_acked_packet_time_ms_deltas() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GenericAckReceived::clear_receive_acked_packet_time_ms_deltas() {
  receive_acked_packet_time_ms_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& GenericAckReceived::receive_acked_packet_time_ms_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.GenericAckReceived.receive_acked_packet_time_ms_deltas)
  return receive_acked_packet_time_ms_deltas_.GetNoArena();
}
inline void GenericAckReceived::set_receive_acked_packet_time_ms_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  receive_acked_packet_time_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.GenericAckReceived.receive_acked_packet_time_ms_deltas)
}
inline void GenericAckReceived::set_receive_acked_packet_time_ms_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  receive_acked_packet_time_ms_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.GenericAckReceived.receive_acked_packet_time_ms_deltas)
}
inline void GenericAckReceived::set_receive_acked_packet_time_ms_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  receive_acked_packet_time_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.GenericAckReceived.receive_acked_packet_time_ms_deltas)
}
inline void GenericAckReceived::set_receive_acked_packet_time_ms_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  receive_acked_packet_time_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.GenericAckReceived.receive_acked_packet_time_ms_deltas)
}
inline std::string* GenericAckReceived::mutable_receive_acked_packet_time_ms_deltas() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.GenericAckReceived.receive_acked_packet_time_ms_deltas)
  return receive_acked_packet_time_ms_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GenericAckReceived::release_receive_acked_packet_time_ms_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.GenericAckReceived.receive_acked_packet_time_ms_deltas)
  if (!has_receive_acked_packet_time_ms_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return receive_acked_packet_time_ms_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GenericAckReceived::set_allocated_receive_acked_packet_time_ms_deltas(std::string* receive_acked_packet_time_ms_deltas) {
  if (receive_acked_packet_time_ms_deltas != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  receive_acked_packet_time_ms_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receive_acked_packet_time_ms_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.GenericAckReceived.receive_acked_packet_time_ms_deltas)
}

// -------------------------------------------------------------------

// IncomingRtpPackets

// optional int64 timestamp_ms = 1;
inline bool IncomingRtpPackets::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void IncomingRtpPackets::clear_timestamp_ms() {
  timestamp_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IncomingRtpPackets::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.timestamp_ms)
  return timestamp_ms_;
}
inline void IncomingRtpPackets::set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00008000u;
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.timestamp_ms)
}

// optional bool marker = 2;
inline bool IncomingRtpPackets::has_marker() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void IncomingRtpPackets::clear_marker() {
  marker_ = false;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool IncomingRtpPackets::marker() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.marker)
  return marker_;
}
inline void IncomingRtpPackets::set_marker(bool value) {
  _has_bits_[0] |= 0x01000000u;
  marker_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.marker)
}

// optional uint32 payload_type = 3;
inline bool IncomingRtpPackets::has_payload_type() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void IncomingRtpPackets::clear_payload_type() {
  payload_type_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IncomingRtpPackets::payload_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.payload_type)
  return payload_type_;
}
inline void IncomingRtpPackets::set_payload_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  payload_type_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.payload_type)
}

// optional uint32 sequence_number = 4;
inline bool IncomingRtpPackets::has_sequence_number() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void IncomingRtpPackets::clear_sequence_number() {
  sequence_number_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IncomingRtpPackets::sequence_number() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.sequence_number)
  return sequence_number_;
}
inline void IncomingRtpPackets::set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.sequence_number)
}

// optional fixed32 rtp_timestamp = 5;
inline bool IncomingRtpPackets::has_rtp_timestamp() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void IncomingRtpPackets::clear_rtp_timestamp() {
  rtp_timestamp_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IncomingRtpPackets::rtp_timestamp() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.rtp_timestamp)
  return rtp_timestamp_;
}
inline void IncomingRtpPackets::set_rtp_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  rtp_timestamp_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.rtp_timestamp)
}

// optional fixed32 ssrc = 6;
inline bool IncomingRtpPackets::has_ssrc() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void IncomingRtpPackets::clear_ssrc() {
  ssrc_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IncomingRtpPackets::ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.ssrc)
  return ssrc_;
}
inline void IncomingRtpPackets::set_ssrc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.ssrc)
}

// optional uint32 payload_size = 8;
inline bool IncomingRtpPackets::has_payload_size() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void IncomingRtpPackets::clear_payload_size() {
  payload_size_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IncomingRtpPackets::payload_size() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.payload_size)
  return payload_size_;
}
inline void IncomingRtpPackets::set_payload_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  payload_size_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.payload_size)
}

// optional uint32 header_size = 9;
inline bool IncomingRtpPackets::has_header_size() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void IncomingRtpPackets::clear_header_size() {
  header_size_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IncomingRtpPackets::header_size() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.header_size)
  return header_size_;
}
inline void IncomingRtpPackets::set_header_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  header_size_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.header_size)
}

// optional uint32 padding_size = 10;
inline bool IncomingRtpPackets::has_padding_size() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void IncomingRtpPackets::clear_padding_size() {
  padding_size_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IncomingRtpPackets::padding_size() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.padding_size)
  return padding_size_;
}
inline void IncomingRtpPackets::set_padding_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  padding_size_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.padding_size)
}

// optional uint32 number_of_deltas = 11;
inline bool IncomingRtpPackets::has_number_of_deltas() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void IncomingRtpPackets::clear_number_of_deltas() {
  number_of_deltas_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IncomingRtpPackets::number_of_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.number_of_deltas)
  return number_of_deltas_;
}
inline void IncomingRtpPackets::set_number_of_deltas(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00800000u;
  number_of_deltas_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.number_of_deltas)
}

// optional uint32 transport_sequence_number = 15;
inline bool IncomingRtpPackets::has_transport_sequence_number() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void IncomingRtpPackets::clear_transport_sequence_number() {
  transport_sequence_number_ = 0u;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IncomingRtpPackets::transport_sequence_number() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.transport_sequence_number)
  return transport_sequence_number_;
}
inline void IncomingRtpPackets::set_transport_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x04000000u;
  transport_sequence_number_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.transport_sequence_number)
}

// optional int32 transmission_time_offset = 16;
inline bool IncomingRtpPackets::has_transmission_time_offset() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void IncomingRtpPackets::clear_transmission_time_offset() {
  transmission_time_offset_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IncomingRtpPackets::transmission_time_offset() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.transmission_time_offset)
  return transmission_time_offset_;
}
inline void IncomingRtpPackets::set_transmission_time_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x08000000u;
  transmission_time_offset_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.transmission_time_offset)
}

// optional uint32 absolute_send_time = 17;
inline bool IncomingRtpPackets::has_absolute_send_time() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void IncomingRtpPackets::clear_absolute_send_time() {
  absolute_send_time_ = 0u;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IncomingRtpPackets::absolute_send_time() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.absolute_send_time)
  return absolute_send_time_;
}
inline void IncomingRtpPackets::set_absolute_send_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x10000000u;
  absolute_send_time_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.absolute_send_time)
}

// optional uint32 video_rotation = 18;
inline bool IncomingRtpPackets::has_video_rotation() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void IncomingRtpPackets::clear_video_rotation() {
  video_rotation_ = 0u;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IncomingRtpPackets::video_rotation() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.video_rotation)
  return video_rotation_;
}
inline void IncomingRtpPackets::set_video_rotation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x20000000u;
  video_rotation_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.video_rotation)
}

// optional uint32 audio_level = 19;
inline bool IncomingRtpPackets::has_audio_level() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void IncomingRtpPackets::clear_audio_level() {
  audio_level_ = 0u;
  _has_bits_[0] &= ~0x40000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IncomingRtpPackets::audio_level() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.audio_level)
  return audio_level_;
}
inline void IncomingRtpPackets::set_audio_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x40000000u;
  audio_level_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.audio_level)
}

// optional bool voice_activity = 20;
inline bool IncomingRtpPackets::has_voice_activity() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void IncomingRtpPackets::clear_voice_activity() {
  voice_activity_ = false;
  _has_bits_[0] &= ~0x02000000u;
}
inline bool IncomingRtpPackets::voice_activity() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.voice_activity)
  return voice_activity_;
}
inline void IncomingRtpPackets::set_voice_activity(bool value) {
  _has_bits_[0] |= 0x02000000u;
  voice_activity_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.voice_activity)
}

// optional bytes timestamp_ms_deltas = 101;
inline bool IncomingRtpPackets::has_timestamp_ms_deltas() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IncomingRtpPackets::clear_timestamp_ms_deltas() {
  timestamp_ms_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IncomingRtpPackets::timestamp_ms_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.timestamp_ms_deltas)
  return timestamp_ms_deltas_.GetNoArena();
}
inline void IncomingRtpPackets::set_timestamp_ms_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.timestamp_ms_deltas)
}
inline void IncomingRtpPackets::set_timestamp_ms_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.timestamp_ms_deltas)
}
inline void IncomingRtpPackets::set_timestamp_ms_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.timestamp_ms_deltas)
}
inline void IncomingRtpPackets::set_timestamp_ms_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.timestamp_ms_deltas)
}
inline std::string* IncomingRtpPackets::mutable_timestamp_ms_deltas() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.timestamp_ms_deltas)
  return timestamp_ms_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IncomingRtpPackets::release_timestamp_ms_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.timestamp_ms_deltas)
  if (!has_timestamp_ms_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return timestamp_ms_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IncomingRtpPackets::set_allocated_timestamp_ms_deltas(std::string* timestamp_ms_deltas) {
  if (timestamp_ms_deltas != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  timestamp_ms_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp_ms_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.timestamp_ms_deltas)
}

// optional bytes marker_deltas = 102;
inline bool IncomingRtpPackets::has_marker_deltas() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IncomingRtpPackets::clear_marker_deltas() {
  marker_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& IncomingRtpPackets::marker_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.marker_deltas)
  return marker_deltas_.GetNoArena();
}
inline void IncomingRtpPackets::set_marker_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  marker_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.marker_deltas)
}
inline void IncomingRtpPackets::set_marker_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  marker_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.marker_deltas)
}
inline void IncomingRtpPackets::set_marker_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  marker_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.marker_deltas)
}
inline void IncomingRtpPackets::set_marker_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  marker_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.marker_deltas)
}
inline std::string* IncomingRtpPackets::mutable_marker_deltas() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.marker_deltas)
  return marker_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IncomingRtpPackets::release_marker_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.marker_deltas)
  if (!has_marker_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return marker_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IncomingRtpPackets::set_allocated_marker_deltas(std::string* marker_deltas) {
  if (marker_deltas != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  marker_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marker_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.marker_deltas)
}

// optional bytes payload_type_deltas = 103;
inline bool IncomingRtpPackets::has_payload_type_deltas() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IncomingRtpPackets::clear_payload_type_deltas() {
  payload_type_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& IncomingRtpPackets::payload_type_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.payload_type_deltas)
  return payload_type_deltas_.GetNoArena();
}
inline void IncomingRtpPackets::set_payload_type_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  payload_type_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.payload_type_deltas)
}
inline void IncomingRtpPackets::set_payload_type_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  payload_type_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.payload_type_deltas)
}
inline void IncomingRtpPackets::set_payload_type_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  payload_type_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.payload_type_deltas)
}
inline void IncomingRtpPackets::set_payload_type_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  payload_type_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.payload_type_deltas)
}
inline std::string* IncomingRtpPackets::mutable_payload_type_deltas() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.payload_type_deltas)
  return payload_type_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IncomingRtpPackets::release_payload_type_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.payload_type_deltas)
  if (!has_payload_type_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return payload_type_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IncomingRtpPackets::set_allocated_payload_type_deltas(std::string* payload_type_deltas) {
  if (payload_type_deltas != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  payload_type_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload_type_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.payload_type_deltas)
}

// optional bytes sequence_number_deltas = 104;
inline bool IncomingRtpPackets::has_sequence_number_deltas() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IncomingRtpPackets::clear_sequence_number_deltas() {
  sequence_number_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& IncomingRtpPackets::sequence_number_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.sequence_number_deltas)
  return sequence_number_deltas_.GetNoArena();
}
inline void IncomingRtpPackets::set_sequence_number_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  sequence_number_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.sequence_number_deltas)
}
inline void IncomingRtpPackets::set_sequence_number_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  sequence_number_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.sequence_number_deltas)
}
inline void IncomingRtpPackets::set_sequence_number_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  sequence_number_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.sequence_number_deltas)
}
inline void IncomingRtpPackets::set_sequence_number_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  sequence_number_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.sequence_number_deltas)
}
inline std::string* IncomingRtpPackets::mutable_sequence_number_deltas() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.sequence_number_deltas)
  return sequence_number_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IncomingRtpPackets::release_sequence_number_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.sequence_number_deltas)
  if (!has_sequence_number_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return sequence_number_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IncomingRtpPackets::set_allocated_sequence_number_deltas(std::string* sequence_number_deltas) {
  if (sequence_number_deltas != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  sequence_number_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sequence_number_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.sequence_number_deltas)
}

// optional bytes rtp_timestamp_deltas = 105;
inline bool IncomingRtpPackets::has_rtp_timestamp_deltas() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IncomingRtpPackets::clear_rtp_timestamp_deltas() {
  rtp_timestamp_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& IncomingRtpPackets::rtp_timestamp_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.rtp_timestamp_deltas)
  return rtp_timestamp_deltas_.GetNoArena();
}
inline void IncomingRtpPackets::set_rtp_timestamp_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  rtp_timestamp_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.rtp_timestamp_deltas)
}
inline void IncomingRtpPackets::set_rtp_timestamp_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  rtp_timestamp_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.rtp_timestamp_deltas)
}
inline void IncomingRtpPackets::set_rtp_timestamp_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  rtp_timestamp_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.rtp_timestamp_deltas)
}
inline void IncomingRtpPackets::set_rtp_timestamp_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  rtp_timestamp_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.rtp_timestamp_deltas)
}
inline std::string* IncomingRtpPackets::mutable_rtp_timestamp_deltas() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.rtp_timestamp_deltas)
  return rtp_timestamp_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IncomingRtpPackets::release_rtp_timestamp_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.rtp_timestamp_deltas)
  if (!has_rtp_timestamp_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return rtp_timestamp_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IncomingRtpPackets::set_allocated_rtp_timestamp_deltas(std::string* rtp_timestamp_deltas) {
  if (rtp_timestamp_deltas != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  rtp_timestamp_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rtp_timestamp_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.rtp_timestamp_deltas)
}

// optional bytes ssrc_deltas = 106;
inline bool IncomingRtpPackets::has_ssrc_deltas() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IncomingRtpPackets::clear_ssrc_deltas() {
  ssrc_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& IncomingRtpPackets::ssrc_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.ssrc_deltas)
  return ssrc_deltas_.GetNoArena();
}
inline void IncomingRtpPackets::set_ssrc_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  ssrc_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.ssrc_deltas)
}
inline void IncomingRtpPackets::set_ssrc_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  ssrc_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.ssrc_deltas)
}
inline void IncomingRtpPackets::set_ssrc_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  ssrc_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.ssrc_deltas)
}
inline void IncomingRtpPackets::set_ssrc_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  ssrc_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.ssrc_deltas)
}
inline std::string* IncomingRtpPackets::mutable_ssrc_deltas() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.ssrc_deltas)
  return ssrc_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IncomingRtpPackets::release_ssrc_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.ssrc_deltas)
  if (!has_ssrc_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return ssrc_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IncomingRtpPackets::set_allocated_ssrc_deltas(std::string* ssrc_deltas) {
  if (ssrc_deltas != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  ssrc_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ssrc_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.ssrc_deltas)
}

// optional bytes payload_size_deltas = 108;
inline bool IncomingRtpPackets::has_payload_size_deltas() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IncomingRtpPackets::clear_payload_size_deltas() {
  payload_size_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& IncomingRtpPackets::payload_size_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.payload_size_deltas)
  return payload_size_deltas_.GetNoArena();
}
inline void IncomingRtpPackets::set_payload_size_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  payload_size_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.payload_size_deltas)
}
inline void IncomingRtpPackets::set_payload_size_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  payload_size_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.payload_size_deltas)
}
inline void IncomingRtpPackets::set_payload_size_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  payload_size_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.payload_size_deltas)
}
inline void IncomingRtpPackets::set_payload_size_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  payload_size_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.payload_size_deltas)
}
inline std::string* IncomingRtpPackets::mutable_payload_size_deltas() {
  _has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.payload_size_deltas)
  return payload_size_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IncomingRtpPackets::release_payload_size_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.payload_size_deltas)
  if (!has_payload_size_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return payload_size_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IncomingRtpPackets::set_allocated_payload_size_deltas(std::string* payload_size_deltas) {
  if (payload_size_deltas != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  payload_size_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload_size_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.payload_size_deltas)
}

// optional bytes header_size_deltas = 109;
inline bool IncomingRtpPackets::has_header_size_deltas() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IncomingRtpPackets::clear_header_size_deltas() {
  header_size_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& IncomingRtpPackets::header_size_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.header_size_deltas)
  return header_size_deltas_.GetNoArena();
}
inline void IncomingRtpPackets::set_header_size_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  header_size_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.header_size_deltas)
}
inline void IncomingRtpPackets::set_header_size_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  header_size_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.header_size_deltas)
}
inline void IncomingRtpPackets::set_header_size_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  header_size_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.header_size_deltas)
}
inline void IncomingRtpPackets::set_header_size_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000080u;
  header_size_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.header_size_deltas)
}
inline std::string* IncomingRtpPackets::mutable_header_size_deltas() {
  _has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.header_size_deltas)
  return header_size_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IncomingRtpPackets::release_header_size_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.header_size_deltas)
  if (!has_header_size_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return header_size_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IncomingRtpPackets::set_allocated_header_size_deltas(std::string* header_size_deltas) {
  if (header_size_deltas != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  header_size_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), header_size_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.header_size_deltas)
}

// optional bytes padding_size_deltas = 110;
inline bool IncomingRtpPackets::has_padding_size_deltas() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IncomingRtpPackets::clear_padding_size_deltas() {
  padding_size_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& IncomingRtpPackets::padding_size_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.padding_size_deltas)
  return padding_size_deltas_.GetNoArena();
}
inline void IncomingRtpPackets::set_padding_size_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  padding_size_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.padding_size_deltas)
}
inline void IncomingRtpPackets::set_padding_size_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  padding_size_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.padding_size_deltas)
}
inline void IncomingRtpPackets::set_padding_size_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  padding_size_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.padding_size_deltas)
}
inline void IncomingRtpPackets::set_padding_size_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000100u;
  padding_size_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.padding_size_deltas)
}
inline std::string* IncomingRtpPackets::mutable_padding_size_deltas() {
  _has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.padding_size_deltas)
  return padding_size_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IncomingRtpPackets::release_padding_size_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.padding_size_deltas)
  if (!has_padding_size_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return padding_size_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IncomingRtpPackets::set_allocated_padding_size_deltas(std::string* padding_size_deltas) {
  if (padding_size_deltas != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  padding_size_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), padding_size_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.padding_size_deltas)
}

// optional bytes transport_sequence_number_deltas = 115;
inline bool IncomingRtpPackets::has_transport_sequence_number_deltas() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IncomingRtpPackets::clear_transport_sequence_number_deltas() {
  transport_sequence_number_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& IncomingRtpPackets::transport_sequence_number_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.transport_sequence_number_deltas)
  return transport_sequence_number_deltas_.GetNoArena();
}
inline void IncomingRtpPackets::set_transport_sequence_number_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  transport_sequence_number_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.transport_sequence_number_deltas)
}
inline void IncomingRtpPackets::set_transport_sequence_number_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  transport_sequence_number_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.transport_sequence_number_deltas)
}
inline void IncomingRtpPackets::set_transport_sequence_number_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  transport_sequence_number_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.transport_sequence_number_deltas)
}
inline void IncomingRtpPackets::set_transport_sequence_number_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000200u;
  transport_sequence_number_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.transport_sequence_number_deltas)
}
inline std::string* IncomingRtpPackets::mutable_transport_sequence_number_deltas() {
  _has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.transport_sequence_number_deltas)
  return transport_sequence_number_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IncomingRtpPackets::release_transport_sequence_number_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.transport_sequence_number_deltas)
  if (!has_transport_sequence_number_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return transport_sequence_number_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IncomingRtpPackets::set_allocated_transport_sequence_number_deltas(std::string* transport_sequence_number_deltas) {
  if (transport_sequence_number_deltas != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  transport_sequence_number_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transport_sequence_number_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.transport_sequence_number_deltas)
}

// optional bytes transmission_time_offset_deltas = 116;
inline bool IncomingRtpPackets::has_transmission_time_offset_deltas() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void IncomingRtpPackets::clear_transmission_time_offset_deltas() {
  transmission_time_offset_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& IncomingRtpPackets::transmission_time_offset_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.transmission_time_offset_deltas)
  return transmission_time_offset_deltas_.GetNoArena();
}
inline void IncomingRtpPackets::set_transmission_time_offset_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  transmission_time_offset_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.transmission_time_offset_deltas)
}
inline void IncomingRtpPackets::set_transmission_time_offset_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000400u;
  transmission_time_offset_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.transmission_time_offset_deltas)
}
inline void IncomingRtpPackets::set_transmission_time_offset_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000400u;
  transmission_time_offset_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.transmission_time_offset_deltas)
}
inline void IncomingRtpPackets::set_transmission_time_offset_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000400u;
  transmission_time_offset_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.transmission_time_offset_deltas)
}
inline std::string* IncomingRtpPackets::mutable_transmission_time_offset_deltas() {
  _has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.transmission_time_offset_deltas)
  return transmission_time_offset_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IncomingRtpPackets::release_transmission_time_offset_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.transmission_time_offset_deltas)
  if (!has_transmission_time_offset_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  return transmission_time_offset_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IncomingRtpPackets::set_allocated_transmission_time_offset_deltas(std::string* transmission_time_offset_deltas) {
  if (transmission_time_offset_deltas != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  transmission_time_offset_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transmission_time_offset_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.transmission_time_offset_deltas)
}

// optional bytes absolute_send_time_deltas = 117;
inline bool IncomingRtpPackets::has_absolute_send_time_deltas() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void IncomingRtpPackets::clear_absolute_send_time_deltas() {
  absolute_send_time_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000800u;
}
inline const std::string& IncomingRtpPackets::absolute_send_time_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.absolute_send_time_deltas)
  return absolute_send_time_deltas_.GetNoArena();
}
inline void IncomingRtpPackets::set_absolute_send_time_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000800u;
  absolute_send_time_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.absolute_send_time_deltas)
}
inline void IncomingRtpPackets::set_absolute_send_time_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000800u;
  absolute_send_time_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.absolute_send_time_deltas)
}
inline void IncomingRtpPackets::set_absolute_send_time_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000800u;
  absolute_send_time_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.absolute_send_time_deltas)
}
inline void IncomingRtpPackets::set_absolute_send_time_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000800u;
  absolute_send_time_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.absolute_send_time_deltas)
}
inline std::string* IncomingRtpPackets::mutable_absolute_send_time_deltas() {
  _has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.absolute_send_time_deltas)
  return absolute_send_time_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IncomingRtpPackets::release_absolute_send_time_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.absolute_send_time_deltas)
  if (!has_absolute_send_time_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000800u;
  return absolute_send_time_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IncomingRtpPackets::set_allocated_absolute_send_time_deltas(std::string* absolute_send_time_deltas) {
  if (absolute_send_time_deltas != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  absolute_send_time_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), absolute_send_time_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.absolute_send_time_deltas)
}

// optional bytes video_rotation_deltas = 118;
inline bool IncomingRtpPackets::has_video_rotation_deltas() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void IncomingRtpPackets::clear_video_rotation_deltas() {
  video_rotation_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00001000u;
}
inline const std::string& IncomingRtpPackets::video_rotation_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.video_rotation_deltas)
  return video_rotation_deltas_.GetNoArena();
}
inline void IncomingRtpPackets::set_video_rotation_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00001000u;
  video_rotation_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.video_rotation_deltas)
}
inline void IncomingRtpPackets::set_video_rotation_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00001000u;
  video_rotation_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.video_rotation_deltas)
}
inline void IncomingRtpPackets::set_video_rotation_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00001000u;
  video_rotation_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.video_rotation_deltas)
}
inline void IncomingRtpPackets::set_video_rotation_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00001000u;
  video_rotation_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.video_rotation_deltas)
}
inline std::string* IncomingRtpPackets::mutable_video_rotation_deltas() {
  _has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.video_rotation_deltas)
  return video_rotation_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IncomingRtpPackets::release_video_rotation_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.video_rotation_deltas)
  if (!has_video_rotation_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00001000u;
  return video_rotation_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IncomingRtpPackets::set_allocated_video_rotation_deltas(std::string* video_rotation_deltas) {
  if (video_rotation_deltas != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  video_rotation_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), video_rotation_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.video_rotation_deltas)
}

// optional bytes audio_level_deltas = 119;
inline bool IncomingRtpPackets::has_audio_level_deltas() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void IncomingRtpPackets::clear_audio_level_deltas() {
  audio_level_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00002000u;
}
inline const std::string& IncomingRtpPackets::audio_level_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.audio_level_deltas)
  return audio_level_deltas_.GetNoArena();
}
inline void IncomingRtpPackets::set_audio_level_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00002000u;
  audio_level_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.audio_level_deltas)
}
inline void IncomingRtpPackets::set_audio_level_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00002000u;
  audio_level_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.audio_level_deltas)
}
inline void IncomingRtpPackets::set_audio_level_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00002000u;
  audio_level_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.audio_level_deltas)
}
inline void IncomingRtpPackets::set_audio_level_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00002000u;
  audio_level_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.audio_level_deltas)
}
inline std::string* IncomingRtpPackets::mutable_audio_level_deltas() {
  _has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.audio_level_deltas)
  return audio_level_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IncomingRtpPackets::release_audio_level_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.audio_level_deltas)
  if (!has_audio_level_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00002000u;
  return audio_level_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IncomingRtpPackets::set_allocated_audio_level_deltas(std::string* audio_level_deltas) {
  if (audio_level_deltas != nullptr) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  audio_level_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), audio_level_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.audio_level_deltas)
}

// optional bytes voice_activity_deltas = 120;
inline bool IncomingRtpPackets::has_voice_activity_deltas() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void IncomingRtpPackets::clear_voice_activity_deltas() {
  voice_activity_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00004000u;
}
inline const std::string& IncomingRtpPackets::voice_activity_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.voice_activity_deltas)
  return voice_activity_deltas_.GetNoArena();
}
inline void IncomingRtpPackets::set_voice_activity_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00004000u;
  voice_activity_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.voice_activity_deltas)
}
inline void IncomingRtpPackets::set_voice_activity_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00004000u;
  voice_activity_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.voice_activity_deltas)
}
inline void IncomingRtpPackets::set_voice_activity_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00004000u;
  voice_activity_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.voice_activity_deltas)
}
inline void IncomingRtpPackets::set_voice_activity_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00004000u;
  voice_activity_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.voice_activity_deltas)
}
inline std::string* IncomingRtpPackets::mutable_voice_activity_deltas() {
  _has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.voice_activity_deltas)
  return voice_activity_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IncomingRtpPackets::release_voice_activity_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.voice_activity_deltas)
  if (!has_voice_activity_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00004000u;
  return voice_activity_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IncomingRtpPackets::set_allocated_voice_activity_deltas(std::string* voice_activity_deltas) {
  if (voice_activity_deltas != nullptr) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  voice_activity_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), voice_activity_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.voice_activity_deltas)
}

// -------------------------------------------------------------------

// OutgoingRtpPackets

// optional int64 timestamp_ms = 1;
inline bool OutgoingRtpPackets::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void OutgoingRtpPackets::clear_timestamp_ms() {
  timestamp_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OutgoingRtpPackets::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.timestamp_ms)
  return timestamp_ms_;
}
inline void OutgoingRtpPackets::set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00008000u;
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.timestamp_ms)
}

// optional bool marker = 2;
inline bool OutgoingRtpPackets::has_marker() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void OutgoingRtpPackets::clear_marker() {
  marker_ = false;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool OutgoingRtpPackets::marker() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.marker)
  return marker_;
}
inline void OutgoingRtpPackets::set_marker(bool value) {
  _has_bits_[0] |= 0x01000000u;
  marker_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.marker)
}

// optional uint32 payload_type = 3;
inline bool OutgoingRtpPackets::has_payload_type() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void OutgoingRtpPackets::clear_payload_type() {
  payload_type_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutgoingRtpPackets::payload_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.payload_type)
  return payload_type_;
}
inline void OutgoingRtpPackets::set_payload_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  payload_type_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.payload_type)
}

// optional uint32 sequence_number = 4;
inline bool OutgoingRtpPackets::has_sequence_number() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void OutgoingRtpPackets::clear_sequence_number() {
  sequence_number_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutgoingRtpPackets::sequence_number() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.sequence_number)
  return sequence_number_;
}
inline void OutgoingRtpPackets::set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.sequence_number)
}

// optional fixed32 rtp_timestamp = 5;
inline bool OutgoingRtpPackets::has_rtp_timestamp() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void OutgoingRtpPackets::clear_rtp_timestamp() {
  rtp_timestamp_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutgoingRtpPackets::rtp_timestamp() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.rtp_timestamp)
  return rtp_timestamp_;
}
inline void OutgoingRtpPackets::set_rtp_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  rtp_timestamp_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.rtp_timestamp)
}

// optional fixed32 ssrc = 6;
inline bool OutgoingRtpPackets::has_ssrc() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void OutgoingRtpPackets::clear_ssrc() {
  ssrc_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutgoingRtpPackets::ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.ssrc)
  return ssrc_;
}
inline void OutgoingRtpPackets::set_ssrc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.ssrc)
}

// optional uint32 payload_size = 8;
inline bool OutgoingRtpPackets::has_payload_size() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void OutgoingRtpPackets::clear_payload_size() {
  payload_size_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutgoingRtpPackets::payload_size() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.payload_size)
  return payload_size_;
}
inline void OutgoingRtpPackets::set_payload_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  payload_size_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.payload_size)
}

// optional uint32 header_size = 9;
inline bool OutgoingRtpPackets::has_header_size() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void OutgoingRtpPackets::clear_header_size() {
  header_size_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutgoingRtpPackets::header_size() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.header_size)
  return header_size_;
}
inline void OutgoingRtpPackets::set_header_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  header_size_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.header_size)
}

// optional uint32 padding_size = 10;
inline bool OutgoingRtpPackets::has_padding_size() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void OutgoingRtpPackets::clear_padding_size() {
  padding_size_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutgoingRtpPackets::padding_size() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.padding_size)
  return padding_size_;
}
inline void OutgoingRtpPackets::set_padding_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  padding_size_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.padding_size)
}

// optional uint32 number_of_deltas = 11;
inline bool OutgoingRtpPackets::has_number_of_deltas() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void OutgoingRtpPackets::clear_number_of_deltas() {
  number_of_deltas_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutgoingRtpPackets::number_of_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.number_of_deltas)
  return number_of_deltas_;
}
inline void OutgoingRtpPackets::set_number_of_deltas(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00800000u;
  number_of_deltas_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.number_of_deltas)
}

// optional uint32 transport_sequence_number = 15;
inline bool OutgoingRtpPackets::has_transport_sequence_number() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void OutgoingRtpPackets::clear_transport_sequence_number() {
  transport_sequence_number_ = 0u;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutgoingRtpPackets::transport_sequence_number() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.transport_sequence_number)
  return transport_sequence_number_;
}
inline void OutgoingRtpPackets::set_transport_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x04000000u;
  transport_sequence_number_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.transport_sequence_number)
}

// optional int32 transmission_time_offset = 16;
inline bool OutgoingRtpPackets::has_transmission_time_offset() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void OutgoingRtpPackets::clear_transmission_time_offset() {
  transmission_time_offset_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OutgoingRtpPackets::transmission_time_offset() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.transmission_time_offset)
  return transmission_time_offset_;
}
inline void OutgoingRtpPackets::set_transmission_time_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x08000000u;
  transmission_time_offset_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.transmission_time_offset)
}

// optional uint32 absolute_send_time = 17;
inline bool OutgoingRtpPackets::has_absolute_send_time() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void OutgoingRtpPackets::clear_absolute_send_time() {
  absolute_send_time_ = 0u;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutgoingRtpPackets::absolute_send_time() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.absolute_send_time)
  return absolute_send_time_;
}
inline void OutgoingRtpPackets::set_absolute_send_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x10000000u;
  absolute_send_time_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.absolute_send_time)
}

// optional uint32 video_rotation = 18;
inline bool OutgoingRtpPackets::has_video_rotation() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void OutgoingRtpPackets::clear_video_rotation() {
  video_rotation_ = 0u;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutgoingRtpPackets::video_rotation() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.video_rotation)
  return video_rotation_;
}
inline void OutgoingRtpPackets::set_video_rotation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x20000000u;
  video_rotation_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.video_rotation)
}

// optional uint32 audio_level = 19;
inline bool OutgoingRtpPackets::has_audio_level() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void OutgoingRtpPackets::clear_audio_level() {
  audio_level_ = 0u;
  _has_bits_[0] &= ~0x40000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutgoingRtpPackets::audio_level() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.audio_level)
  return audio_level_;
}
inline void OutgoingRtpPackets::set_audio_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x40000000u;
  audio_level_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.audio_level)
}

// optional bool voice_activity = 20;
inline bool OutgoingRtpPackets::has_voice_activity() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void OutgoingRtpPackets::clear_voice_activity() {
  voice_activity_ = false;
  _has_bits_[0] &= ~0x02000000u;
}
inline bool OutgoingRtpPackets::voice_activity() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.voice_activity)
  return voice_activity_;
}
inline void OutgoingRtpPackets::set_voice_activity(bool value) {
  _has_bits_[0] |= 0x02000000u;
  voice_activity_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.voice_activity)
}

// optional bytes timestamp_ms_deltas = 101;
inline bool OutgoingRtpPackets::has_timestamp_ms_deltas() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OutgoingRtpPackets::clear_timestamp_ms_deltas() {
  timestamp_ms_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OutgoingRtpPackets::timestamp_ms_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.timestamp_ms_deltas)
  return timestamp_ms_deltas_.GetNoArena();
}
inline void OutgoingRtpPackets::set_timestamp_ms_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.timestamp_ms_deltas)
}
inline void OutgoingRtpPackets::set_timestamp_ms_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.timestamp_ms_deltas)
}
inline void OutgoingRtpPackets::set_timestamp_ms_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.timestamp_ms_deltas)
}
inline void OutgoingRtpPackets::set_timestamp_ms_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.timestamp_ms_deltas)
}
inline std::string* OutgoingRtpPackets::mutable_timestamp_ms_deltas() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.timestamp_ms_deltas)
  return timestamp_ms_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OutgoingRtpPackets::release_timestamp_ms_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.timestamp_ms_deltas)
  if (!has_timestamp_ms_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return timestamp_ms_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OutgoingRtpPackets::set_allocated_timestamp_ms_deltas(std::string* timestamp_ms_deltas) {
  if (timestamp_ms_deltas != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  timestamp_ms_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp_ms_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.timestamp_ms_deltas)
}

// optional bytes marker_deltas = 102;
inline bool OutgoingRtpPackets::has_marker_deltas() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OutgoingRtpPackets::clear_marker_deltas() {
  marker_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& OutgoingRtpPackets::marker_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.marker_deltas)
  return marker_deltas_.GetNoArena();
}
inline void OutgoingRtpPackets::set_marker_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  marker_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.marker_deltas)
}
inline void OutgoingRtpPackets::set_marker_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  marker_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.marker_deltas)
}
inline void OutgoingRtpPackets::set_marker_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  marker_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.marker_deltas)
}
inline void OutgoingRtpPackets::set_marker_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  marker_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.marker_deltas)
}
inline std::string* OutgoingRtpPackets::mutable_marker_deltas() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.marker_deltas)
  return marker_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OutgoingRtpPackets::release_marker_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.marker_deltas)
  if (!has_marker_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return marker_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OutgoingRtpPackets::set_allocated_marker_deltas(std::string* marker_deltas) {
  if (marker_deltas != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  marker_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marker_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.marker_deltas)
}

// optional bytes payload_type_deltas = 103;
inline bool OutgoingRtpPackets::has_payload_type_deltas() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OutgoingRtpPackets::clear_payload_type_deltas() {
  payload_type_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& OutgoingRtpPackets::payload_type_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.payload_type_deltas)
  return payload_type_deltas_.GetNoArena();
}
inline void OutgoingRtpPackets::set_payload_type_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  payload_type_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.payload_type_deltas)
}
inline void OutgoingRtpPackets::set_payload_type_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  payload_type_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.payload_type_deltas)
}
inline void OutgoingRtpPackets::set_payload_type_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  payload_type_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.payload_type_deltas)
}
inline void OutgoingRtpPackets::set_payload_type_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  payload_type_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.payload_type_deltas)
}
inline std::string* OutgoingRtpPackets::mutable_payload_type_deltas() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.payload_type_deltas)
  return payload_type_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OutgoingRtpPackets::release_payload_type_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.payload_type_deltas)
  if (!has_payload_type_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return payload_type_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OutgoingRtpPackets::set_allocated_payload_type_deltas(std::string* payload_type_deltas) {
  if (payload_type_deltas != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  payload_type_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload_type_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.payload_type_deltas)
}

// optional bytes sequence_number_deltas = 104;
inline bool OutgoingRtpPackets::has_sequence_number_deltas() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OutgoingRtpPackets::clear_sequence_number_deltas() {
  sequence_number_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& OutgoingRtpPackets::sequence_number_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.sequence_number_deltas)
  return sequence_number_deltas_.GetNoArena();
}
inline void OutgoingRtpPackets::set_sequence_number_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  sequence_number_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.sequence_number_deltas)
}
inline void OutgoingRtpPackets::set_sequence_number_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  sequence_number_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.sequence_number_deltas)
}
inline void OutgoingRtpPackets::set_sequence_number_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  sequence_number_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.sequence_number_deltas)
}
inline void OutgoingRtpPackets::set_sequence_number_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  sequence_number_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.sequence_number_deltas)
}
inline std::string* OutgoingRtpPackets::mutable_sequence_number_deltas() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.sequence_number_deltas)
  return sequence_number_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OutgoingRtpPackets::release_sequence_number_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.sequence_number_deltas)
  if (!has_sequence_number_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return sequence_number_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OutgoingRtpPackets::set_allocated_sequence_number_deltas(std::string* sequence_number_deltas) {
  if (sequence_number_deltas != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  sequence_number_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sequence_number_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.sequence_number_deltas)
}

// optional bytes rtp_timestamp_deltas = 105;
inline bool OutgoingRtpPackets::has_rtp_timestamp_deltas() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OutgoingRtpPackets::clear_rtp_timestamp_deltas() {
  rtp_timestamp_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& OutgoingRtpPackets::rtp_timestamp_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.rtp_timestamp_deltas)
  return rtp_timestamp_deltas_.GetNoArena();
}
inline void OutgoingRtpPackets::set_rtp_timestamp_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  rtp_timestamp_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.rtp_timestamp_deltas)
}
inline void OutgoingRtpPackets::set_rtp_timestamp_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  rtp_timestamp_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.rtp_timestamp_deltas)
}
inline void OutgoingRtpPackets::set_rtp_timestamp_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  rtp_timestamp_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.rtp_timestamp_deltas)
}
inline void OutgoingRtpPackets::set_rtp_timestamp_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  rtp_timestamp_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.rtp_timestamp_deltas)
}
inline std::string* OutgoingRtpPackets::mutable_rtp_timestamp_deltas() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.rtp_timestamp_deltas)
  return rtp_timestamp_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OutgoingRtpPackets::release_rtp_timestamp_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.rtp_timestamp_deltas)
  if (!has_rtp_timestamp_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return rtp_timestamp_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OutgoingRtpPackets::set_allocated_rtp_timestamp_deltas(std::string* rtp_timestamp_deltas) {
  if (rtp_timestamp_deltas != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  rtp_timestamp_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rtp_timestamp_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.rtp_timestamp_deltas)
}

// optional bytes ssrc_deltas = 106;
inline bool OutgoingRtpPackets::has_ssrc_deltas() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OutgoingRtpPackets::clear_ssrc_deltas() {
  ssrc_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& OutgoingRtpPackets::ssrc_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.ssrc_deltas)
  return ssrc_deltas_.GetNoArena();
}
inline void OutgoingRtpPackets::set_ssrc_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  ssrc_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.ssrc_deltas)
}
inline void OutgoingRtpPackets::set_ssrc_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  ssrc_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.ssrc_deltas)
}
inline void OutgoingRtpPackets::set_ssrc_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  ssrc_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.ssrc_deltas)
}
inline void OutgoingRtpPackets::set_ssrc_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  ssrc_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.ssrc_deltas)
}
inline std::string* OutgoingRtpPackets::mutable_ssrc_deltas() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.ssrc_deltas)
  return ssrc_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OutgoingRtpPackets::release_ssrc_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.ssrc_deltas)
  if (!has_ssrc_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return ssrc_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OutgoingRtpPackets::set_allocated_ssrc_deltas(std::string* ssrc_deltas) {
  if (ssrc_deltas != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  ssrc_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ssrc_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.ssrc_deltas)
}

// optional bytes payload_size_deltas = 108;
inline bool OutgoingRtpPackets::has_payload_size_deltas() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OutgoingRtpPackets::clear_payload_size_deltas() {
  payload_size_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& OutgoingRtpPackets::payload_size_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.payload_size_deltas)
  return payload_size_deltas_.GetNoArena();
}
inline void OutgoingRtpPackets::set_payload_size_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  payload_size_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.payload_size_deltas)
}
inline void OutgoingRtpPackets::set_payload_size_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  payload_size_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.payload_size_deltas)
}
inline void OutgoingRtpPackets::set_payload_size_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  payload_size_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.payload_size_deltas)
}
inline void OutgoingRtpPackets::set_payload_size_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  payload_size_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.payload_size_deltas)
}
inline std::string* OutgoingRtpPackets::mutable_payload_size_deltas() {
  _has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.payload_size_deltas)
  return payload_size_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OutgoingRtpPackets::release_payload_size_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.payload_size_deltas)
  if (!has_payload_size_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return payload_size_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OutgoingRtpPackets::set_allocated_payload_size_deltas(std::string* payload_size_deltas) {
  if (payload_size_deltas != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  payload_size_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload_size_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.payload_size_deltas)
}

// optional bytes header_size_deltas = 109;
inline bool OutgoingRtpPackets::has_header_size_deltas() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OutgoingRtpPackets::clear_header_size_deltas() {
  header_size_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& OutgoingRtpPackets::header_size_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.header_size_deltas)
  return header_size_deltas_.GetNoArena();
}
inline void OutgoingRtpPackets::set_header_size_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  header_size_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.header_size_deltas)
}
inline void OutgoingRtpPackets::set_header_size_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  header_size_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.header_size_deltas)
}
inline void OutgoingRtpPackets::set_header_size_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  header_size_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.header_size_deltas)
}
inline void OutgoingRtpPackets::set_header_size_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000080u;
  header_size_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.header_size_deltas)
}
inline std::string* OutgoingRtpPackets::mutable_header_size_deltas() {
  _has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.header_size_deltas)
  return header_size_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OutgoingRtpPackets::release_header_size_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.header_size_deltas)
  if (!has_header_size_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return header_size_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OutgoingRtpPackets::set_allocated_header_size_deltas(std::string* header_size_deltas) {
  if (header_size_deltas != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  header_size_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), header_size_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.header_size_deltas)
}

// optional bytes padding_size_deltas = 110;
inline bool OutgoingRtpPackets::has_padding_size_deltas() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OutgoingRtpPackets::clear_padding_size_deltas() {
  padding_size_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& OutgoingRtpPackets::padding_size_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.padding_size_deltas)
  return padding_size_deltas_.GetNoArena();
}
inline void OutgoingRtpPackets::set_padding_size_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  padding_size_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.padding_size_deltas)
}
inline void OutgoingRtpPackets::set_padding_size_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  padding_size_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.padding_size_deltas)
}
inline void OutgoingRtpPackets::set_padding_size_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  padding_size_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.padding_size_deltas)
}
inline void OutgoingRtpPackets::set_padding_size_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000100u;
  padding_size_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.padding_size_deltas)
}
inline std::string* OutgoingRtpPackets::mutable_padding_size_deltas() {
  _has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.padding_size_deltas)
  return padding_size_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OutgoingRtpPackets::release_padding_size_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.padding_size_deltas)
  if (!has_padding_size_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return padding_size_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OutgoingRtpPackets::set_allocated_padding_size_deltas(std::string* padding_size_deltas) {
  if (padding_size_deltas != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  padding_size_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), padding_size_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.padding_size_deltas)
}

// optional bytes transport_sequence_number_deltas = 115;
inline bool OutgoingRtpPackets::has_transport_sequence_number_deltas() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OutgoingRtpPackets::clear_transport_sequence_number_deltas() {
  transport_sequence_number_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& OutgoingRtpPackets::transport_sequence_number_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.transport_sequence_number_deltas)
  return transport_sequence_number_deltas_.GetNoArena();
}
inline void OutgoingRtpPackets::set_transport_sequence_number_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  transport_sequence_number_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.transport_sequence_number_deltas)
}
inline void OutgoingRtpPackets::set_transport_sequence_number_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  transport_sequence_number_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.transport_sequence_number_deltas)
}
inline void OutgoingRtpPackets::set_transport_sequence_number_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  transport_sequence_number_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.transport_sequence_number_deltas)
}
inline void OutgoingRtpPackets::set_transport_sequence_number_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000200u;
  transport_sequence_number_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.transport_sequence_number_deltas)
}
inline std::string* OutgoingRtpPackets::mutable_transport_sequence_number_deltas() {
  _has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.transport_sequence_number_deltas)
  return transport_sequence_number_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OutgoingRtpPackets::release_transport_sequence_number_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.transport_sequence_number_deltas)
  if (!has_transport_sequence_number_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return transport_sequence_number_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OutgoingRtpPackets::set_allocated_transport_sequence_number_deltas(std::string* transport_sequence_number_deltas) {
  if (transport_sequence_number_deltas != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  transport_sequence_number_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transport_sequence_number_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.transport_sequence_number_deltas)
}

// optional bytes transmission_time_offset_deltas = 116;
inline bool OutgoingRtpPackets::has_transmission_time_offset_deltas() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OutgoingRtpPackets::clear_transmission_time_offset_deltas() {
  transmission_time_offset_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& OutgoingRtpPackets::transmission_time_offset_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.transmission_time_offset_deltas)
  return transmission_time_offset_deltas_.GetNoArena();
}
inline void OutgoingRtpPackets::set_transmission_time_offset_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  transmission_time_offset_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.transmission_time_offset_deltas)
}
inline void OutgoingRtpPackets::set_transmission_time_offset_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000400u;
  transmission_time_offset_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.transmission_time_offset_deltas)
}
inline void OutgoingRtpPackets::set_transmission_time_offset_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000400u;
  transmission_time_offset_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.transmission_time_offset_deltas)
}
inline void OutgoingRtpPackets::set_transmission_time_offset_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000400u;
  transmission_time_offset_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.transmission_time_offset_deltas)
}
inline std::string* OutgoingRtpPackets::mutable_transmission_time_offset_deltas() {
  _has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.transmission_time_offset_deltas)
  return transmission_time_offset_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OutgoingRtpPackets::release_transmission_time_offset_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.transmission_time_offset_deltas)
  if (!has_transmission_time_offset_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  return transmission_time_offset_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OutgoingRtpPackets::set_allocated_transmission_time_offset_deltas(std::string* transmission_time_offset_deltas) {
  if (transmission_time_offset_deltas != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  transmission_time_offset_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transmission_time_offset_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.transmission_time_offset_deltas)
}

// optional bytes absolute_send_time_deltas = 117;
inline bool OutgoingRtpPackets::has_absolute_send_time_deltas() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OutgoingRtpPackets::clear_absolute_send_time_deltas() {
  absolute_send_time_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000800u;
}
inline const std::string& OutgoingRtpPackets::absolute_send_time_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.absolute_send_time_deltas)
  return absolute_send_time_deltas_.GetNoArena();
}
inline void OutgoingRtpPackets::set_absolute_send_time_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000800u;
  absolute_send_time_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.absolute_send_time_deltas)
}
inline void OutgoingRtpPackets::set_absolute_send_time_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000800u;
  absolute_send_time_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.absolute_send_time_deltas)
}
inline void OutgoingRtpPackets::set_absolute_send_time_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000800u;
  absolute_send_time_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.absolute_send_time_deltas)
}
inline void OutgoingRtpPackets::set_absolute_send_time_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000800u;
  absolute_send_time_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.absolute_send_time_deltas)
}
inline std::string* OutgoingRtpPackets::mutable_absolute_send_time_deltas() {
  _has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.absolute_send_time_deltas)
  return absolute_send_time_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OutgoingRtpPackets::release_absolute_send_time_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.absolute_send_time_deltas)
  if (!has_absolute_send_time_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000800u;
  return absolute_send_time_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OutgoingRtpPackets::set_allocated_absolute_send_time_deltas(std::string* absolute_send_time_deltas) {
  if (absolute_send_time_deltas != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  absolute_send_time_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), absolute_send_time_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.absolute_send_time_deltas)
}

// optional bytes video_rotation_deltas = 118;
inline bool OutgoingRtpPackets::has_video_rotation_deltas() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OutgoingRtpPackets::clear_video_rotation_deltas() {
  video_rotation_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00001000u;
}
inline const std::string& OutgoingRtpPackets::video_rotation_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.video_rotation_deltas)
  return video_rotation_deltas_.GetNoArena();
}
inline void OutgoingRtpPackets::set_video_rotation_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00001000u;
  video_rotation_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.video_rotation_deltas)
}
inline void OutgoingRtpPackets::set_video_rotation_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00001000u;
  video_rotation_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.video_rotation_deltas)
}
inline void OutgoingRtpPackets::set_video_rotation_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00001000u;
  video_rotation_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.video_rotation_deltas)
}
inline void OutgoingRtpPackets::set_video_rotation_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00001000u;
  video_rotation_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.video_rotation_deltas)
}
inline std::string* OutgoingRtpPackets::mutable_video_rotation_deltas() {
  _has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.video_rotation_deltas)
  return video_rotation_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OutgoingRtpPackets::release_video_rotation_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.video_rotation_deltas)
  if (!has_video_rotation_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00001000u;
  return video_rotation_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OutgoingRtpPackets::set_allocated_video_rotation_deltas(std::string* video_rotation_deltas) {
  if (video_rotation_deltas != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  video_rotation_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), video_rotation_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.video_rotation_deltas)
}

// optional bytes audio_level_deltas = 119;
inline bool OutgoingRtpPackets::has_audio_level_deltas() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void OutgoingRtpPackets::clear_audio_level_deltas() {
  audio_level_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00002000u;
}
inline const std::string& OutgoingRtpPackets::audio_level_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.audio_level_deltas)
  return audio_level_deltas_.GetNoArena();
}
inline void OutgoingRtpPackets::set_audio_level_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00002000u;
  audio_level_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.audio_level_deltas)
}
inline void OutgoingRtpPackets::set_audio_level_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00002000u;
  audio_level_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.audio_level_deltas)
}
inline void OutgoingRtpPackets::set_audio_level_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00002000u;
  audio_level_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.audio_level_deltas)
}
inline void OutgoingRtpPackets::set_audio_level_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00002000u;
  audio_level_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.audio_level_deltas)
}
inline std::string* OutgoingRtpPackets::mutable_audio_level_deltas() {
  _has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.audio_level_deltas)
  return audio_level_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OutgoingRtpPackets::release_audio_level_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.audio_level_deltas)
  if (!has_audio_level_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00002000u;
  return audio_level_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OutgoingRtpPackets::set_allocated_audio_level_deltas(std::string* audio_level_deltas) {
  if (audio_level_deltas != nullptr) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  audio_level_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), audio_level_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.audio_level_deltas)
}

// optional bytes voice_activity_deltas = 120;
inline bool OutgoingRtpPackets::has_voice_activity_deltas() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void OutgoingRtpPackets::clear_voice_activity_deltas() {
  voice_activity_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00004000u;
}
inline const std::string& OutgoingRtpPackets::voice_activity_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.voice_activity_deltas)
  return voice_activity_deltas_.GetNoArena();
}
inline void OutgoingRtpPackets::set_voice_activity_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00004000u;
  voice_activity_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.voice_activity_deltas)
}
inline void OutgoingRtpPackets::set_voice_activity_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00004000u;
  voice_activity_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.voice_activity_deltas)
}
inline void OutgoingRtpPackets::set_voice_activity_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00004000u;
  voice_activity_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.voice_activity_deltas)
}
inline void OutgoingRtpPackets::set_voice_activity_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00004000u;
  voice_activity_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.voice_activity_deltas)
}
inline std::string* OutgoingRtpPackets::mutable_voice_activity_deltas() {
  _has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.voice_activity_deltas)
  return voice_activity_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OutgoingRtpPackets::release_voice_activity_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.voice_activity_deltas)
  if (!has_voice_activity_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00004000u;
  return voice_activity_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OutgoingRtpPackets::set_allocated_voice_activity_deltas(std::string* voice_activity_deltas) {
  if (voice_activity_deltas != nullptr) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  voice_activity_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), voice_activity_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.voice_activity_deltas)
}

// -------------------------------------------------------------------

// IncomingRtcpPackets

// optional int64 timestamp_ms = 1;
inline bool IncomingRtcpPackets::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IncomingRtcpPackets::clear_timestamp_ms() {
  timestamp_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IncomingRtcpPackets::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtcpPackets.timestamp_ms)
  return timestamp_ms_;
}
inline void IncomingRtcpPackets::set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtcpPackets.timestamp_ms)
}

// optional bytes raw_packet = 2;
inline bool IncomingRtcpPackets::has_raw_packet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IncomingRtcpPackets::clear_raw_packet() {
  raw_packet_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IncomingRtcpPackets::raw_packet() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtcpPackets.raw_packet)
  return raw_packet_.GetNoArena();
}
inline void IncomingRtcpPackets::set_raw_packet(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  raw_packet_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtcpPackets.raw_packet)
}
inline void IncomingRtcpPackets::set_raw_packet(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  raw_packet_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtcpPackets.raw_packet)
}
inline void IncomingRtcpPackets::set_raw_packet(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  raw_packet_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtcpPackets.raw_packet)
}
inline void IncomingRtcpPackets::set_raw_packet(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  raw_packet_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtcpPackets.raw_packet)
}
inline std::string* IncomingRtcpPackets::mutable_raw_packet() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtcpPackets.raw_packet)
  return raw_packet_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IncomingRtcpPackets::release_raw_packet() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtcpPackets.raw_packet)
  if (!has_raw_packet()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return raw_packet_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IncomingRtcpPackets::set_allocated_raw_packet(std::string* raw_packet) {
  if (raw_packet != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  raw_packet_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), raw_packet);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtcpPackets.raw_packet)
}

// optional uint32 number_of_deltas = 3;
inline bool IncomingRtcpPackets::has_number_of_deltas() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IncomingRtcpPackets::clear_number_of_deltas() {
  number_of_deltas_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IncomingRtcpPackets::number_of_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtcpPackets.number_of_deltas)
  return number_of_deltas_;
}
inline void IncomingRtcpPackets::set_number_of_deltas(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  number_of_deltas_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtcpPackets.number_of_deltas)
}

// optional bytes timestamp_ms_deltas = 101;
inline bool IncomingRtcpPackets::has_timestamp_ms_deltas() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IncomingRtcpPackets::clear_timestamp_ms_deltas() {
  timestamp_ms_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& IncomingRtcpPackets::timestamp_ms_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtcpPackets.timestamp_ms_deltas)
  return timestamp_ms_deltas_.GetNoArena();
}
inline void IncomingRtcpPackets::set_timestamp_ms_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtcpPackets.timestamp_ms_deltas)
}
inline void IncomingRtcpPackets::set_timestamp_ms_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ms_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtcpPackets.timestamp_ms_deltas)
}
inline void IncomingRtcpPackets::set_timestamp_ms_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  timestamp_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtcpPackets.timestamp_ms_deltas)
}
inline void IncomingRtcpPackets::set_timestamp_ms_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtcpPackets.timestamp_ms_deltas)
}
inline std::string* IncomingRtcpPackets::mutable_timestamp_ms_deltas() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtcpPackets.timestamp_ms_deltas)
  return timestamp_ms_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IncomingRtcpPackets::release_timestamp_ms_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtcpPackets.timestamp_ms_deltas)
  if (!has_timestamp_ms_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return timestamp_ms_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IncomingRtcpPackets::set_allocated_timestamp_ms_deltas(std::string* timestamp_ms_deltas) {
  if (timestamp_ms_deltas != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  timestamp_ms_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp_ms_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtcpPackets.timestamp_ms_deltas)
}

// optional bytes raw_packet_blobs = 102;
inline bool IncomingRtcpPackets::has_raw_packet_blobs() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IncomingRtcpPackets::clear_raw_packet_blobs() {
  raw_packet_blobs_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& IncomingRtcpPackets::raw_packet_blobs() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtcpPackets.raw_packet_blobs)
  return raw_packet_blobs_.GetNoArena();
}
inline void IncomingRtcpPackets::set_raw_packet_blobs(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  raw_packet_blobs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtcpPackets.raw_packet_blobs)
}
inline void IncomingRtcpPackets::set_raw_packet_blobs(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  raw_packet_blobs_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtcpPackets.raw_packet_blobs)
}
inline void IncomingRtcpPackets::set_raw_packet_blobs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  raw_packet_blobs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtcpPackets.raw_packet_blobs)
}
inline void IncomingRtcpPackets::set_raw_packet_blobs(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  raw_packet_blobs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtcpPackets.raw_packet_blobs)
}
inline std::string* IncomingRtcpPackets::mutable_raw_packet_blobs() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtcpPackets.raw_packet_blobs)
  return raw_packet_blobs_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IncomingRtcpPackets::release_raw_packet_blobs() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtcpPackets.raw_packet_blobs)
  if (!has_raw_packet_blobs()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return raw_packet_blobs_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IncomingRtcpPackets::set_allocated_raw_packet_blobs(std::string* raw_packet_blobs) {
  if (raw_packet_blobs != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  raw_packet_blobs_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), raw_packet_blobs);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtcpPackets.raw_packet_blobs)
}

// -------------------------------------------------------------------

// OutgoingRtcpPackets

// optional int64 timestamp_ms = 1;
inline bool OutgoingRtcpPackets::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OutgoingRtcpPackets::clear_timestamp_ms() {
  timestamp_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OutgoingRtcpPackets::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtcpPackets.timestamp_ms)
  return timestamp_ms_;
}
inline void OutgoingRtcpPackets::set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtcpPackets.timestamp_ms)
}

// optional bytes raw_packet = 2;
inline bool OutgoingRtcpPackets::has_raw_packet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OutgoingRtcpPackets::clear_raw_packet() {
  raw_packet_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OutgoingRtcpPackets::raw_packet() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet)
  return raw_packet_.GetNoArena();
}
inline void OutgoingRtcpPackets::set_raw_packet(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  raw_packet_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet)
}
inline void OutgoingRtcpPackets::set_raw_packet(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  raw_packet_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet)
}
inline void OutgoingRtcpPackets::set_raw_packet(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  raw_packet_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet)
}
inline void OutgoingRtcpPackets::set_raw_packet(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  raw_packet_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet)
}
inline std::string* OutgoingRtcpPackets::mutable_raw_packet() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet)
  return raw_packet_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OutgoingRtcpPackets::release_raw_packet() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet)
  if (!has_raw_packet()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return raw_packet_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OutgoingRtcpPackets::set_allocated_raw_packet(std::string* raw_packet) {
  if (raw_packet != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  raw_packet_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), raw_packet);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet)
}

// optional uint32 number_of_deltas = 3;
inline bool OutgoingRtcpPackets::has_number_of_deltas() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OutgoingRtcpPackets::clear_number_of_deltas() {
  number_of_deltas_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutgoingRtcpPackets::number_of_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtcpPackets.number_of_deltas)
  return number_of_deltas_;
}
inline void OutgoingRtcpPackets::set_number_of_deltas(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  number_of_deltas_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtcpPackets.number_of_deltas)
}

// optional bytes timestamp_ms_deltas = 101;
inline bool OutgoingRtcpPackets::has_timestamp_ms_deltas() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OutgoingRtcpPackets::clear_timestamp_ms_deltas() {
  timestamp_ms_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& OutgoingRtcpPackets::timestamp_ms_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtcpPackets.timestamp_ms_deltas)
  return timestamp_ms_deltas_.GetNoArena();
}
inline void OutgoingRtcpPackets::set_timestamp_ms_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtcpPackets.timestamp_ms_deltas)
}
inline void OutgoingRtcpPackets::set_timestamp_ms_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ms_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtcpPackets.timestamp_ms_deltas)
}
inline void OutgoingRtcpPackets::set_timestamp_ms_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  timestamp_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtcpPackets.timestamp_ms_deltas)
}
inline void OutgoingRtcpPackets::set_timestamp_ms_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtcpPackets.timestamp_ms_deltas)
}
inline std::string* OutgoingRtcpPackets::mutable_timestamp_ms_deltas() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtcpPackets.timestamp_ms_deltas)
  return timestamp_ms_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OutgoingRtcpPackets::release_timestamp_ms_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtcpPackets.timestamp_ms_deltas)
  if (!has_timestamp_ms_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return timestamp_ms_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OutgoingRtcpPackets::set_allocated_timestamp_ms_deltas(std::string* timestamp_ms_deltas) {
  if (timestamp_ms_deltas != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  timestamp_ms_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp_ms_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtcpPackets.timestamp_ms_deltas)
}

// optional bytes raw_packet_blobs = 102;
inline bool OutgoingRtcpPackets::has_raw_packet_blobs() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OutgoingRtcpPackets::clear_raw_packet_blobs() {
  raw_packet_blobs_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& OutgoingRtcpPackets::raw_packet_blobs() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet_blobs)
  return raw_packet_blobs_.GetNoArena();
}
inline void OutgoingRtcpPackets::set_raw_packet_blobs(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  raw_packet_blobs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet_blobs)
}
inline void OutgoingRtcpPackets::set_raw_packet_blobs(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  raw_packet_blobs_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet_blobs)
}
inline void OutgoingRtcpPackets::set_raw_packet_blobs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  raw_packet_blobs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet_blobs)
}
inline void OutgoingRtcpPackets::set_raw_packet_blobs(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  raw_packet_blobs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet_blobs)
}
inline std::string* OutgoingRtcpPackets::mutable_raw_packet_blobs() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet_blobs)
  return raw_packet_blobs_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OutgoingRtcpPackets::release_raw_packet_blobs() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet_blobs)
  if (!has_raw_packet_blobs()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return raw_packet_blobs_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OutgoingRtcpPackets::set_allocated_raw_packet_blobs(std::string* raw_packet_blobs) {
  if (raw_packet_blobs != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  raw_packet_blobs_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), raw_packet_blobs);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet_blobs)
}

// -------------------------------------------------------------------

// AudioPlayoutEvents

// optional int64 timestamp_ms = 1;
inline bool AudioPlayoutEvents::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AudioPlayoutEvents::clear_timestamp_ms() {
  timestamp_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AudioPlayoutEvents::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioPlayoutEvents.timestamp_ms)
  return timestamp_ms_;
}
inline void AudioPlayoutEvents::set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioPlayoutEvents.timestamp_ms)
}

// optional uint32 local_ssrc = 2;
inline bool AudioPlayoutEvents::has_local_ssrc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AudioPlayoutEvents::clear_local_ssrc() {
  local_ssrc_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AudioPlayoutEvents::local_ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioPlayoutEvents.local_ssrc)
  return local_ssrc_;
}
inline void AudioPlayoutEvents::set_local_ssrc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  local_ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioPlayoutEvents.local_ssrc)
}

// optional uint32 number_of_deltas = 3;
inline bool AudioPlayoutEvents::has_number_of_deltas() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AudioPlayoutEvents::clear_number_of_deltas() {
  number_of_deltas_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AudioPlayoutEvents::number_of_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioPlayoutEvents.number_of_deltas)
  return number_of_deltas_;
}
inline void AudioPlayoutEvents::set_number_of_deltas(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  number_of_deltas_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioPlayoutEvents.number_of_deltas)
}

// optional bytes timestamp_ms_deltas = 101;
inline bool AudioPlayoutEvents::has_timestamp_ms_deltas() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AudioPlayoutEvents::clear_timestamp_ms_deltas() {
  timestamp_ms_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AudioPlayoutEvents::timestamp_ms_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioPlayoutEvents.timestamp_ms_deltas)
  return timestamp_ms_deltas_.GetNoArena();
}
inline void AudioPlayoutEvents::set_timestamp_ms_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioPlayoutEvents.timestamp_ms_deltas)
}
inline void AudioPlayoutEvents::set_timestamp_ms_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.AudioPlayoutEvents.timestamp_ms_deltas)
}
inline void AudioPlayoutEvents::set_timestamp_ms_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.AudioPlayoutEvents.timestamp_ms_deltas)
}
inline void AudioPlayoutEvents::set_timestamp_ms_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.AudioPlayoutEvents.timestamp_ms_deltas)
}
inline std::string* AudioPlayoutEvents::mutable_timestamp_ms_deltas() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.AudioPlayoutEvents.timestamp_ms_deltas)
  return timestamp_ms_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AudioPlayoutEvents::release_timestamp_ms_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.AudioPlayoutEvents.timestamp_ms_deltas)
  if (!has_timestamp_ms_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return timestamp_ms_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AudioPlayoutEvents::set_allocated_timestamp_ms_deltas(std::string* timestamp_ms_deltas) {
  if (timestamp_ms_deltas != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  timestamp_ms_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp_ms_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.AudioPlayoutEvents.timestamp_ms_deltas)
}

// optional bytes local_ssrc_deltas = 102;
inline bool AudioPlayoutEvents::has_local_ssrc_deltas() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AudioPlayoutEvents::clear_local_ssrc_deltas() {
  local_ssrc_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AudioPlayoutEvents::local_ssrc_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioPlayoutEvents.local_ssrc_deltas)
  return local_ssrc_deltas_.GetNoArena();
}
inline void AudioPlayoutEvents::set_local_ssrc_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  local_ssrc_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioPlayoutEvents.local_ssrc_deltas)
}
inline void AudioPlayoutEvents::set_local_ssrc_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  local_ssrc_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.AudioPlayoutEvents.local_ssrc_deltas)
}
inline void AudioPlayoutEvents::set_local_ssrc_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  local_ssrc_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.AudioPlayoutEvents.local_ssrc_deltas)
}
inline void AudioPlayoutEvents::set_local_ssrc_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  local_ssrc_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.AudioPlayoutEvents.local_ssrc_deltas)
}
inline std::string* AudioPlayoutEvents::mutable_local_ssrc_deltas() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.AudioPlayoutEvents.local_ssrc_deltas)
  return local_ssrc_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AudioPlayoutEvents::release_local_ssrc_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.AudioPlayoutEvents.local_ssrc_deltas)
  if (!has_local_ssrc_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return local_ssrc_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AudioPlayoutEvents::set_allocated_local_ssrc_deltas(std::string* local_ssrc_deltas) {
  if (local_ssrc_deltas != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  local_ssrc_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_ssrc_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.AudioPlayoutEvents.local_ssrc_deltas)
}

// -------------------------------------------------------------------

// BeginLogEvent

// optional int64 timestamp_ms = 1;
inline bool BeginLogEvent::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeginLogEvent::clear_timestamp_ms() {
  timestamp_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BeginLogEvent::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.BeginLogEvent.timestamp_ms)
  return timestamp_ms_;
}
inline void BeginLogEvent::set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.BeginLogEvent.timestamp_ms)
}

// optional uint32 version = 2;
inline bool BeginLogEvent::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BeginLogEvent::clear_version() {
  version_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BeginLogEvent::version() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.BeginLogEvent.version)
  return version_;
}
inline void BeginLogEvent::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  version_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.BeginLogEvent.version)
}

// optional int64 utc_time_ms = 3;
inline bool BeginLogEvent::has_utc_time_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeginLogEvent::clear_utc_time_ms() {
  utc_time_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BeginLogEvent::utc_time_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.BeginLogEvent.utc_time_ms)
  return utc_time_ms_;
}
inline void BeginLogEvent::set_utc_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  utc_time_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.BeginLogEvent.utc_time_ms)
}

// -------------------------------------------------------------------

// EndLogEvent

// optional int64 timestamp_ms = 1;
inline bool EndLogEvent::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EndLogEvent::clear_timestamp_ms() {
  timestamp_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EndLogEvent::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EndLogEvent.timestamp_ms)
  return timestamp_ms_;
}
inline void EndLogEvent::set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.EndLogEvent.timestamp_ms)
}

// -------------------------------------------------------------------

// LossBasedBweUpdates

// optional int64 timestamp_ms = 1;
inline bool LossBasedBweUpdates::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LossBasedBweUpdates::clear_timestamp_ms() {
  timestamp_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LossBasedBweUpdates::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.LossBasedBweUpdates.timestamp_ms)
  return timestamp_ms_;
}
inline void LossBasedBweUpdates::set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.LossBasedBweUpdates.timestamp_ms)
}

// optional uint32 bitrate_bps = 2;
inline bool LossBasedBweUpdates::has_bitrate_bps() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LossBasedBweUpdates::clear_bitrate_bps() {
  bitrate_bps_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LossBasedBweUpdates::bitrate_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.LossBasedBweUpdates.bitrate_bps)
  return bitrate_bps_;
}
inline void LossBasedBweUpdates::set_bitrate_bps(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  bitrate_bps_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.LossBasedBweUpdates.bitrate_bps)
}

// optional uint32 fraction_loss = 3;
inline bool LossBasedBweUpdates::has_fraction_loss() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LossBasedBweUpdates::clear_fraction_loss() {
  fraction_loss_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LossBasedBweUpdates::fraction_loss() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.LossBasedBweUpdates.fraction_loss)
  return fraction_loss_;
}
inline void LossBasedBweUpdates::set_fraction_loss(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  fraction_loss_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.LossBasedBweUpdates.fraction_loss)
}

// optional uint32 total_packets = 4;
inline bool LossBasedBweUpdates::has_total_packets() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LossBasedBweUpdates::clear_total_packets() {
  total_packets_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LossBasedBweUpdates::total_packets() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.LossBasedBweUpdates.total_packets)
  return total_packets_;
}
inline void LossBasedBweUpdates::set_total_packets(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  total_packets_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.LossBasedBweUpdates.total_packets)
}

// optional uint32 number_of_deltas = 5;
inline bool LossBasedBweUpdates::has_number_of_deltas() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LossBasedBweUpdates::clear_number_of_deltas() {
  number_of_deltas_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LossBasedBweUpdates::number_of_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.LossBasedBweUpdates.number_of_deltas)
  return number_of_deltas_;
}
inline void LossBasedBweUpdates::set_number_of_deltas(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  number_of_deltas_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.LossBasedBweUpdates.number_of_deltas)
}

// optional bytes timestamp_ms_deltas = 101;
inline bool LossBasedBweUpdates::has_timestamp_ms_deltas() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LossBasedBweUpdates::clear_timestamp_ms_deltas() {
  timestamp_ms_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LossBasedBweUpdates::timestamp_ms_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.LossBasedBweUpdates.timestamp_ms_deltas)
  return timestamp_ms_deltas_.GetNoArena();
}
inline void LossBasedBweUpdates::set_timestamp_ms_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.LossBasedBweUpdates.timestamp_ms_deltas)
}
inline void LossBasedBweUpdates::set_timestamp_ms_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.LossBasedBweUpdates.timestamp_ms_deltas)
}
inline void LossBasedBweUpdates::set_timestamp_ms_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.LossBasedBweUpdates.timestamp_ms_deltas)
}
inline void LossBasedBweUpdates::set_timestamp_ms_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.LossBasedBweUpdates.timestamp_ms_deltas)
}
inline std::string* LossBasedBweUpdates::mutable_timestamp_ms_deltas() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.LossBasedBweUpdates.timestamp_ms_deltas)
  return timestamp_ms_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LossBasedBweUpdates::release_timestamp_ms_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.LossBasedBweUpdates.timestamp_ms_deltas)
  if (!has_timestamp_ms_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return timestamp_ms_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LossBasedBweUpdates::set_allocated_timestamp_ms_deltas(std::string* timestamp_ms_deltas) {
  if (timestamp_ms_deltas != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  timestamp_ms_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp_ms_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.LossBasedBweUpdates.timestamp_ms_deltas)
}

// optional bytes bitrate_bps_deltas = 102;
inline bool LossBasedBweUpdates::has_bitrate_bps_deltas() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LossBasedBweUpdates::clear_bitrate_bps_deltas() {
  bitrate_bps_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LossBasedBweUpdates::bitrate_bps_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.LossBasedBweUpdates.bitrate_bps_deltas)
  return bitrate_bps_deltas_.GetNoArena();
}
inline void LossBasedBweUpdates::set_bitrate_bps_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  bitrate_bps_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.LossBasedBweUpdates.bitrate_bps_deltas)
}
inline void LossBasedBweUpdates::set_bitrate_bps_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  bitrate_bps_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.LossBasedBweUpdates.bitrate_bps_deltas)
}
inline void LossBasedBweUpdates::set_bitrate_bps_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  bitrate_bps_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.LossBasedBweUpdates.bitrate_bps_deltas)
}
inline void LossBasedBweUpdates::set_bitrate_bps_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  bitrate_bps_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.LossBasedBweUpdates.bitrate_bps_deltas)
}
inline std::string* LossBasedBweUpdates::mutable_bitrate_bps_deltas() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.LossBasedBweUpdates.bitrate_bps_deltas)
  return bitrate_bps_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LossBasedBweUpdates::release_bitrate_bps_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.LossBasedBweUpdates.bitrate_bps_deltas)
  if (!has_bitrate_bps_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return bitrate_bps_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LossBasedBweUpdates::set_allocated_bitrate_bps_deltas(std::string* bitrate_bps_deltas) {
  if (bitrate_bps_deltas != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bitrate_bps_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bitrate_bps_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.LossBasedBweUpdates.bitrate_bps_deltas)
}

// optional bytes fraction_loss_deltas = 103;
inline bool LossBasedBweUpdates::has_fraction_loss_deltas() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LossBasedBweUpdates::clear_fraction_loss_deltas() {
  fraction_loss_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& LossBasedBweUpdates::fraction_loss_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.LossBasedBweUpdates.fraction_loss_deltas)
  return fraction_loss_deltas_.GetNoArena();
}
inline void LossBasedBweUpdates::set_fraction_loss_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  fraction_loss_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.LossBasedBweUpdates.fraction_loss_deltas)
}
inline void LossBasedBweUpdates::set_fraction_loss_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  fraction_loss_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.LossBasedBweUpdates.fraction_loss_deltas)
}
inline void LossBasedBweUpdates::set_fraction_loss_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  fraction_loss_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.LossBasedBweUpdates.fraction_loss_deltas)
}
inline void LossBasedBweUpdates::set_fraction_loss_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  fraction_loss_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.LossBasedBweUpdates.fraction_loss_deltas)
}
inline std::string* LossBasedBweUpdates::mutable_fraction_loss_deltas() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.LossBasedBweUpdates.fraction_loss_deltas)
  return fraction_loss_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LossBasedBweUpdates::release_fraction_loss_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.LossBasedBweUpdates.fraction_loss_deltas)
  if (!has_fraction_loss_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return fraction_loss_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LossBasedBweUpdates::set_allocated_fraction_loss_deltas(std::string* fraction_loss_deltas) {
  if (fraction_loss_deltas != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  fraction_loss_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fraction_loss_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.LossBasedBweUpdates.fraction_loss_deltas)
}

// optional bytes total_packets_deltas = 104;
inline bool LossBasedBweUpdates::has_total_packets_deltas() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LossBasedBweUpdates::clear_total_packets_deltas() {
  total_packets_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& LossBasedBweUpdates::total_packets_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.LossBasedBweUpdates.total_packets_deltas)
  return total_packets_deltas_.GetNoArena();
}
inline void LossBasedBweUpdates::set_total_packets_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  total_packets_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.LossBasedBweUpdates.total_packets_deltas)
}
inline void LossBasedBweUpdates::set_total_packets_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  total_packets_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.LossBasedBweUpdates.total_packets_deltas)
}
inline void LossBasedBweUpdates::set_total_packets_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  total_packets_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.LossBasedBweUpdates.total_packets_deltas)
}
inline void LossBasedBweUpdates::set_total_packets_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  total_packets_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.LossBasedBweUpdates.total_packets_deltas)
}
inline std::string* LossBasedBweUpdates::mutable_total_packets_deltas() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.LossBasedBweUpdates.total_packets_deltas)
  return total_packets_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LossBasedBweUpdates::release_total_packets_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.LossBasedBweUpdates.total_packets_deltas)
  if (!has_total_packets_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return total_packets_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LossBasedBweUpdates::set_allocated_total_packets_deltas(std::string* total_packets_deltas) {
  if (total_packets_deltas != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  total_packets_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), total_packets_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.LossBasedBweUpdates.total_packets_deltas)
}

// -------------------------------------------------------------------

// DelayBasedBweUpdates

// optional int64 timestamp_ms = 1;
inline bool DelayBasedBweUpdates::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DelayBasedBweUpdates::clear_timestamp_ms() {
  timestamp_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DelayBasedBweUpdates::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.DelayBasedBweUpdates.timestamp_ms)
  return timestamp_ms_;
}
inline void DelayBasedBweUpdates::set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.DelayBasedBweUpdates.timestamp_ms)
}

// optional uint32 bitrate_bps = 2;
inline bool DelayBasedBweUpdates::has_bitrate_bps() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DelayBasedBweUpdates::clear_bitrate_bps() {
  bitrate_bps_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DelayBasedBweUpdates::bitrate_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.DelayBasedBweUpdates.bitrate_bps)
  return bitrate_bps_;
}
inline void DelayBasedBweUpdates::set_bitrate_bps(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  bitrate_bps_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.DelayBasedBweUpdates.bitrate_bps)
}

// optional .webrtc.rtclog2.DelayBasedBweUpdates.DetectorState detector_state = 3;
inline bool DelayBasedBweUpdates::has_detector_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DelayBasedBweUpdates::clear_detector_state() {
  detector_state_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::webrtc::rtclog2::DelayBasedBweUpdates_DetectorState DelayBasedBweUpdates::detector_state() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.DelayBasedBweUpdates.detector_state)
  return static_cast< ::webrtc::rtclog2::DelayBasedBweUpdates_DetectorState >(detector_state_);
}
inline void DelayBasedBweUpdates::set_detector_state(::webrtc::rtclog2::DelayBasedBweUpdates_DetectorState value) {
  assert(::webrtc::rtclog2::DelayBasedBweUpdates_DetectorState_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  detector_state_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.DelayBasedBweUpdates.detector_state)
}

// optional uint32 number_of_deltas = 4;
inline bool DelayBasedBweUpdates::has_number_of_deltas() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DelayBasedBweUpdates::clear_number_of_deltas() {
  number_of_deltas_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DelayBasedBweUpdates::number_of_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.DelayBasedBweUpdates.number_of_deltas)
  return number_of_deltas_;
}
inline void DelayBasedBweUpdates::set_number_of_deltas(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  number_of_deltas_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.DelayBasedBweUpdates.number_of_deltas)
}

// optional bytes timestamp_ms_deltas = 101;
inline bool DelayBasedBweUpdates::has_timestamp_ms_deltas() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DelayBasedBweUpdates::clear_timestamp_ms_deltas() {
  timestamp_ms_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DelayBasedBweUpdates::timestamp_ms_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.DelayBasedBweUpdates.timestamp_ms_deltas)
  return timestamp_ms_deltas_.GetNoArena();
}
inline void DelayBasedBweUpdates::set_timestamp_ms_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.DelayBasedBweUpdates.timestamp_ms_deltas)
}
inline void DelayBasedBweUpdates::set_timestamp_ms_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.DelayBasedBweUpdates.timestamp_ms_deltas)
}
inline void DelayBasedBweUpdates::set_timestamp_ms_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.DelayBasedBweUpdates.timestamp_ms_deltas)
}
inline void DelayBasedBweUpdates::set_timestamp_ms_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.DelayBasedBweUpdates.timestamp_ms_deltas)
}
inline std::string* DelayBasedBweUpdates::mutable_timestamp_ms_deltas() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.DelayBasedBweUpdates.timestamp_ms_deltas)
  return timestamp_ms_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DelayBasedBweUpdates::release_timestamp_ms_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.DelayBasedBweUpdates.timestamp_ms_deltas)
  if (!has_timestamp_ms_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return timestamp_ms_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DelayBasedBweUpdates::set_allocated_timestamp_ms_deltas(std::string* timestamp_ms_deltas) {
  if (timestamp_ms_deltas != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  timestamp_ms_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp_ms_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.DelayBasedBweUpdates.timestamp_ms_deltas)
}

// optional bytes bitrate_bps_deltas = 102;
inline bool DelayBasedBweUpdates::has_bitrate_bps_deltas() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DelayBasedBweUpdates::clear_bitrate_bps_deltas() {
  bitrate_bps_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DelayBasedBweUpdates::bitrate_bps_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.DelayBasedBweUpdates.bitrate_bps_deltas)
  return bitrate_bps_deltas_.GetNoArena();
}
inline void DelayBasedBweUpdates::set_bitrate_bps_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  bitrate_bps_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.DelayBasedBweUpdates.bitrate_bps_deltas)
}
inline void DelayBasedBweUpdates::set_bitrate_bps_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  bitrate_bps_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.DelayBasedBweUpdates.bitrate_bps_deltas)
}
inline void DelayBasedBweUpdates::set_bitrate_bps_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  bitrate_bps_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.DelayBasedBweUpdates.bitrate_bps_deltas)
}
inline void DelayBasedBweUpdates::set_bitrate_bps_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  bitrate_bps_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.DelayBasedBweUpdates.bitrate_bps_deltas)
}
inline std::string* DelayBasedBweUpdates::mutable_bitrate_bps_deltas() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.DelayBasedBweUpdates.bitrate_bps_deltas)
  return bitrate_bps_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DelayBasedBweUpdates::release_bitrate_bps_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.DelayBasedBweUpdates.bitrate_bps_deltas)
  if (!has_bitrate_bps_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return bitrate_bps_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DelayBasedBweUpdates::set_allocated_bitrate_bps_deltas(std::string* bitrate_bps_deltas) {
  if (bitrate_bps_deltas != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bitrate_bps_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bitrate_bps_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.DelayBasedBweUpdates.bitrate_bps_deltas)
}

// optional bytes detector_state_deltas = 103;
inline bool DelayBasedBweUpdates::has_detector_state_deltas() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DelayBasedBweUpdates::clear_detector_state_deltas() {
  detector_state_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& DelayBasedBweUpdates::detector_state_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.DelayBasedBweUpdates.detector_state_deltas)
  return detector_state_deltas_.GetNoArena();
}
inline void DelayBasedBweUpdates::set_detector_state_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  detector_state_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.DelayBasedBweUpdates.detector_state_deltas)
}
inline void DelayBasedBweUpdates::set_detector_state_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  detector_state_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.DelayBasedBweUpdates.detector_state_deltas)
}
inline void DelayBasedBweUpdates::set_detector_state_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  detector_state_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.DelayBasedBweUpdates.detector_state_deltas)
}
inline void DelayBasedBweUpdates::set_detector_state_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  detector_state_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.DelayBasedBweUpdates.detector_state_deltas)
}
inline std::string* DelayBasedBweUpdates::mutable_detector_state_deltas() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.DelayBasedBweUpdates.detector_state_deltas)
  return detector_state_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DelayBasedBweUpdates::release_detector_state_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.DelayBasedBweUpdates.detector_state_deltas)
  if (!has_detector_state_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return detector_state_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DelayBasedBweUpdates::set_allocated_detector_state_deltas(std::string* detector_state_deltas) {
  if (detector_state_deltas != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  detector_state_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), detector_state_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.DelayBasedBweUpdates.detector_state_deltas)
}

// -------------------------------------------------------------------

// RtpHeaderExtensionConfig

// optional int32 transmission_time_offset_id = 1;
inline bool RtpHeaderExtensionConfig::has_transmission_time_offset_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RtpHeaderExtensionConfig::clear_transmission_time_offset_id() {
  transmission_time_offset_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RtpHeaderExtensionConfig::transmission_time_offset_id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.RtpHeaderExtensionConfig.transmission_time_offset_id)
  return transmission_time_offset_id_;
}
inline void RtpHeaderExtensionConfig::set_transmission_time_offset_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  transmission_time_offset_id_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.RtpHeaderExtensionConfig.transmission_time_offset_id)
}

// optional int32 absolute_send_time_id = 2;
inline bool RtpHeaderExtensionConfig::has_absolute_send_time_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RtpHeaderExtensionConfig::clear_absolute_send_time_id() {
  absolute_send_time_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RtpHeaderExtensionConfig::absolute_send_time_id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.RtpHeaderExtensionConfig.absolute_send_time_id)
  return absolute_send_time_id_;
}
inline void RtpHeaderExtensionConfig::set_absolute_send_time_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  absolute_send_time_id_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.RtpHeaderExtensionConfig.absolute_send_time_id)
}

// optional int32 transport_sequence_number_id = 3;
inline bool RtpHeaderExtensionConfig::has_transport_sequence_number_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RtpHeaderExtensionConfig::clear_transport_sequence_number_id() {
  transport_sequence_number_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RtpHeaderExtensionConfig::transport_sequence_number_id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.RtpHeaderExtensionConfig.transport_sequence_number_id)
  return transport_sequence_number_id_;
}
inline void RtpHeaderExtensionConfig::set_transport_sequence_number_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  transport_sequence_number_id_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.RtpHeaderExtensionConfig.transport_sequence_number_id)
}

// optional int32 video_rotation_id = 4;
inline bool RtpHeaderExtensionConfig::has_video_rotation_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RtpHeaderExtensionConfig::clear_video_rotation_id() {
  video_rotation_id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RtpHeaderExtensionConfig::video_rotation_id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.RtpHeaderExtensionConfig.video_rotation_id)
  return video_rotation_id_;
}
inline void RtpHeaderExtensionConfig::set_video_rotation_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  video_rotation_id_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.RtpHeaderExtensionConfig.video_rotation_id)
}

// optional int32 audio_level_id = 5;
inline bool RtpHeaderExtensionConfig::has_audio_level_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RtpHeaderExtensionConfig::clear_audio_level_id() {
  audio_level_id_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RtpHeaderExtensionConfig::audio_level_id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.RtpHeaderExtensionConfig.audio_level_id)
  return audio_level_id_;
}
inline void RtpHeaderExtensionConfig::set_audio_level_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  audio_level_id_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.RtpHeaderExtensionConfig.audio_level_id)
}

// -------------------------------------------------------------------

// VideoRecvStreamConfig

// optional int64 timestamp_ms = 1;
inline bool VideoRecvStreamConfig::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VideoRecvStreamConfig::clear_timestamp_ms() {
  timestamp_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VideoRecvStreamConfig::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.VideoRecvStreamConfig.timestamp_ms)
  return timestamp_ms_;
}
inline void VideoRecvStreamConfig::set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.VideoRecvStreamConfig.timestamp_ms)
}

// optional uint32 remote_ssrc = 2;
inline bool VideoRecvStreamConfig::has_remote_ssrc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VideoRecvStreamConfig::clear_remote_ssrc() {
  remote_ssrc_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoRecvStreamConfig::remote_ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.VideoRecvStreamConfig.remote_ssrc)
  return remote_ssrc_;
}
inline void VideoRecvStreamConfig::set_remote_ssrc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  remote_ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.VideoRecvStreamConfig.remote_ssrc)
}

// optional uint32 local_ssrc = 3;
inline bool VideoRecvStreamConfig::has_local_ssrc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VideoRecvStreamConfig::clear_local_ssrc() {
  local_ssrc_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoRecvStreamConfig::local_ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.VideoRecvStreamConfig.local_ssrc)
  return local_ssrc_;
}
inline void VideoRecvStreamConfig::set_local_ssrc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  local_ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.VideoRecvStreamConfig.local_ssrc)
}

// optional uint32 rtx_ssrc = 4;
inline bool VideoRecvStreamConfig::has_rtx_ssrc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VideoRecvStreamConfig::clear_rtx_ssrc() {
  rtx_ssrc_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoRecvStreamConfig::rtx_ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.VideoRecvStreamConfig.rtx_ssrc)
  return rtx_ssrc_;
}
inline void VideoRecvStreamConfig::set_rtx_ssrc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  rtx_ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.VideoRecvStreamConfig.rtx_ssrc)
}

// optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 5;
inline bool VideoRecvStreamConfig::has_header_extensions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VideoRecvStreamConfig::clear_header_extensions() {
  if (header_extensions_ != nullptr) header_extensions_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::webrtc::rtclog2::RtpHeaderExtensionConfig& VideoRecvStreamConfig::header_extensions() const {
  const ::webrtc::rtclog2::RtpHeaderExtensionConfig* p = header_extensions_;
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.VideoRecvStreamConfig.header_extensions)
  return p != nullptr ? *p : *reinterpret_cast<const ::webrtc::rtclog2::RtpHeaderExtensionConfig*>(
      &::webrtc::rtclog2::_RtpHeaderExtensionConfig_default_instance_);
}
inline ::webrtc::rtclog2::RtpHeaderExtensionConfig* VideoRecvStreamConfig::release_header_extensions() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.VideoRecvStreamConfig.header_extensions)
  _has_bits_[0] &= ~0x00000001u;
  ::webrtc::rtclog2::RtpHeaderExtensionConfig* temp = header_extensions_;
  header_extensions_ = nullptr;
  return temp;
}
inline ::webrtc::rtclog2::RtpHeaderExtensionConfig* VideoRecvStreamConfig::mutable_header_extensions() {
  _has_bits_[0] |= 0x00000001u;
  if (header_extensions_ == nullptr) {
    auto* p = CreateMaybeMessage<::webrtc::rtclog2::RtpHeaderExtensionConfig>(GetArenaNoVirtual());
    header_extensions_ = p;
  }
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.VideoRecvStreamConfig.header_extensions)
  return header_extensions_;
}
inline void VideoRecvStreamConfig::set_allocated_header_extensions(::webrtc::rtclog2::RtpHeaderExtensionConfig* header_extensions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_extensions_;
  }
  if (header_extensions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header_extensions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header_extensions, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_extensions_ = header_extensions;
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.VideoRecvStreamConfig.header_extensions)
}

// -------------------------------------------------------------------

// VideoSendStreamConfig

// optional int64 timestamp_ms = 1;
inline bool VideoSendStreamConfig::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VideoSendStreamConfig::clear_timestamp_ms() {
  timestamp_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VideoSendStreamConfig::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.VideoSendStreamConfig.timestamp_ms)
  return timestamp_ms_;
}
inline void VideoSendStreamConfig::set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.VideoSendStreamConfig.timestamp_ms)
}

// optional uint32 ssrc = 2;
inline bool VideoSendStreamConfig::has_ssrc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VideoSendStreamConfig::clear_ssrc() {
  ssrc_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoSendStreamConfig::ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.VideoSendStreamConfig.ssrc)
  return ssrc_;
}
inline void VideoSendStreamConfig::set_ssrc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.VideoSendStreamConfig.ssrc)
}

// optional uint32 rtx_ssrc = 3;
inline bool VideoSendStreamConfig::has_rtx_ssrc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VideoSendStreamConfig::clear_rtx_ssrc() {
  rtx_ssrc_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoSendStreamConfig::rtx_ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.VideoSendStreamConfig.rtx_ssrc)
  return rtx_ssrc_;
}
inline void VideoSendStreamConfig::set_rtx_ssrc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  rtx_ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.VideoSendStreamConfig.rtx_ssrc)
}

// optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 4;
inline bool VideoSendStreamConfig::has_header_extensions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VideoSendStreamConfig::clear_header_extensions() {
  if (header_extensions_ != nullptr) header_extensions_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::webrtc::rtclog2::RtpHeaderExtensionConfig& VideoSendStreamConfig::header_extensions() const {
  const ::webrtc::rtclog2::RtpHeaderExtensionConfig* p = header_extensions_;
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.VideoSendStreamConfig.header_extensions)
  return p != nullptr ? *p : *reinterpret_cast<const ::webrtc::rtclog2::RtpHeaderExtensionConfig*>(
      &::webrtc::rtclog2::_RtpHeaderExtensionConfig_default_instance_);
}
inline ::webrtc::rtclog2::RtpHeaderExtensionConfig* VideoSendStreamConfig::release_header_extensions() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.VideoSendStreamConfig.header_extensions)
  _has_bits_[0] &= ~0x00000001u;
  ::webrtc::rtclog2::RtpHeaderExtensionConfig* temp = header_extensions_;
  header_extensions_ = nullptr;
  return temp;
}
inline ::webrtc::rtclog2::RtpHeaderExtensionConfig* VideoSendStreamConfig::mutable_header_extensions() {
  _has_bits_[0] |= 0x00000001u;
  if (header_extensions_ == nullptr) {
    auto* p = CreateMaybeMessage<::webrtc::rtclog2::RtpHeaderExtensionConfig>(GetArenaNoVirtual());
    header_extensions_ = p;
  }
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.VideoSendStreamConfig.header_extensions)
  return header_extensions_;
}
inline void VideoSendStreamConfig::set_allocated_header_extensions(::webrtc::rtclog2::RtpHeaderExtensionConfig* header_extensions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_extensions_;
  }
  if (header_extensions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header_extensions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header_extensions, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_extensions_ = header_extensions;
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.VideoSendStreamConfig.header_extensions)
}

// -------------------------------------------------------------------

// AudioRecvStreamConfig

// optional int64 timestamp_ms = 1;
inline bool AudioRecvStreamConfig::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AudioRecvStreamConfig::clear_timestamp_ms() {
  timestamp_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AudioRecvStreamConfig::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioRecvStreamConfig.timestamp_ms)
  return timestamp_ms_;
}
inline void AudioRecvStreamConfig::set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioRecvStreamConfig.timestamp_ms)
}

// optional uint32 remote_ssrc = 2;
inline bool AudioRecvStreamConfig::has_remote_ssrc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AudioRecvStreamConfig::clear_remote_ssrc() {
  remote_ssrc_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AudioRecvStreamConfig::remote_ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioRecvStreamConfig.remote_ssrc)
  return remote_ssrc_;
}
inline void AudioRecvStreamConfig::set_remote_ssrc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  remote_ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioRecvStreamConfig.remote_ssrc)
}

// optional uint32 local_ssrc = 3;
inline bool AudioRecvStreamConfig::has_local_ssrc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AudioRecvStreamConfig::clear_local_ssrc() {
  local_ssrc_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AudioRecvStreamConfig::local_ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioRecvStreamConfig.local_ssrc)
  return local_ssrc_;
}
inline void AudioRecvStreamConfig::set_local_ssrc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  local_ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioRecvStreamConfig.local_ssrc)
}

// optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 5;
inline bool AudioRecvStreamConfig::has_header_extensions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AudioRecvStreamConfig::clear_header_extensions() {
  if (header_extensions_ != nullptr) header_extensions_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::webrtc::rtclog2::RtpHeaderExtensionConfig& AudioRecvStreamConfig::header_extensions() const {
  const ::webrtc::rtclog2::RtpHeaderExtensionConfig* p = header_extensions_;
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioRecvStreamConfig.header_extensions)
  return p != nullptr ? *p : *reinterpret_cast<const ::webrtc::rtclog2::RtpHeaderExtensionConfig*>(
      &::webrtc::rtclog2::_RtpHeaderExtensionConfig_default_instance_);
}
inline ::webrtc::rtclog2::RtpHeaderExtensionConfig* AudioRecvStreamConfig::release_header_extensions() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.AudioRecvStreamConfig.header_extensions)
  _has_bits_[0] &= ~0x00000001u;
  ::webrtc::rtclog2::RtpHeaderExtensionConfig* temp = header_extensions_;
  header_extensions_ = nullptr;
  return temp;
}
inline ::webrtc::rtclog2::RtpHeaderExtensionConfig* AudioRecvStreamConfig::mutable_header_extensions() {
  _has_bits_[0] |= 0x00000001u;
  if (header_extensions_ == nullptr) {
    auto* p = CreateMaybeMessage<::webrtc::rtclog2::RtpHeaderExtensionConfig>(GetArenaNoVirtual());
    header_extensions_ = p;
  }
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.AudioRecvStreamConfig.header_extensions)
  return header_extensions_;
}
inline void AudioRecvStreamConfig::set_allocated_header_extensions(::webrtc::rtclog2::RtpHeaderExtensionConfig* header_extensions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_extensions_;
  }
  if (header_extensions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header_extensions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header_extensions, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_extensions_ = header_extensions;
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.AudioRecvStreamConfig.header_extensions)
}

// -------------------------------------------------------------------

// AudioSendStreamConfig

// optional int64 timestamp_ms = 1;
inline bool AudioSendStreamConfig::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AudioSendStreamConfig::clear_timestamp_ms() {
  timestamp_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AudioSendStreamConfig::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioSendStreamConfig.timestamp_ms)
  return timestamp_ms_;
}
inline void AudioSendStreamConfig::set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioSendStreamConfig.timestamp_ms)
}

// optional uint32 ssrc = 2;
inline bool AudioSendStreamConfig::has_ssrc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AudioSendStreamConfig::clear_ssrc() {
  ssrc_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AudioSendStreamConfig::ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioSendStreamConfig.ssrc)
  return ssrc_;
}
inline void AudioSendStreamConfig::set_ssrc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioSendStreamConfig.ssrc)
}

// optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 4;
inline bool AudioSendStreamConfig::has_header_extensions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AudioSendStreamConfig::clear_header_extensions() {
  if (header_extensions_ != nullptr) header_extensions_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::webrtc::rtclog2::RtpHeaderExtensionConfig& AudioSendStreamConfig::header_extensions() const {
  const ::webrtc::rtclog2::RtpHeaderExtensionConfig* p = header_extensions_;
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioSendStreamConfig.header_extensions)
  return p != nullptr ? *p : *reinterpret_cast<const ::webrtc::rtclog2::RtpHeaderExtensionConfig*>(
      &::webrtc::rtclog2::_RtpHeaderExtensionConfig_default_instance_);
}
inline ::webrtc::rtclog2::RtpHeaderExtensionConfig* AudioSendStreamConfig::release_header_extensions() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.AudioSendStreamConfig.header_extensions)
  _has_bits_[0] &= ~0x00000001u;
  ::webrtc::rtclog2::RtpHeaderExtensionConfig* temp = header_extensions_;
  header_extensions_ = nullptr;
  return temp;
}
inline ::webrtc::rtclog2::RtpHeaderExtensionConfig* AudioSendStreamConfig::mutable_header_extensions() {
  _has_bits_[0] |= 0x00000001u;
  if (header_extensions_ == nullptr) {
    auto* p = CreateMaybeMessage<::webrtc::rtclog2::RtpHeaderExtensionConfig>(GetArenaNoVirtual());
    header_extensions_ = p;
  }
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.AudioSendStreamConfig.header_extensions)
  return header_extensions_;
}
inline void AudioSendStreamConfig::set_allocated_header_extensions(::webrtc::rtclog2::RtpHeaderExtensionConfig* header_extensions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_extensions_;
  }
  if (header_extensions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header_extensions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header_extensions, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_extensions_ = header_extensions;
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.AudioSendStreamConfig.header_extensions)
}

// -------------------------------------------------------------------

// AudioNetworkAdaptations

// optional int64 timestamp_ms = 1;
inline bool AudioNetworkAdaptations::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AudioNetworkAdaptations::clear_timestamp_ms() {
  timestamp_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AudioNetworkAdaptations::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.timestamp_ms)
  return timestamp_ms_;
}
inline void AudioNetworkAdaptations::set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.timestamp_ms)
}

// optional int32 bitrate_bps = 2;
inline bool AudioNetworkAdaptations::has_bitrate_bps() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AudioNetworkAdaptations::clear_bitrate_bps() {
  bitrate_bps_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioNetworkAdaptations::bitrate_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.bitrate_bps)
  return bitrate_bps_;
}
inline void AudioNetworkAdaptations::set_bitrate_bps(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  bitrate_bps_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.bitrate_bps)
}

// optional int32 frame_length_ms = 3;
inline bool AudioNetworkAdaptations::has_frame_length_ms() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AudioNetworkAdaptations::clear_frame_length_ms() {
  frame_length_ms_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioNetworkAdaptations::frame_length_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.frame_length_ms)
  return frame_length_ms_;
}
inline void AudioNetworkAdaptations::set_frame_length_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  frame_length_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.frame_length_ms)
}

// optional uint32 uplink_packet_loss_fraction = 4;
inline bool AudioNetworkAdaptations::has_uplink_packet_loss_fraction() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AudioNetworkAdaptations::clear_uplink_packet_loss_fraction() {
  uplink_packet_loss_fraction_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AudioNetworkAdaptations::uplink_packet_loss_fraction() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.uplink_packet_loss_fraction)
  return uplink_packet_loss_fraction_;
}
inline void AudioNetworkAdaptations::set_uplink_packet_loss_fraction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  uplink_packet_loss_fraction_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.uplink_packet_loss_fraction)
}

// optional bool enable_fec = 5;
inline bool AudioNetworkAdaptations::has_enable_fec() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AudioNetworkAdaptations::clear_enable_fec() {
  enable_fec_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool AudioNetworkAdaptations::enable_fec() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.enable_fec)
  return enable_fec_;
}
inline void AudioNetworkAdaptations::set_enable_fec(bool value) {
  _has_bits_[0] |= 0x00000800u;
  enable_fec_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.enable_fec)
}

// optional bool enable_dtx = 6;
inline bool AudioNetworkAdaptations::has_enable_dtx() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void AudioNetworkAdaptations::clear_enable_dtx() {
  enable_dtx_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool AudioNetworkAdaptations::enable_dtx() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.enable_dtx)
  return enable_dtx_;
}
inline void AudioNetworkAdaptations::set_enable_dtx(bool value) {
  _has_bits_[0] |= 0x00001000u;
  enable_dtx_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.enable_dtx)
}

// optional uint32 num_channels = 7;
inline bool AudioNetworkAdaptations::has_num_channels() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void AudioNetworkAdaptations::clear_num_channels() {
  num_channels_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AudioNetworkAdaptations::num_channels() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.num_channels)
  return num_channels_;
}
inline void AudioNetworkAdaptations::set_num_channels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  num_channels_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.num_channels)
}

// optional uint32 number_of_deltas = 8;
inline bool AudioNetworkAdaptations::has_number_of_deltas() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void AudioNetworkAdaptations::clear_number_of_deltas() {
  number_of_deltas_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AudioNetworkAdaptations::number_of_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.number_of_deltas)
  return number_of_deltas_;
}
inline void AudioNetworkAdaptations::set_number_of_deltas(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  number_of_deltas_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.number_of_deltas)
}

// optional bytes timestamp_ms_deltas = 101;
inline bool AudioNetworkAdaptations::has_timestamp_ms_deltas() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AudioNetworkAdaptations::clear_timestamp_ms_deltas() {
  timestamp_ms_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AudioNetworkAdaptations::timestamp_ms_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.timestamp_ms_deltas)
  return timestamp_ms_deltas_.GetNoArena();
}
inline void AudioNetworkAdaptations::set_timestamp_ms_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.timestamp_ms_deltas)
}
inline void AudioNetworkAdaptations::set_timestamp_ms_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.AudioNetworkAdaptations.timestamp_ms_deltas)
}
inline void AudioNetworkAdaptations::set_timestamp_ms_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.AudioNetworkAdaptations.timestamp_ms_deltas)
}
inline void AudioNetworkAdaptations::set_timestamp_ms_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.AudioNetworkAdaptations.timestamp_ms_deltas)
}
inline std::string* AudioNetworkAdaptations::mutable_timestamp_ms_deltas() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.AudioNetworkAdaptations.timestamp_ms_deltas)
  return timestamp_ms_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AudioNetworkAdaptations::release_timestamp_ms_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.AudioNetworkAdaptations.timestamp_ms_deltas)
  if (!has_timestamp_ms_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return timestamp_ms_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AudioNetworkAdaptations::set_allocated_timestamp_ms_deltas(std::string* timestamp_ms_deltas) {
  if (timestamp_ms_deltas != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  timestamp_ms_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp_ms_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.AudioNetworkAdaptations.timestamp_ms_deltas)
}

// optional bytes bitrate_bps_deltas = 102;
inline bool AudioNetworkAdaptations::has_bitrate_bps_deltas() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AudioNetworkAdaptations::clear_bitrate_bps_deltas() {
  bitrate_bps_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AudioNetworkAdaptations::bitrate_bps_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.bitrate_bps_deltas)
  return bitrate_bps_deltas_.GetNoArena();
}
inline void AudioNetworkAdaptations::set_bitrate_bps_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  bitrate_bps_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.bitrate_bps_deltas)
}
inline void AudioNetworkAdaptations::set_bitrate_bps_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  bitrate_bps_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.AudioNetworkAdaptations.bitrate_bps_deltas)
}
inline void AudioNetworkAdaptations::set_bitrate_bps_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  bitrate_bps_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.AudioNetworkAdaptations.bitrate_bps_deltas)
}
inline void AudioNetworkAdaptations::set_bitrate_bps_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  bitrate_bps_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.AudioNetworkAdaptations.bitrate_bps_deltas)
}
inline std::string* AudioNetworkAdaptations::mutable_bitrate_bps_deltas() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.AudioNetworkAdaptations.bitrate_bps_deltas)
  return bitrate_bps_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AudioNetworkAdaptations::release_bitrate_bps_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.AudioNetworkAdaptations.bitrate_bps_deltas)
  if (!has_bitrate_bps_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return bitrate_bps_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AudioNetworkAdaptations::set_allocated_bitrate_bps_deltas(std::string* bitrate_bps_deltas) {
  if (bitrate_bps_deltas != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bitrate_bps_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bitrate_bps_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.AudioNetworkAdaptations.bitrate_bps_deltas)
}

// optional bytes frame_length_ms_deltas = 103;
inline bool AudioNetworkAdaptations::has_frame_length_ms_deltas() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AudioNetworkAdaptations::clear_frame_length_ms_deltas() {
  frame_length_ms_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AudioNetworkAdaptations::frame_length_ms_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.frame_length_ms_deltas)
  return frame_length_ms_deltas_.GetNoArena();
}
inline void AudioNetworkAdaptations::set_frame_length_ms_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  frame_length_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.frame_length_ms_deltas)
}
inline void AudioNetworkAdaptations::set_frame_length_ms_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  frame_length_ms_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.AudioNetworkAdaptations.frame_length_ms_deltas)
}
inline void AudioNetworkAdaptations::set_frame_length_ms_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  frame_length_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.AudioNetworkAdaptations.frame_length_ms_deltas)
}
inline void AudioNetworkAdaptations::set_frame_length_ms_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  frame_length_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.AudioNetworkAdaptations.frame_length_ms_deltas)
}
inline std::string* AudioNetworkAdaptations::mutable_frame_length_ms_deltas() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.AudioNetworkAdaptations.frame_length_ms_deltas)
  return frame_length_ms_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AudioNetworkAdaptations::release_frame_length_ms_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.AudioNetworkAdaptations.frame_length_ms_deltas)
  if (!has_frame_length_ms_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return frame_length_ms_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AudioNetworkAdaptations::set_allocated_frame_length_ms_deltas(std::string* frame_length_ms_deltas) {
  if (frame_length_ms_deltas != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  frame_length_ms_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frame_length_ms_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.AudioNetworkAdaptations.frame_length_ms_deltas)
}

// optional bytes uplink_packet_loss_fraction_deltas = 104;
inline bool AudioNetworkAdaptations::has_uplink_packet_loss_fraction_deltas() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AudioNetworkAdaptations::clear_uplink_packet_loss_fraction_deltas() {
  uplink_packet_loss_fraction_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AudioNetworkAdaptations::uplink_packet_loss_fraction_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.uplink_packet_loss_fraction_deltas)
  return uplink_packet_loss_fraction_deltas_.GetNoArena();
}
inline void AudioNetworkAdaptations::set_uplink_packet_loss_fraction_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  uplink_packet_loss_fraction_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.uplink_packet_loss_fraction_deltas)
}
inline void AudioNetworkAdaptations::set_uplink_packet_loss_fraction_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  uplink_packet_loss_fraction_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.AudioNetworkAdaptations.uplink_packet_loss_fraction_deltas)
}
inline void AudioNetworkAdaptations::set_uplink_packet_loss_fraction_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  uplink_packet_loss_fraction_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.AudioNetworkAdaptations.uplink_packet_loss_fraction_deltas)
}
inline void AudioNetworkAdaptations::set_uplink_packet_loss_fraction_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  uplink_packet_loss_fraction_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.AudioNetworkAdaptations.uplink_packet_loss_fraction_deltas)
}
inline std::string* AudioNetworkAdaptations::mutable_uplink_packet_loss_fraction_deltas() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.AudioNetworkAdaptations.uplink_packet_loss_fraction_deltas)
  return uplink_packet_loss_fraction_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AudioNetworkAdaptations::release_uplink_packet_loss_fraction_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.AudioNetworkAdaptations.uplink_packet_loss_fraction_deltas)
  if (!has_uplink_packet_loss_fraction_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return uplink_packet_loss_fraction_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AudioNetworkAdaptations::set_allocated_uplink_packet_loss_fraction_deltas(std::string* uplink_packet_loss_fraction_deltas) {
  if (uplink_packet_loss_fraction_deltas != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  uplink_packet_loss_fraction_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uplink_packet_loss_fraction_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.AudioNetworkAdaptations.uplink_packet_loss_fraction_deltas)
}

// optional bytes enable_fec_deltas = 105;
inline bool AudioNetworkAdaptations::has_enable_fec_deltas() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AudioNetworkAdaptations::clear_enable_fec_deltas() {
  enable_fec_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& AudioNetworkAdaptations::enable_fec_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.enable_fec_deltas)
  return enable_fec_deltas_.GetNoArena();
}
inline void AudioNetworkAdaptations::set_enable_fec_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  enable_fec_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.enable_fec_deltas)
}
inline void AudioNetworkAdaptations::set_enable_fec_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  enable_fec_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.AudioNetworkAdaptations.enable_fec_deltas)
}
inline void AudioNetworkAdaptations::set_enable_fec_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  enable_fec_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.AudioNetworkAdaptations.enable_fec_deltas)
}
inline void AudioNetworkAdaptations::set_enable_fec_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  enable_fec_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.AudioNetworkAdaptations.enable_fec_deltas)
}
inline std::string* AudioNetworkAdaptations::mutable_enable_fec_deltas() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.AudioNetworkAdaptations.enable_fec_deltas)
  return enable_fec_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AudioNetworkAdaptations::release_enable_fec_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.AudioNetworkAdaptations.enable_fec_deltas)
  if (!has_enable_fec_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return enable_fec_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AudioNetworkAdaptations::set_allocated_enable_fec_deltas(std::string* enable_fec_deltas) {
  if (enable_fec_deltas != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  enable_fec_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), enable_fec_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.AudioNetworkAdaptations.enable_fec_deltas)
}

// optional bytes enable_dtx_deltas = 106;
inline bool AudioNetworkAdaptations::has_enable_dtx_deltas() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AudioNetworkAdaptations::clear_enable_dtx_deltas() {
  enable_dtx_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& AudioNetworkAdaptations::enable_dtx_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.enable_dtx_deltas)
  return enable_dtx_deltas_.GetNoArena();
}
inline void AudioNetworkAdaptations::set_enable_dtx_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  enable_dtx_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.enable_dtx_deltas)
}
inline void AudioNetworkAdaptations::set_enable_dtx_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  enable_dtx_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.AudioNetworkAdaptations.enable_dtx_deltas)
}
inline void AudioNetworkAdaptations::set_enable_dtx_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  enable_dtx_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.AudioNetworkAdaptations.enable_dtx_deltas)
}
inline void AudioNetworkAdaptations::set_enable_dtx_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  enable_dtx_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.AudioNetworkAdaptations.enable_dtx_deltas)
}
inline std::string* AudioNetworkAdaptations::mutable_enable_dtx_deltas() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.AudioNetworkAdaptations.enable_dtx_deltas)
  return enable_dtx_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AudioNetworkAdaptations::release_enable_dtx_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.AudioNetworkAdaptations.enable_dtx_deltas)
  if (!has_enable_dtx_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return enable_dtx_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AudioNetworkAdaptations::set_allocated_enable_dtx_deltas(std::string* enable_dtx_deltas) {
  if (enable_dtx_deltas != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  enable_dtx_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), enable_dtx_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.AudioNetworkAdaptations.enable_dtx_deltas)
}

// optional bytes num_channels_deltas = 107;
inline bool AudioNetworkAdaptations::has_num_channels_deltas() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AudioNetworkAdaptations::clear_num_channels_deltas() {
  num_channels_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& AudioNetworkAdaptations::num_channels_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.num_channels_deltas)
  return num_channels_deltas_.GetNoArena();
}
inline void AudioNetworkAdaptations::set_num_channels_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  num_channels_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.num_channels_deltas)
}
inline void AudioNetworkAdaptations::set_num_channels_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  num_channels_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.AudioNetworkAdaptations.num_channels_deltas)
}
inline void AudioNetworkAdaptations::set_num_channels_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  num_channels_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.AudioNetworkAdaptations.num_channels_deltas)
}
inline void AudioNetworkAdaptations::set_num_channels_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  num_channels_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.AudioNetworkAdaptations.num_channels_deltas)
}
inline std::string* AudioNetworkAdaptations::mutable_num_channels_deltas() {
  _has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.AudioNetworkAdaptations.num_channels_deltas)
  return num_channels_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AudioNetworkAdaptations::release_num_channels_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.AudioNetworkAdaptations.num_channels_deltas)
  if (!has_num_channels_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return num_channels_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AudioNetworkAdaptations::set_allocated_num_channels_deltas(std::string* num_channels_deltas) {
  if (num_channels_deltas != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  num_channels_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), num_channels_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.AudioNetworkAdaptations.num_channels_deltas)
}

// -------------------------------------------------------------------

// BweProbeCluster

// optional int64 timestamp_ms = 1;
inline bool BweProbeCluster::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BweProbeCluster::clear_timestamp_ms() {
  timestamp_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BweProbeCluster::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.BweProbeCluster.timestamp_ms)
  return timestamp_ms_;
}
inline void BweProbeCluster::set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.BweProbeCluster.timestamp_ms)
}

// optional uint32 id = 2;
inline bool BweProbeCluster::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BweProbeCluster::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BweProbeCluster::id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.BweProbeCluster.id)
  return id_;
}
inline void BweProbeCluster::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.BweProbeCluster.id)
}

// optional uint32 bitrate_bps = 3;
inline bool BweProbeCluster::has_bitrate_bps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BweProbeCluster::clear_bitrate_bps() {
  bitrate_bps_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BweProbeCluster::bitrate_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.BweProbeCluster.bitrate_bps)
  return bitrate_bps_;
}
inline void BweProbeCluster::set_bitrate_bps(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  bitrate_bps_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.BweProbeCluster.bitrate_bps)
}

// optional uint32 min_packets = 4;
inline bool BweProbeCluster::has_min_packets() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BweProbeCluster::clear_min_packets() {
  min_packets_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BweProbeCluster::min_packets() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.BweProbeCluster.min_packets)
  return min_packets_;
}
inline void BweProbeCluster::set_min_packets(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  min_packets_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.BweProbeCluster.min_packets)
}

// optional uint32 min_bytes = 5;
inline bool BweProbeCluster::has_min_bytes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BweProbeCluster::clear_min_bytes() {
  min_bytes_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BweProbeCluster::min_bytes() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.BweProbeCluster.min_bytes)
  return min_bytes_;
}
inline void BweProbeCluster::set_min_bytes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  min_bytes_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.BweProbeCluster.min_bytes)
}

// -------------------------------------------------------------------

// BweProbeResultSuccess

// optional int64 timestamp_ms = 1;
inline bool BweProbeResultSuccess::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BweProbeResultSuccess::clear_timestamp_ms() {
  timestamp_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BweProbeResultSuccess::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.BweProbeResultSuccess.timestamp_ms)
  return timestamp_ms_;
}
inline void BweProbeResultSuccess::set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.BweProbeResultSuccess.timestamp_ms)
}

// optional uint32 id = 2;
inline bool BweProbeResultSuccess::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BweProbeResultSuccess::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BweProbeResultSuccess::id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.BweProbeResultSuccess.id)
  return id_;
}
inline void BweProbeResultSuccess::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.BweProbeResultSuccess.id)
}

// optional uint32 bitrate_bps = 3;
inline bool BweProbeResultSuccess::has_bitrate_bps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BweProbeResultSuccess::clear_bitrate_bps() {
  bitrate_bps_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BweProbeResultSuccess::bitrate_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.BweProbeResultSuccess.bitrate_bps)
  return bitrate_bps_;
}
inline void BweProbeResultSuccess::set_bitrate_bps(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  bitrate_bps_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.BweProbeResultSuccess.bitrate_bps)
}

// -------------------------------------------------------------------

// BweProbeResultFailure

// optional int64 timestamp_ms = 1;
inline bool BweProbeResultFailure::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BweProbeResultFailure::clear_timestamp_ms() {
  timestamp_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BweProbeResultFailure::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.BweProbeResultFailure.timestamp_ms)
  return timestamp_ms_;
}
inline void BweProbeResultFailure::set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.BweProbeResultFailure.timestamp_ms)
}

// optional uint32 id = 2;
inline bool BweProbeResultFailure::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BweProbeResultFailure::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BweProbeResultFailure::id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.BweProbeResultFailure.id)
  return id_;
}
inline void BweProbeResultFailure::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.BweProbeResultFailure.id)
}

// optional .webrtc.rtclog2.BweProbeResultFailure.FailureReason failure = 3;
inline bool BweProbeResultFailure::has_failure() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BweProbeResultFailure::clear_failure() {
  failure_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::webrtc::rtclog2::BweProbeResultFailure_FailureReason BweProbeResultFailure::failure() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.BweProbeResultFailure.failure)
  return static_cast< ::webrtc::rtclog2::BweProbeResultFailure_FailureReason >(failure_);
}
inline void BweProbeResultFailure::set_failure(::webrtc::rtclog2::BweProbeResultFailure_FailureReason value) {
  assert(::webrtc::rtclog2::BweProbeResultFailure_FailureReason_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  failure_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.BweProbeResultFailure.failure)
}

// -------------------------------------------------------------------

// AlrState

// optional int64 timestamp_ms = 1;
inline bool AlrState::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlrState::clear_timestamp_ms() {
  timestamp_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AlrState::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AlrState.timestamp_ms)
  return timestamp_ms_;
}
inline void AlrState::set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AlrState.timestamp_ms)
}

// optional bool in_alr = 2;
inline bool AlrState::has_in_alr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AlrState::clear_in_alr() {
  in_alr_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool AlrState::in_alr() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AlrState.in_alr)
  return in_alr_;
}
inline void AlrState::set_in_alr(bool value) {
  _has_bits_[0] |= 0x00000002u;
  in_alr_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AlrState.in_alr)
}

// -------------------------------------------------------------------

// IceCandidatePairConfig

// optional int64 timestamp_ms = 1;
inline bool IceCandidatePairConfig::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IceCandidatePairConfig::clear_timestamp_ms() {
  timestamp_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IceCandidatePairConfig::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IceCandidatePairConfig.timestamp_ms)
  return timestamp_ms_;
}
inline void IceCandidatePairConfig::set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IceCandidatePairConfig.timestamp_ms)
}

// optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidatePairConfigType config_type = 2;
inline bool IceCandidatePairConfig::has_config_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IceCandidatePairConfig::clear_config_type() {
  config_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::webrtc::rtclog2::IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfig::config_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IceCandidatePairConfig.config_type)
  return static_cast< ::webrtc::rtclog2::IceCandidatePairConfig_IceCandidatePairConfigType >(config_type_);
}
inline void IceCandidatePairConfig::set_config_type(::webrtc::rtclog2::IceCandidatePairConfig_IceCandidatePairConfigType value) {
  assert(::webrtc::rtclog2::IceCandidatePairConfig_IceCandidatePairConfigType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  config_type_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IceCandidatePairConfig.config_type)
}

// optional uint32 candidate_pair_id = 3;
inline bool IceCandidatePairConfig::has_candidate_pair_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IceCandidatePairConfig::clear_candidate_pair_id() {
  candidate_pair_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IceCandidatePairConfig::candidate_pair_id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IceCandidatePairConfig.candidate_pair_id)
  return candidate_pair_id_;
}
inline void IceCandidatePairConfig::set_candidate_pair_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  candidate_pair_id_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IceCandidatePairConfig.candidate_pair_id)
}

// optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidateType local_candidate_type = 4;
inline bool IceCandidatePairConfig::has_local_candidate_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IceCandidatePairConfig::clear_local_candidate_type() {
  local_candidate_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig::local_candidate_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IceCandidatePairConfig.local_candidate_type)
  return static_cast< ::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType >(local_candidate_type_);
}
inline void IceCandidatePairConfig::set_local_candidate_type(::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType value) {
  assert(::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  local_candidate_type_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IceCandidatePairConfig.local_candidate_type)
}

// optional .webrtc.rtclog2.IceCandidatePairConfig.Protocol local_relay_protocol = 5;
inline bool IceCandidatePairConfig::has_local_relay_protocol() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IceCandidatePairConfig::clear_local_relay_protocol() {
  local_relay_protocol_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::webrtc::rtclog2::IceCandidatePairConfig_Protocol IceCandidatePairConfig::local_relay_protocol() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IceCandidatePairConfig.local_relay_protocol)
  return static_cast< ::webrtc::rtclog2::IceCandidatePairConfig_Protocol >(local_relay_protocol_);
}
inline void IceCandidatePairConfig::set_local_relay_protocol(::webrtc::rtclog2::IceCandidatePairConfig_Protocol value) {
  assert(::webrtc::rtclog2::IceCandidatePairConfig_Protocol_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  local_relay_protocol_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IceCandidatePairConfig.local_relay_protocol)
}

// optional .webrtc.rtclog2.IceCandidatePairConfig.NetworkType local_network_type = 6;
inline bool IceCandidatePairConfig::has_local_network_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IceCandidatePairConfig::clear_local_network_type() {
  local_network_type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::webrtc::rtclog2::IceCandidatePairConfig_NetworkType IceCandidatePairConfig::local_network_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IceCandidatePairConfig.local_network_type)
  return static_cast< ::webrtc::rtclog2::IceCandidatePairConfig_NetworkType >(local_network_type_);
}
inline void IceCandidatePairConfig::set_local_network_type(::webrtc::rtclog2::IceCandidatePairConfig_NetworkType value) {
  assert(::webrtc::rtclog2::IceCandidatePairConfig_NetworkType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  local_network_type_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IceCandidatePairConfig.local_network_type)
}

// optional .webrtc.rtclog2.IceCandidatePairConfig.AddressFamily local_address_family = 7;
inline bool IceCandidatePairConfig::has_local_address_family() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IceCandidatePairConfig::clear_local_address_family() {
  local_address_family_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily IceCandidatePairConfig::local_address_family() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IceCandidatePairConfig.local_address_family)
  return static_cast< ::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily >(local_address_family_);
}
inline void IceCandidatePairConfig::set_local_address_family(::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily value) {
  assert(::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  local_address_family_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IceCandidatePairConfig.local_address_family)
}

// optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidateType remote_candidate_type = 8;
inline bool IceCandidatePairConfig::has_remote_candidate_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IceCandidatePairConfig::clear_remote_candidate_type() {
  remote_candidate_type_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig::remote_candidate_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IceCandidatePairConfig.remote_candidate_type)
  return static_cast< ::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType >(remote_candidate_type_);
}
inline void IceCandidatePairConfig::set_remote_candidate_type(::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType value) {
  assert(::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  remote_candidate_type_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IceCandidatePairConfig.remote_candidate_type)
}

// optional .webrtc.rtclog2.IceCandidatePairConfig.AddressFamily remote_address_family = 9;
inline bool IceCandidatePairConfig::has_remote_address_family() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IceCandidatePairConfig::clear_remote_address_family() {
  remote_address_family_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily IceCandidatePairConfig::remote_address_family() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IceCandidatePairConfig.remote_address_family)
  return static_cast< ::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily >(remote_address_family_);
}
inline void IceCandidatePairConfig::set_remote_address_family(::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily value) {
  assert(::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  remote_address_family_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IceCandidatePairConfig.remote_address_family)
}

// optional .webrtc.rtclog2.IceCandidatePairConfig.Protocol candidate_pair_protocol = 10;
inline bool IceCandidatePairConfig::has_candidate_pair_protocol() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IceCandidatePairConfig::clear_candidate_pair_protocol() {
  candidate_pair_protocol_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::webrtc::rtclog2::IceCandidatePairConfig_Protocol IceCandidatePairConfig::candidate_pair_protocol() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IceCandidatePairConfig.candidate_pair_protocol)
  return static_cast< ::webrtc::rtclog2::IceCandidatePairConfig_Protocol >(candidate_pair_protocol_);
}
inline void IceCandidatePairConfig::set_candidate_pair_protocol(::webrtc::rtclog2::IceCandidatePairConfig_Protocol value) {
  assert(::webrtc::rtclog2::IceCandidatePairConfig_Protocol_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  candidate_pair_protocol_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IceCandidatePairConfig.candidate_pair_protocol)
}

// -------------------------------------------------------------------

// IceCandidatePairEvent

// optional int64 timestamp_ms = 1;
inline bool IceCandidatePairEvent::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IceCandidatePairEvent::clear_timestamp_ms() {
  timestamp_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IceCandidatePairEvent::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IceCandidatePairEvent.timestamp_ms)
  return timestamp_ms_;
}
inline void IceCandidatePairEvent::set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IceCandidatePairEvent.timestamp_ms)
}

// optional .webrtc.rtclog2.IceCandidatePairEvent.IceCandidatePairEventType event_type = 2;
inline bool IceCandidatePairEvent::has_event_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IceCandidatePairEvent::clear_event_type() {
  event_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::webrtc::rtclog2::IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEvent::event_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IceCandidatePairEvent.event_type)
  return static_cast< ::webrtc::rtclog2::IceCandidatePairEvent_IceCandidatePairEventType >(event_type_);
}
inline void IceCandidatePairEvent::set_event_type(::webrtc::rtclog2::IceCandidatePairEvent_IceCandidatePairEventType value) {
  assert(::webrtc::rtclog2::IceCandidatePairEvent_IceCandidatePairEventType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  event_type_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IceCandidatePairEvent.event_type)
}

// optional uint32 candidate_pair_id = 3;
inline bool IceCandidatePairEvent::has_candidate_pair_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IceCandidatePairEvent::clear_candidate_pair_id() {
  candidate_pair_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IceCandidatePairEvent::candidate_pair_id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IceCandidatePairEvent.candidate_pair_id)
  return candidate_pair_id_;
}
inline void IceCandidatePairEvent::set_candidate_pair_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  candidate_pair_id_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IceCandidatePairEvent.candidate_pair_id)
}

// optional uint32 transaction_id = 4;
inline bool IceCandidatePairEvent::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IceCandidatePairEvent::clear_transaction_id() {
  transaction_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IceCandidatePairEvent::transaction_id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IceCandidatePairEvent.transaction_id)
  return transaction_id_;
}
inline void IceCandidatePairEvent::set_transaction_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IceCandidatePairEvent.transaction_id)
}

// -------------------------------------------------------------------

// DtlsTransportStateEvent

// optional int64 timestamp_ms = 1;
inline bool DtlsTransportStateEvent::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DtlsTransportStateEvent::clear_timestamp_ms() {
  timestamp_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DtlsTransportStateEvent::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.DtlsTransportStateEvent.timestamp_ms)
  return timestamp_ms_;
}
inline void DtlsTransportStateEvent::set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.DtlsTransportStateEvent.timestamp_ms)
}

// optional .webrtc.rtclog2.DtlsTransportStateEvent.DtlsTransportState dtls_transport_state = 2;
inline bool DtlsTransportStateEvent::has_dtls_transport_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DtlsTransportStateEvent::clear_dtls_transport_state() {
  dtls_transport_state_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::webrtc::rtclog2::DtlsTransportStateEvent_DtlsTransportState DtlsTransportStateEvent::dtls_transport_state() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.DtlsTransportStateEvent.dtls_transport_state)
  return static_cast< ::webrtc::rtclog2::DtlsTransportStateEvent_DtlsTransportState >(dtls_transport_state_);
}
inline void DtlsTransportStateEvent::set_dtls_transport_state(::webrtc::rtclog2::DtlsTransportStateEvent_DtlsTransportState value) {
  assert(::webrtc::rtclog2::DtlsTransportStateEvent_DtlsTransportState_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  dtls_transport_state_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.DtlsTransportStateEvent.dtls_transport_state)
}

// -------------------------------------------------------------------

// DtlsWritableState

// optional int64 timestamp_ms = 1;
inline bool DtlsWritableState::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DtlsWritableState::clear_timestamp_ms() {
  timestamp_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DtlsWritableState::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.DtlsWritableState.timestamp_ms)
  return timestamp_ms_;
}
inline void DtlsWritableState::set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.DtlsWritableState.timestamp_ms)
}

// optional bool writable = 2;
inline bool DtlsWritableState::has_writable() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DtlsWritableState::clear_writable() {
  writable_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool DtlsWritableState::writable() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.DtlsWritableState.writable)
  return writable_;
}
inline void DtlsWritableState::set_writable(bool value) {
  _has_bits_[0] |= 0x00000002u;
  writable_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.DtlsWritableState.writable)
}

// -------------------------------------------------------------------

// RouteChange

// optional int64 timestamp_ms = 1;
inline bool RouteChange::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RouteChange::clear_timestamp_ms() {
  timestamp_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RouteChange::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.RouteChange.timestamp_ms)
  return timestamp_ms_;
}
inline void RouteChange::set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.RouteChange.timestamp_ms)
}

// optional bool connected = 2;
inline bool RouteChange::has_connected() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RouteChange::clear_connected() {
  connected_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool RouteChange::connected() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.RouteChange.connected)
  return connected_;
}
inline void RouteChange::set_connected(bool value) {
  _has_bits_[0] |= 0x00000002u;
  connected_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.RouteChange.connected)
}

// optional uint32 overhead = 3;
inline bool RouteChange::has_overhead() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RouteChange::clear_overhead() {
  overhead_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouteChange::overhead() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.RouteChange.overhead)
  return overhead_;
}
inline void RouteChange::set_overhead(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  overhead_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.RouteChange.overhead)
}

// -------------------------------------------------------------------

// RemoteEstimates

// optional int64 timestamp_ms = 1;
inline bool RemoteEstimates::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RemoteEstimates::clear_timestamp_ms() {
  timestamp_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RemoteEstimates::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.RemoteEstimates.timestamp_ms)
  return timestamp_ms_;
}
inline void RemoteEstimates::set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.RemoteEstimates.timestamp_ms)
}

// optional uint32 link_capacity_lower_kbps = 2;
inline bool RemoteEstimates::has_link_capacity_lower_kbps() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RemoteEstimates::clear_link_capacity_lower_kbps() {
  link_capacity_lower_kbps_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoteEstimates::link_capacity_lower_kbps() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.RemoteEstimates.link_capacity_lower_kbps)
  return link_capacity_lower_kbps_;
}
inline void RemoteEstimates::set_link_capacity_lower_kbps(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  link_capacity_lower_kbps_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.RemoteEstimates.link_capacity_lower_kbps)
}

// optional uint32 link_capacity_upper_kbps = 3;
inline bool RemoteEstimates::has_link_capacity_upper_kbps() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RemoteEstimates::clear_link_capacity_upper_kbps() {
  link_capacity_upper_kbps_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoteEstimates::link_capacity_upper_kbps() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.RemoteEstimates.link_capacity_upper_kbps)
  return link_capacity_upper_kbps_;
}
inline void RemoteEstimates::set_link_capacity_upper_kbps(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  link_capacity_upper_kbps_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.RemoteEstimates.link_capacity_upper_kbps)
}

// optional uint32 number_of_deltas = 4;
inline bool RemoteEstimates::has_number_of_deltas() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RemoteEstimates::clear_number_of_deltas() {
  number_of_deltas_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoteEstimates::number_of_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.RemoteEstimates.number_of_deltas)
  return number_of_deltas_;
}
inline void RemoteEstimates::set_number_of_deltas(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  number_of_deltas_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.RemoteEstimates.number_of_deltas)
}

// optional bytes timestamp_ms_deltas = 101;
inline bool RemoteEstimates::has_timestamp_ms_deltas() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemoteEstimates::clear_timestamp_ms_deltas() {
  timestamp_ms_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RemoteEstimates::timestamp_ms_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.RemoteEstimates.timestamp_ms_deltas)
  return timestamp_ms_deltas_.GetNoArena();
}
inline void RemoteEstimates::set_timestamp_ms_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.RemoteEstimates.timestamp_ms_deltas)
}
inline void RemoteEstimates::set_timestamp_ms_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.RemoteEstimates.timestamp_ms_deltas)
}
inline void RemoteEstimates::set_timestamp_ms_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.RemoteEstimates.timestamp_ms_deltas)
}
inline void RemoteEstimates::set_timestamp_ms_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ms_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.RemoteEstimates.timestamp_ms_deltas)
}
inline std::string* RemoteEstimates::mutable_timestamp_ms_deltas() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.RemoteEstimates.timestamp_ms_deltas)
  return timestamp_ms_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RemoteEstimates::release_timestamp_ms_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.RemoteEstimates.timestamp_ms_deltas)
  if (!has_timestamp_ms_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return timestamp_ms_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RemoteEstimates::set_allocated_timestamp_ms_deltas(std::string* timestamp_ms_deltas) {
  if (timestamp_ms_deltas != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  timestamp_ms_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp_ms_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.RemoteEstimates.timestamp_ms_deltas)
}

// optional bytes link_capacity_lower_kbps_deltas = 102;
inline bool RemoteEstimates::has_link_capacity_lower_kbps_deltas() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RemoteEstimates::clear_link_capacity_lower_kbps_deltas() {
  link_capacity_lower_kbps_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RemoteEstimates::link_capacity_lower_kbps_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.RemoteEstimates.link_capacity_lower_kbps_deltas)
  return link_capacity_lower_kbps_deltas_.GetNoArena();
}
inline void RemoteEstimates::set_link_capacity_lower_kbps_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  link_capacity_lower_kbps_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.RemoteEstimates.link_capacity_lower_kbps_deltas)
}
inline void RemoteEstimates::set_link_capacity_lower_kbps_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  link_capacity_lower_kbps_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.RemoteEstimates.link_capacity_lower_kbps_deltas)
}
inline void RemoteEstimates::set_link_capacity_lower_kbps_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  link_capacity_lower_kbps_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.RemoteEstimates.link_capacity_lower_kbps_deltas)
}
inline void RemoteEstimates::set_link_capacity_lower_kbps_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  link_capacity_lower_kbps_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.RemoteEstimates.link_capacity_lower_kbps_deltas)
}
inline std::string* RemoteEstimates::mutable_link_capacity_lower_kbps_deltas() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.RemoteEstimates.link_capacity_lower_kbps_deltas)
  return link_capacity_lower_kbps_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RemoteEstimates::release_link_capacity_lower_kbps_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.RemoteEstimates.link_capacity_lower_kbps_deltas)
  if (!has_link_capacity_lower_kbps_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return link_capacity_lower_kbps_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RemoteEstimates::set_allocated_link_capacity_lower_kbps_deltas(std::string* link_capacity_lower_kbps_deltas) {
  if (link_capacity_lower_kbps_deltas != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  link_capacity_lower_kbps_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), link_capacity_lower_kbps_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.RemoteEstimates.link_capacity_lower_kbps_deltas)
}

// optional bytes link_capacity_upper_kbps_deltas = 103;
inline bool RemoteEstimates::has_link_capacity_upper_kbps_deltas() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RemoteEstimates::clear_link_capacity_upper_kbps_deltas() {
  link_capacity_upper_kbps_deltas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RemoteEstimates::link_capacity_upper_kbps_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.RemoteEstimates.link_capacity_upper_kbps_deltas)
  return link_capacity_upper_kbps_deltas_.GetNoArena();
}
inline void RemoteEstimates::set_link_capacity_upper_kbps_deltas(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  link_capacity_upper_kbps_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.RemoteEstimates.link_capacity_upper_kbps_deltas)
}
inline void RemoteEstimates::set_link_capacity_upper_kbps_deltas(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  link_capacity_upper_kbps_deltas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.RemoteEstimates.link_capacity_upper_kbps_deltas)
}
inline void RemoteEstimates::set_link_capacity_upper_kbps_deltas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  link_capacity_upper_kbps_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.RemoteEstimates.link_capacity_upper_kbps_deltas)
}
inline void RemoteEstimates::set_link_capacity_upper_kbps_deltas(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  link_capacity_upper_kbps_deltas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.RemoteEstimates.link_capacity_upper_kbps_deltas)
}
inline std::string* RemoteEstimates::mutable_link_capacity_upper_kbps_deltas() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.RemoteEstimates.link_capacity_upper_kbps_deltas)
  return link_capacity_upper_kbps_deltas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RemoteEstimates::release_link_capacity_upper_kbps_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.RemoteEstimates.link_capacity_upper_kbps_deltas)
  if (!has_link_capacity_upper_kbps_deltas()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return link_capacity_upper_kbps_deltas_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RemoteEstimates::set_allocated_link_capacity_upper_kbps_deltas(std::string* link_capacity_upper_kbps_deltas) {
  if (link_capacity_upper_kbps_deltas != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  link_capacity_upper_kbps_deltas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), link_capacity_upper_kbps_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.RemoteEstimates.link_capacity_upper_kbps_deltas)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rtclog2
}  // namespace webrtc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::webrtc::rtclog2::DelayBasedBweUpdates_DetectorState> : ::std::true_type {};
template <> struct is_proto_enum< ::webrtc::rtclog2::BweProbeResultFailure_FailureReason> : ::std::true_type {};
template <> struct is_proto_enum< ::webrtc::rtclog2::IceCandidatePairConfig_IceCandidatePairConfigType> : ::std::true_type {};
template <> struct is_proto_enum< ::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType> : ::std::true_type {};
template <> struct is_proto_enum< ::webrtc::rtclog2::IceCandidatePairConfig_Protocol> : ::std::true_type {};
template <> struct is_proto_enum< ::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily> : ::std::true_type {};
template <> struct is_proto_enum< ::webrtc::rtclog2::IceCandidatePairConfig_NetworkType> : ::std::true_type {};
template <> struct is_proto_enum< ::webrtc::rtclog2::IceCandidatePairEvent_IceCandidatePairEventType> : ::std::true_type {};
template <> struct is_proto_enum< ::webrtc::rtclog2::DtlsTransportStateEvent_DtlsTransportState> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rtc_5fevent_5flog2_2eproto
