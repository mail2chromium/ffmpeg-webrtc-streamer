// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chart.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chart_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chart_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "chart_enums.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chart_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chart_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace webrtc {
namespace analytics {
class Chart;
class ChartDefaultTypeInternal;
extern ChartDefaultTypeInternal _Chart_default_instance_;
class ChartCollection;
class ChartCollectionDefaultTypeInternal;
extern ChartCollectionDefaultTypeInternal _ChartCollection_default_instance_;
class DataSet;
class DataSetDefaultTypeInternal;
extern DataSetDefaultTypeInternal _DataSet_default_instance_;
class TickLabel;
class TickLabelDefaultTypeInternal;
extern TickLabelDefaultTypeInternal _TickLabel_default_instance_;
}  // namespace analytics
}  // namespace webrtc
PROTOBUF_NAMESPACE_OPEN
template<> ::webrtc::analytics::Chart* Arena::CreateMaybeMessage<::webrtc::analytics::Chart>(Arena*);
template<> ::webrtc::analytics::ChartCollection* Arena::CreateMaybeMessage<::webrtc::analytics::ChartCollection>(Arena*);
template<> ::webrtc::analytics::DataSet* Arena::CreateMaybeMessage<::webrtc::analytics::DataSet>(Arena*);
template<> ::webrtc::analytics::TickLabel* Arena::CreateMaybeMessage<::webrtc::analytics::TickLabel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace webrtc {
namespace analytics {

// ===================================================================

class DataSet :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.analytics.DataSet) */ {
 public:
  DataSet();
  virtual ~DataSet();

  DataSet(const DataSet& from);
  DataSet(DataSet&& from) noexcept
    : DataSet() {
    *this = ::std::move(from);
  }

  inline DataSet& operator=(const DataSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataSet& operator=(DataSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DataSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataSet* internal_default_instance() {
    return reinterpret_cast<const DataSet*>(
               &_DataSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DataSet& a, DataSet& b) {
    a.Swap(&b);
  }
  inline void Swap(DataSet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataSet* New() const final {
    return CreateMaybeMessage<DataSet>(nullptr);
  }

  DataSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataSet>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DataSet& from);
  void MergeFrom(const DataSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DataSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webrtc.analytics.DataSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXValuesFieldNumber = 1,
    kYValuesFieldNumber = 2,
    kLabelFieldNumber = 3,
    kStyleFieldNumber = 4,
    kHighlightPointsFieldNumber = 5,
  };
  // repeated float x_values = 1;
  int x_values_size() const;
  void clear_x_values();
  float x_values(int index) const;
  void set_x_values(int index, float value);
  void add_x_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      x_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_x_values();

  // repeated float y_values = 2;
  int y_values_size() const;
  void clear_y_values();
  float y_values(int index) const;
  void set_y_values(int index, float value);
  void add_y_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      y_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_y_values();

  // string label = 3;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);

  // .webrtc.analytics.ChartStyle.Type style = 4;
  void clear_style();
  ::webrtc::analytics::ChartStyle_Type style() const;
  void set_style(::webrtc::analytics::ChartStyle_Type value);

  // bool highlight_points = 5;
  void clear_highlight_points();
  bool highlight_points() const;
  void set_highlight_points(bool value);

  // @@protoc_insertion_point(class_scope:webrtc.analytics.DataSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > x_values_;
  mutable std::atomic<int> _x_values_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > y_values_;
  mutable std::atomic<int> _y_values_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  int style_;
  bool highlight_points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chart_2eproto;
};
// -------------------------------------------------------------------

class TickLabel :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.analytics.TickLabel) */ {
 public:
  TickLabel();
  virtual ~TickLabel();

  TickLabel(const TickLabel& from);
  TickLabel(TickLabel&& from) noexcept
    : TickLabel() {
    *this = ::std::move(from);
  }

  inline TickLabel& operator=(const TickLabel& from) {
    CopyFrom(from);
    return *this;
  }
  inline TickLabel& operator=(TickLabel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TickLabel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TickLabel* internal_default_instance() {
    return reinterpret_cast<const TickLabel*>(
               &_TickLabel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TickLabel& a, TickLabel& b) {
    a.Swap(&b);
  }
  inline void Swap(TickLabel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TickLabel* New() const final {
    return CreateMaybeMessage<TickLabel>(nullptr);
  }

  TickLabel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TickLabel>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TickLabel& from);
  void MergeFrom(const TickLabel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TickLabel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webrtc.analytics.TickLabel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 2,
    kValueFieldNumber = 1,
  };
  // string label = 2;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);

  // float value = 1;
  void clear_value();
  float value() const;
  void set_value(float value);

  // @@protoc_insertion_point(class_scope:webrtc.analytics.TickLabel)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  float value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chart_2eproto;
};
// -------------------------------------------------------------------

class Chart :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.analytics.Chart) */ {
 public:
  Chart();
  virtual ~Chart();

  Chart(const Chart& from);
  Chart(Chart&& from) noexcept
    : Chart() {
    *this = ::std::move(from);
  }

  inline Chart& operator=(const Chart& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chart& operator=(Chart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Chart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Chart* internal_default_instance() {
    return reinterpret_cast<const Chart*>(
               &_Chart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Chart& a, Chart& b) {
    a.Swap(&b);
  }
  inline void Swap(Chart* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chart* New() const final {
    return CreateMaybeMessage<Chart>(nullptr);
  }

  Chart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chart>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Chart& from);
  void MergeFrom(const Chart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Chart* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webrtc.analytics.Chart";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSetsFieldNumber = 1,
    kYaxisTickLabelsFieldNumber = 10,
    kXaxisLabelFieldNumber = 4,
    kYaxisLabelFieldNumber = 7,
    kTitleFieldNumber = 8,
    kIdFieldNumber = 9,
    kXaxisMinFieldNumber = 2,
    kXaxisMaxFieldNumber = 3,
    kYaxisMinFieldNumber = 5,
    kYaxisMaxFieldNumber = 6,
  };
  // repeated .webrtc.analytics.DataSet data_sets = 1;
  int data_sets_size() const;
  void clear_data_sets();
  ::webrtc::analytics::DataSet* mutable_data_sets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::analytics::DataSet >*
      mutable_data_sets();
  const ::webrtc::analytics::DataSet& data_sets(int index) const;
  ::webrtc::analytics::DataSet* add_data_sets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::analytics::DataSet >&
      data_sets() const;

  // repeated .webrtc.analytics.TickLabel yaxis_tick_labels = 10;
  int yaxis_tick_labels_size() const;
  void clear_yaxis_tick_labels();
  ::webrtc::analytics::TickLabel* mutable_yaxis_tick_labels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::analytics::TickLabel >*
      mutable_yaxis_tick_labels();
  const ::webrtc::analytics::TickLabel& yaxis_tick_labels(int index) const;
  ::webrtc::analytics::TickLabel* add_yaxis_tick_labels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::analytics::TickLabel >&
      yaxis_tick_labels() const;

  // string xaxis_label = 4;
  void clear_xaxis_label();
  const std::string& xaxis_label() const;
  void set_xaxis_label(const std::string& value);
  void set_xaxis_label(std::string&& value);
  void set_xaxis_label(const char* value);
  void set_xaxis_label(const char* value, size_t size);
  std::string* mutable_xaxis_label();
  std::string* release_xaxis_label();
  void set_allocated_xaxis_label(std::string* xaxis_label);

  // string yaxis_label = 7;
  void clear_yaxis_label();
  const std::string& yaxis_label() const;
  void set_yaxis_label(const std::string& value);
  void set_yaxis_label(std::string&& value);
  void set_yaxis_label(const char* value);
  void set_yaxis_label(const char* value, size_t size);
  std::string* mutable_yaxis_label();
  std::string* release_yaxis_label();
  void set_allocated_yaxis_label(std::string* yaxis_label);

  // string title = 8;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);

  // string id = 9;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // float xaxis_min = 2;
  void clear_xaxis_min();
  float xaxis_min() const;
  void set_xaxis_min(float value);

  // float xaxis_max = 3;
  void clear_xaxis_max();
  float xaxis_max() const;
  void set_xaxis_max(float value);

  // float yaxis_min = 5;
  void clear_yaxis_min();
  float yaxis_min() const;
  void set_yaxis_min(float value);

  // float yaxis_max = 6;
  void clear_yaxis_max();
  float yaxis_max() const;
  void set_yaxis_max(float value);

  // @@protoc_insertion_point(class_scope:webrtc.analytics.Chart)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::analytics::DataSet > data_sets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::analytics::TickLabel > yaxis_tick_labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xaxis_label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr yaxis_label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  float xaxis_min_;
  float xaxis_max_;
  float yaxis_min_;
  float yaxis_max_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chart_2eproto;
};
// -------------------------------------------------------------------

class ChartCollection :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.analytics.ChartCollection) */ {
 public:
  ChartCollection();
  virtual ~ChartCollection();

  ChartCollection(const ChartCollection& from);
  ChartCollection(ChartCollection&& from) noexcept
    : ChartCollection() {
    *this = ::std::move(from);
  }

  inline ChartCollection& operator=(const ChartCollection& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartCollection& operator=(ChartCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ChartCollection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChartCollection* internal_default_instance() {
    return reinterpret_cast<const ChartCollection*>(
               &_ChartCollection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChartCollection& a, ChartCollection& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartCollection* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChartCollection* New() const final {
    return CreateMaybeMessage<ChartCollection>(nullptr);
  }

  ChartCollection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChartCollection>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ChartCollection& from);
  void MergeFrom(const ChartCollection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChartCollection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webrtc.analytics.ChartCollection";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChartsFieldNumber = 1,
  };
  // repeated .webrtc.analytics.Chart charts = 1;
  int charts_size() const;
  void clear_charts();
  ::webrtc::analytics::Chart* mutable_charts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::analytics::Chart >*
      mutable_charts();
  const ::webrtc::analytics::Chart& charts(int index) const;
  ::webrtc::analytics::Chart* add_charts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::analytics::Chart >&
      charts() const;

  // @@protoc_insertion_point(class_scope:webrtc.analytics.ChartCollection)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::analytics::Chart > charts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chart_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DataSet

// repeated float x_values = 1;
inline int DataSet::x_values_size() const {
  return x_values_.size();
}
inline void DataSet::clear_x_values() {
  x_values_.Clear();
}
inline float DataSet::x_values(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.DataSet.x_values)
  return x_values_.Get(index);
}
inline void DataSet::set_x_values(int index, float value) {
  x_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:webrtc.analytics.DataSet.x_values)
}
inline void DataSet::add_x_values(float value) {
  x_values_.Add(value);
  // @@protoc_insertion_point(field_add:webrtc.analytics.DataSet.x_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DataSet::x_values() const {
  // @@protoc_insertion_point(field_list:webrtc.analytics.DataSet.x_values)
  return x_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DataSet::mutable_x_values() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.analytics.DataSet.x_values)
  return &x_values_;
}

// repeated float y_values = 2;
inline int DataSet::y_values_size() const {
  return y_values_.size();
}
inline void DataSet::clear_y_values() {
  y_values_.Clear();
}
inline float DataSet::y_values(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.DataSet.y_values)
  return y_values_.Get(index);
}
inline void DataSet::set_y_values(int index, float value) {
  y_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:webrtc.analytics.DataSet.y_values)
}
inline void DataSet::add_y_values(float value) {
  y_values_.Add(value);
  // @@protoc_insertion_point(field_add:webrtc.analytics.DataSet.y_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DataSet::y_values() const {
  // @@protoc_insertion_point(field_list:webrtc.analytics.DataSet.y_values)
  return y_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DataSet::mutable_y_values() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.analytics.DataSet.y_values)
  return &y_values_;
}

// string label = 3;
inline void DataSet::clear_label() {
  label_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DataSet::label() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.DataSet.label)
  return label_.GetNoArena();
}
inline void DataSet::set_label(const std::string& value) {
  
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.analytics.DataSet.label)
}
inline void DataSet::set_label(std::string&& value) {
  
  label_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.analytics.DataSet.label)
}
inline void DataSet::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.analytics.DataSet.label)
}
inline void DataSet::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.analytics.DataSet.label)
}
inline std::string* DataSet::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:webrtc.analytics.DataSet.label)
  return label_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DataSet::release_label() {
  // @@protoc_insertion_point(field_release:webrtc.analytics.DataSet.label)
  
  return label_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DataSet::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:webrtc.analytics.DataSet.label)
}

// .webrtc.analytics.ChartStyle.Type style = 4;
inline void DataSet::clear_style() {
  style_ = 0;
}
inline ::webrtc::analytics::ChartStyle_Type DataSet::style() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.DataSet.style)
  return static_cast< ::webrtc::analytics::ChartStyle_Type >(style_);
}
inline void DataSet::set_style(::webrtc::analytics::ChartStyle_Type value) {
  
  style_ = value;
  // @@protoc_insertion_point(field_set:webrtc.analytics.DataSet.style)
}

// bool highlight_points = 5;
inline void DataSet::clear_highlight_points() {
  highlight_points_ = false;
}
inline bool DataSet::highlight_points() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.DataSet.highlight_points)
  return highlight_points_;
}
inline void DataSet::set_highlight_points(bool value) {
  
  highlight_points_ = value;
  // @@protoc_insertion_point(field_set:webrtc.analytics.DataSet.highlight_points)
}

// -------------------------------------------------------------------

// TickLabel

// float value = 1;
inline void TickLabel::clear_value() {
  value_ = 0;
}
inline float TickLabel::value() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.TickLabel.value)
  return value_;
}
inline void TickLabel::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:webrtc.analytics.TickLabel.value)
}

// string label = 2;
inline void TickLabel::clear_label() {
  label_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TickLabel::label() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.TickLabel.label)
  return label_.GetNoArena();
}
inline void TickLabel::set_label(const std::string& value) {
  
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.analytics.TickLabel.label)
}
inline void TickLabel::set_label(std::string&& value) {
  
  label_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.analytics.TickLabel.label)
}
inline void TickLabel::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.analytics.TickLabel.label)
}
inline void TickLabel::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.analytics.TickLabel.label)
}
inline std::string* TickLabel::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:webrtc.analytics.TickLabel.label)
  return label_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TickLabel::release_label() {
  // @@protoc_insertion_point(field_release:webrtc.analytics.TickLabel.label)
  
  return label_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TickLabel::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:webrtc.analytics.TickLabel.label)
}

// -------------------------------------------------------------------

// Chart

// repeated .webrtc.analytics.DataSet data_sets = 1;
inline int Chart::data_sets_size() const {
  return data_sets_.size();
}
inline void Chart::clear_data_sets() {
  data_sets_.Clear();
}
inline ::webrtc::analytics::DataSet* Chart::mutable_data_sets(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.analytics.Chart.data_sets)
  return data_sets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::analytics::DataSet >*
Chart::mutable_data_sets() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.analytics.Chart.data_sets)
  return &data_sets_;
}
inline const ::webrtc::analytics::DataSet& Chart::data_sets(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.Chart.data_sets)
  return data_sets_.Get(index);
}
inline ::webrtc::analytics::DataSet* Chart::add_data_sets() {
  // @@protoc_insertion_point(field_add:webrtc.analytics.Chart.data_sets)
  return data_sets_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::analytics::DataSet >&
Chart::data_sets() const {
  // @@protoc_insertion_point(field_list:webrtc.analytics.Chart.data_sets)
  return data_sets_;
}

// float xaxis_min = 2;
inline void Chart::clear_xaxis_min() {
  xaxis_min_ = 0;
}
inline float Chart::xaxis_min() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.Chart.xaxis_min)
  return xaxis_min_;
}
inline void Chart::set_xaxis_min(float value) {
  
  xaxis_min_ = value;
  // @@protoc_insertion_point(field_set:webrtc.analytics.Chart.xaxis_min)
}

// float xaxis_max = 3;
inline void Chart::clear_xaxis_max() {
  xaxis_max_ = 0;
}
inline float Chart::xaxis_max() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.Chart.xaxis_max)
  return xaxis_max_;
}
inline void Chart::set_xaxis_max(float value) {
  
  xaxis_max_ = value;
  // @@protoc_insertion_point(field_set:webrtc.analytics.Chart.xaxis_max)
}

// string xaxis_label = 4;
inline void Chart::clear_xaxis_label() {
  xaxis_label_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Chart::xaxis_label() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.Chart.xaxis_label)
  return xaxis_label_.GetNoArena();
}
inline void Chart::set_xaxis_label(const std::string& value) {
  
  xaxis_label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.analytics.Chart.xaxis_label)
}
inline void Chart::set_xaxis_label(std::string&& value) {
  
  xaxis_label_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.analytics.Chart.xaxis_label)
}
inline void Chart::set_xaxis_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  xaxis_label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.analytics.Chart.xaxis_label)
}
inline void Chart::set_xaxis_label(const char* value, size_t size) {
  
  xaxis_label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.analytics.Chart.xaxis_label)
}
inline std::string* Chart::mutable_xaxis_label() {
  
  // @@protoc_insertion_point(field_mutable:webrtc.analytics.Chart.xaxis_label)
  return xaxis_label_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Chart::release_xaxis_label() {
  // @@protoc_insertion_point(field_release:webrtc.analytics.Chart.xaxis_label)
  
  return xaxis_label_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Chart::set_allocated_xaxis_label(std::string* xaxis_label) {
  if (xaxis_label != nullptr) {
    
  } else {
    
  }
  xaxis_label_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xaxis_label);
  // @@protoc_insertion_point(field_set_allocated:webrtc.analytics.Chart.xaxis_label)
}

// float yaxis_min = 5;
inline void Chart::clear_yaxis_min() {
  yaxis_min_ = 0;
}
inline float Chart::yaxis_min() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.Chart.yaxis_min)
  return yaxis_min_;
}
inline void Chart::set_yaxis_min(float value) {
  
  yaxis_min_ = value;
  // @@protoc_insertion_point(field_set:webrtc.analytics.Chart.yaxis_min)
}

// float yaxis_max = 6;
inline void Chart::clear_yaxis_max() {
  yaxis_max_ = 0;
}
inline float Chart::yaxis_max() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.Chart.yaxis_max)
  return yaxis_max_;
}
inline void Chart::set_yaxis_max(float value) {
  
  yaxis_max_ = value;
  // @@protoc_insertion_point(field_set:webrtc.analytics.Chart.yaxis_max)
}

// string yaxis_label = 7;
inline void Chart::clear_yaxis_label() {
  yaxis_label_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Chart::yaxis_label() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.Chart.yaxis_label)
  return yaxis_label_.GetNoArena();
}
inline void Chart::set_yaxis_label(const std::string& value) {
  
  yaxis_label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.analytics.Chart.yaxis_label)
}
inline void Chart::set_yaxis_label(std::string&& value) {
  
  yaxis_label_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.analytics.Chart.yaxis_label)
}
inline void Chart::set_yaxis_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  yaxis_label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.analytics.Chart.yaxis_label)
}
inline void Chart::set_yaxis_label(const char* value, size_t size) {
  
  yaxis_label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.analytics.Chart.yaxis_label)
}
inline std::string* Chart::mutable_yaxis_label() {
  
  // @@protoc_insertion_point(field_mutable:webrtc.analytics.Chart.yaxis_label)
  return yaxis_label_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Chart::release_yaxis_label() {
  // @@protoc_insertion_point(field_release:webrtc.analytics.Chart.yaxis_label)
  
  return yaxis_label_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Chart::set_allocated_yaxis_label(std::string* yaxis_label) {
  if (yaxis_label != nullptr) {
    
  } else {
    
  }
  yaxis_label_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), yaxis_label);
  // @@protoc_insertion_point(field_set_allocated:webrtc.analytics.Chart.yaxis_label)
}

// string title = 8;
inline void Chart::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Chart::title() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.Chart.title)
  return title_.GetNoArena();
}
inline void Chart::set_title(const std::string& value) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.analytics.Chart.title)
}
inline void Chart::set_title(std::string&& value) {
  
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.analytics.Chart.title)
}
inline void Chart::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.analytics.Chart.title)
}
inline void Chart::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.analytics.Chart.title)
}
inline std::string* Chart::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:webrtc.analytics.Chart.title)
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Chart::release_title() {
  // @@protoc_insertion_point(field_release:webrtc.analytics.Chart.title)
  
  return title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Chart::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:webrtc.analytics.Chart.title)
}

// string id = 9;
inline void Chart::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Chart::id() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.Chart.id)
  return id_.GetNoArena();
}
inline void Chart::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.analytics.Chart.id)
}
inline void Chart::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.analytics.Chart.id)
}
inline void Chart::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.analytics.Chart.id)
}
inline void Chart::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.analytics.Chart.id)
}
inline std::string* Chart::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:webrtc.analytics.Chart.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Chart::release_id() {
  // @@protoc_insertion_point(field_release:webrtc.analytics.Chart.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Chart::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:webrtc.analytics.Chart.id)
}

// repeated .webrtc.analytics.TickLabel yaxis_tick_labels = 10;
inline int Chart::yaxis_tick_labels_size() const {
  return yaxis_tick_labels_.size();
}
inline void Chart::clear_yaxis_tick_labels() {
  yaxis_tick_labels_.Clear();
}
inline ::webrtc::analytics::TickLabel* Chart::mutable_yaxis_tick_labels(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.analytics.Chart.yaxis_tick_labels)
  return yaxis_tick_labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::analytics::TickLabel >*
Chart::mutable_yaxis_tick_labels() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.analytics.Chart.yaxis_tick_labels)
  return &yaxis_tick_labels_;
}
inline const ::webrtc::analytics::TickLabel& Chart::yaxis_tick_labels(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.Chart.yaxis_tick_labels)
  return yaxis_tick_labels_.Get(index);
}
inline ::webrtc::analytics::TickLabel* Chart::add_yaxis_tick_labels() {
  // @@protoc_insertion_point(field_add:webrtc.analytics.Chart.yaxis_tick_labels)
  return yaxis_tick_labels_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::analytics::TickLabel >&
Chart::yaxis_tick_labels() const {
  // @@protoc_insertion_point(field_list:webrtc.analytics.Chart.yaxis_tick_labels)
  return yaxis_tick_labels_;
}

// -------------------------------------------------------------------

// ChartCollection

// repeated .webrtc.analytics.Chart charts = 1;
inline int ChartCollection::charts_size() const {
  return charts_.size();
}
inline void ChartCollection::clear_charts() {
  charts_.Clear();
}
inline ::webrtc::analytics::Chart* ChartCollection::mutable_charts(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.analytics.ChartCollection.charts)
  return charts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::analytics::Chart >*
ChartCollection::mutable_charts() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.analytics.ChartCollection.charts)
  return &charts_;
}
inline const ::webrtc::analytics::Chart& ChartCollection::charts(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.ChartCollection.charts)
  return charts_.Get(index);
}
inline ::webrtc::analytics::Chart* ChartCollection::add_charts() {
  // @@protoc_insertion_point(field_add:webrtc.analytics.ChartCollection.charts)
  return charts_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webrtc::analytics::Chart >&
ChartCollection::charts() const {
  // @@protoc_insertion_point(field_list:webrtc.analytics.ChartCollection.charts)
  return charts_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace analytics
}  // namespace webrtc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chart_2eproto
